@using System.Text;
@using Generacion.Models.DatosConsola;
@using Generacion.Models.Mantenimiento;
@using Generacion.Models.Session;
@using Microsoft.AspNetCore.Html;
@{
    Dictionary<string, List<SessionOperario>> datoHorario = ViewData["horarioOperarios"] as Dictionary<string, List<SessionOperario>>;
    List<SessionOperario> mañana = datoHorario.ContainsKey("mañana") ? datoHorario["mañana"] : new List<SessionOperario>();
    List<SessionOperario> tarde = datoHorario.ContainsKey("tarde") ? datoHorario["tarde"] : new List<SessionOperario>();
    List<SessionOperario> noche = datoHorario.ContainsKey("noche") ? datoHorario["noche"] : new List<SessionOperario>();


    Dictionary<string, Dictionary<int, CilindroAceiteCarter>> datosTKVessel = ViewData["datosTKVessel"] as Dictionary<string, Dictionary<int, CilindroAceiteCarter>>;
    Dictionary<string, List<RegistrosDatosEngine>> runingHours = ViewData["RuningHours"] as Dictionary<string, List<RegistrosDatosEngine>>;


    DateTime fechaActual = DateTime.Now;


    Func<List<SessionOperario>, int, IHtmlContent> MostrarTurno = (operarios, maxOperarios) =>
                  {
                      StringBuilder sb = new StringBuilder();
                      int cantidadDeDatos = 0;

                      foreach (SessionOperario operario in operarios)
                      {
                          cantidadDeDatos++;
                          if (maxOperarios < cantidadDeDatos)
                              continue;

                          if (cantidadDeDatos == maxOperarios)
                          {
                              sb.Append($"   /   {operario.NombreOperario} ");
                          }
                          else
                          {
                              sb.Append($"{operario.NombreOperario}");
                          }
                      }

                      if (cantidadDeDatos == 0)
                      {
                          return new HtmlString("<p>             /             </p>");
                      }
                      else
                      {
                          return new HtmlString($"<p>{sb.ToString()}</p>");
                      }
                  };
}



<div id="reportDealy" class="content-report">
    <div class="header-detail-report">
        <div class="title-report col-md-12">
            <h2>REPORTE DIARIO DE MANTENIMIENTO</h2>
            <h3 id="tituloMantenimiento">Central Termica</h3>
        </div>
        <div class="row">
            <div class="col-md-6" style="display: flow;">
                <div class="content-img-logo">
                    <img class="image-logo" src="./img/logo_elec.png" />
                </div>
                @if (runingHours["Engine1"].Count > 5)
                {
                    <div>
                        <p style="width:50%">Horas motor EG01:</p>
                        <input value="@runingHours["Engine1"][5].RunHours" type="number" id="horasEG1" style="width:50%; text-align: center;" placeholder="0000 Hrs" />
                    </div>
                }
                else
                {
                    <div>
                        <p style="width:50%">Horas motor EG01:</p>
                        <input value="0" type="number" id="horasEG1" style="width:50%; text-align: center;" placeholder="0000 Hrs" />
                    </div>
                }

            </div>
            <div class="col-md-6">
                @{
                    StringBuilder sb = new StringBuilder();
                    int cantidadDeDatos = 0;
                    <div>
                        <p1>Código</p1>
                        <p>ELD-REPORT @fechaActual.ToString("dd/MM/yyyy")</p>
                    </div>
                    <div>
                        <p1>Turno 1</p1>
                        @MostrarTurno(mañana,2)
                    </div>

                    <div>
                        <p1>Turno 2</p1>
                        @MostrarTurno(tarde,2)
                    </div>

                    <div>
                        <p1>Turno 3</p1>
                        @MostrarTurno(noche,2)
                    </div>
                    <div>
                        <p1>Fecha</p1>
                        <p>@fechaActual.ToString("dd/MM/yyyy")</p>
                    </div>
                }
                @if (runingHours["Engine2"].Count > 5)
                {
                    <div>
                        <p1>Horas motor EG02:</p1>
                        <input value="@runingHours["Engine2"][5].RunHours" type="number" id="horasEG2" style="width:100%; text-align: center;" placeholder="0000 Hrs" />
                    </div>
                }
                else
                {
                    <div>
                        <p1>Horas motor EG02:</p1>
                        <input value="0" type="number" id="horasEG2" style="width:100%; text-align: center;" placeholder="0000 Hrs" />
                    </div>
                }
            </div>
        </div>
    </div>

    <div id="editorjs"></div>
</div>

<script src="~/js/editor/Image-latest.js"></script>
<script src="~/js/editor/header-latest.js"></script>
<script src="~/js/editor/editorjs-2.28.2.js"></script>
<script src="~/js/editor/editorjs-paragraph-with-alignment-3.0.0.js"></script>
<script src="~/js/editor/editorjs-table-2.2.2.js"></script>
<script>

    let editor = new EditorJS({
        holder: 'editorjs',
        autofocus: true,
        tools: {
            header: {
                class: Header,
                inlineToolbar: ['marker', 'link'],
                config: {
                    placeholder: 'Header'
                }, shortcut: 'CMD+SHIFT+H'
            }, image: {
                class: ImageTool,
                config: {
                    endpoints: {
                        byFile: 'http://localhost:8008/uploadFile', // Your backend file uploader endpoint
                        byUrl: 'http://localhost:8008/fetchUrl', // Your endpoint that provides uploading by Url
                    }
                }
            },
            paragraph: {
                class: Paragraph,
                inlineToolbar: true
            },
            table: {
                class: Table,
                inlineToolbar: true,
                config: {
                    rows: 2,
                    cols: 3,
                }
            },
        }
    });



    function InitEditorJS(jsonObj) {
        let auxJsonObj = IsEmptyText(jsonObj) ? {} : JSON.parse(jsonObj);
        let editor = new EditorJS({
            holder: 'editorjs',
            autofocus: true,
            tools: {
                paragraph: {
                    class: Paragraph,
                    inlineToolbar: true
                },
                table: {
                    class: Table,
                    inlineToolbar: true,
                    config: {
                        rows: 2,
                        cols: 3,
                    }
                },
            },
            data: auxJsonObj
        });
        return editor;
    }

</script>