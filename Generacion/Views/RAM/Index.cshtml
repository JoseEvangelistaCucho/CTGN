@using Generacion.Models.ReporteProduccion;
@using Generacion.Models.ReporteRAM;
@using Newtonsoft.Json;
@using Generacion.Models.DatosConsola;
@using Generacion.Models.ION;
@using Generacion.Models.ReporteDiarioGAS;
@using Generacion.Models.ReporteProduccion;
@using Microsoft.AspNetCore.Html;
@using Microsoft.AspNetCore.Razor.TagHelpers;
@using Newtonsoft.Json;
@using System.Globalization;
@using static Stimulsoft.Report.StiOptions.Engine;
@model Dictionary<int,Dictionary<DateTime, List<RegistroEventos>>>;

@{
    Dictionary<string, CabecerasTabla> datosCabecera = ViewData["datosCabecera"] as Dictionary<string, CabecerasTabla>;//

    string fechaSeleccionada = ViewBag.fechaSeleccionada ?? string.Empty;

    /****************************************************************/
    TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;

    Dictionary<DateTime, List<EnergiaProducida>> datosProduccion = ViewData["datosGeneralesProduccion"] as Dictionary<DateTime, List<EnergiaProducida>>;
    Dictionary<DateTime, Dictionary<int, List<ReporteProduccionStatus>>> detallesProduccion = ViewData["datosDetalleProduccion"] as Dictionary<DateTime, Dictionary<int, List<ReporteProduccionStatus>>>;
    List<ReporteProducion> datosION = ViewData["datosION"] as List<ReporteProducion>;
    List<DetalleReporteGas> reporteGas = ViewData["reporteGas"] as List<DetalleReporteGas>;
    Dictionary<string, List<LevelLubeOilCartel>> datosCarter = ViewData["datosAceite"] as Dictionary<string, List<LevelLubeOilCartel>>;
    List<CityGateFlow> cityGateYesterday = ViewData["cityGateYesterday"] as List<CityGateFlow>;
    List<CityGateFlow> cityGateToday = ViewData["cityGateToday"] as List<CityGateFlow>;
    Dictionary<string, DBRAM> datosRamPorMes = ViewData["datosRamPorMes"] as Dictionary<string, DBRAM>;
    Dictionary<string, Dictionary<int, Dictionary<string, ArranqueSincronizacion>>> datosArranque = ViewData["datosArranque"] as Dictionary<string, Dictionary<int, Dictionary<string, ArranqueSincronizacion>>>;

    Dictionary<int, Dictionary<DateTime, Dictionary<int, Dictionary<int, Dictionary<string, ViewOIL>>>>> datosVistaOil = ViewData["datosVistaOil"] as Dictionary<int, Dictionary<DateTime, Dictionary<int, Dictionary<int, Dictionary<string, ViewOIL>>>>>;
    Dictionary<int, Dictionary<int, Dictionary<string, List<decimal>>>> datosGraficosOil = ViewData["datosGraficosOil"] as Dictionary<int, Dictionary<int, Dictionary<string, List<decimal>>>>;

    Dictionary<string, List<ReporteProducion>> datosIonMes = new Dictionary<string, List<ReporteProducion>>();
    Dictionary<string, List<decimal>> datosGasMes = new Dictionary<string, List<decimal>>();


    int montoCalcular = 73;
    decimal consumoGasAcumulado = 0;
    decimal nivelAceiteGalonGe1Acumulado = 0;
    decimal nivelAceiteGalonGe2Acumulado = 0;

    decimal cityGateYesterdayGE1Total = 0;
    decimal cityGateYesterdayGE2Total = 0;
    decimal cityGateTodayGE1Total = 0;
    decimal cityGateTodayGE2Total = 0;

    decimal valorGalones = 60M;
    decimal galonesLts = Math.Round(208M / 55M, 3);
    decimal cilGls = 55M;
    decimal glsCarter = valorGalones / galonesLts;
    int cantidadAgregadoMes = 0;

    Dictionary<string, List<decimal>> diccionarioGraficos = new Dictionary<string, List<decimal>>();

    Dictionary<string, Dictionary<string, decimal>> valoresPorMes = new Dictionary<string, Dictionary<string, decimal>>();
    Dictionary<string, Dictionary<string, decimal>> valoresProduccionPorMes = new Dictionary<string, Dictionary<string, decimal>>();
    Dictionary<string, Dictionary<string, string>> valoresStringProduccionPorMes = new Dictionary<string, Dictionary<string, string>>();
    Dictionary<string, Dictionary<string, decimal>> valoresListadoReport1 = new Dictionary<string, Dictionary<string, decimal>>();
    Dictionary<string, Dictionary<string, string>> valoresListadoGE1 = new Dictionary<string, Dictionary<string, string>>();
    Dictionary<string, Dictionary<string, string>> valoresListadoGE2 = new Dictionary<string, Dictionary<string, string>>();
    Dictionary<string, Dictionary<string, TimeSpan>> valoresListadoEventoGE1 = new Dictionary<string, Dictionary<string, TimeSpan>>();
    Dictionary<string, Dictionary<string, TimeSpan>> valoresListadoEventoGE2 = new Dictionary<string, Dictionary<string, TimeSpan>>();
    Dictionary<DateTime, string> valoresMes = new Dictionary<DateTime, string>();

    decimal ultimoValorAceite = 0;

    Func<Dictionary<DateTime, string>> ObtenerFechasAño = () =>
     {
         CultureInfo culture = new CultureInfo("es-ES");

         for (int mes = 1; mes <= 12; mes++)
         {
             DateTime primerDiaMes = new DateTime(DateTime.Now.Year, mes, 1);

             string nombreMes = culture.DateTimeFormat.GetMonthName(mes);

             valoresMes.Add(primerDiaMes, nombreMes);
         }

         return valoresMes;
     };

    ObtenerFechasAño();

    Func<Dictionary<string, List<string>>> ObtenerFechasPorMes = () =>
     {
         DateTime fechaActual = DateTime.Now;
         DateTime primerDiaDelAno = new DateTime(fechaActual.Year, 1, 1);
         DateTime ultimoDiaDelAno = new DateTime(fechaActual.Year, 12, 31);

         Dictionary<string, List<string>> fechasPorMes = new Dictionary<string, List<string>>();

         for (int mes = 1; mes <= 12; mes++)
         {
             DateTime primerDiaDelMes = new DateTime(fechaActual.Year, mes, 1);
             DateTime ultimoDiaDelMes = new DateTime(fechaActual.Year, mes, DateTime.DaysInMonth(fechaActual.Year, mes));

             string nombreMes = primerDiaDelMes.ToString("MMMM", System.Globalization.CultureInfo.CreateSpecificCulture("es-ES"));

             fechasPorMes[nombreMes] = new List<string>();

             DateTime fechaActualIterativa = primerDiaDelMes;

             while (fechaActualIterativa <= ultimoDiaDelMes)
             {
                 string fechaFormateada = fechaActualIterativa.ToString("dd/MM/yyyy");
                 fechasPorMes[nombreMes].Add(fechaFormateada);
                 fechaActualIterativa = fechaActualIterativa.AddDays(1);
             }
         }
         return fechasPorMes;
     };


    Func<string, decimal, decimal, decimal> GenerateDataCellsAceite = (tipo, valorGen1, valorGen2) =>
          {
              decimal valor = 0;

              switch (tipo)
              {
                  case "total":
                      valor = Math.Round(valorGen2 + valorGen1, 2);
                      break;
                  case "añadidos":
                      valor = Math.Round(valorGen1 * galonesLts * 1000, 2);
                      break;
                  case "consumo":
                      valor = Math.Round(valorGen1 / (valorGen2 * 1000), 4);
                      break;
                  default:
                      valor = Math.Round(Math.Abs(valorGen2 - valorGen1) * valorGalones * 1000, 2);
                      break;
              }

              if (ultimoValorAceite != 0)
              {
                  ultimoValorAceite = 0;
              }
              else
              {
                  ultimoValorAceite = valor;
              }

              return valor;
          };


    Func<decimal, decimal, decimal> ConsumoTotalGas = (valorge1, valorge2) =>
       {
           decimal respuesta = 0;
           if (valorge2 < valorge1)
           {
               respuesta = valorge1 - 10000000 + valorge2;
           }
           else
           {
               respuesta = valorge2 - valorge1;
           }
           return respuesta;
       };

    Func<decimal, decimal, decimal> DivisionPorCero = (valor1, valor2) =>
       {
           decimal respuesta = 0;
           if (valor2 != 0)
           {
               respuesta = valor1 / valor2;
           }
           return respuesta;
       };


    Func<Dictionary<string, decimal>, string, decimal> ValidarcionValorDecimal = (valor, key) =>
    {
        decimal respuesta = 0;
        if (valor.ContainsKey(key))
        {
            respuesta = valor[key];
        }
        else
        {
            respuesta = 0;
        }
        return respuesta;
    };

    Func<decimal, string> HorasParseadas = (valor) =>
    {
        int horas = (int)valor;
        int minutos = (int)((valor - horas) * 60);
        int segundos = (int)(((valor - horas) * 60 - minutos) * 60);

        while (minutos >= 60)
        {
            horas++;
            minutos -= 60;
        }

        while (segundos >= 60)
        {
            minutos++;
            segundos -= 60;
        }

        return $"{horas:00}:{minutos:00}:{segundos:00}";
    };


    Func<Dictionary<string, Dictionary<string, decimal>>, string, string, decimal> ValidarDatoEnDiccionario = (diccionario, llave, llaveValor) =>
    {
        decimal respuesta = 0m;

        if (diccionario != null && diccionario.ContainsKey(llave) && diccionario[llave].ContainsKey(llaveValor))
        {

            respuesta = diccionario[llave][llaveValor];
        }
        return respuesta;
    };

    Func<Dictionary<string, Dictionary<string, string>>, string, string, string> ValidarDatoEnDiccionarioString = (diccionario, llave, llaveValor) =>
    {
        string respuesta = string.Empty;

        if (diccionario != null && diccionario.ContainsKey(llave) && diccionario[llave].ContainsKey(llaveValor))
        {

            respuesta = diccionario[llave][llaveValor];
        }
        return respuesta;
    };



    Func<Dictionary<string, Dictionary<string, TimeSpan>>, string, string, TimeSpan> ValidarTiempoEnDiccionario = (diccionario, llave, llaveValor) =>
    {
        TimeSpan respuesta = new TimeSpan();

        if (diccionario != null && diccionario.ContainsKey(llave) && diccionario[llave].ContainsKey(llaveValor))
        {

            respuesta = diccionario[llave][llaveValor];


        }
        return respuesta;
    };

    Func<string, string, decimal> OperacionesHorasPorcentaje = (valor1, valor2) =>
    {
        string[] horasSplit = valor1.Split(":");
        string[] horasSplit2 = valor2.Split(":");

        int horas = int.Parse(horasSplit[0]);
        int minutos = int.Parse(horasSplit[1]);
        int segundos = int.Parse(horasSplit[2]);

        int horas2 = int.Parse(horasSplit2[0]);
        int minutos2 = int.Parse(horasSplit2[1]);
        int segundos2 = int.Parse(horasSplit2[2]);

        int totalSegundos = horas * 3600 + minutos * 60 + segundos;
        int totalSegundos2 = horas2 * 3600 + minutos2 * 60 + segundos2;


        decimal totalPorcentaje = (decimal)totalSegundos / totalSegundos2;
        return totalPorcentaje;
    };

    Func<string, decimal> ObtenerHorasParseadas = (valor1) =>
    {
        string[] partes = valor1.Split(':');
        int horas = int.Parse(partes[0]);
        int minutos = int.Parse(partes[1]);
        int segundos = int.Parse(partes[2]);
        return horas + ((decimal)minutos / 60) + ((decimal)segundos / 3600);
    };


    Func<string, string, string, string> OperacionesHorasParseadas = (valor1, valor2, tipo) =>
    {
        string[] horasSplit = valor1.Split(":");
        string[] horasSplit2 = valor2.Split(":");

        int horas = int.Parse(horasSplit[0]);
        int minutos = int.Parse(horasSplit[1]);
        int segundos = int.Parse(horasSplit[2]);

        int horas2 = int.Parse(horasSplit2[0]);
        int minutos2 = int.Parse(horasSplit2[1]);
        int segundos2 = int.Parse(horasSplit2[2]);

        if (tipo.Equals("suma"))
        {
            segundos += segundos2;
            minutos += minutos2;
            horas += horas2;

            minutos += segundos / 60;
            segundos %= 60;
            horas += minutos / 60;
            minutos %= 60;
        }
        else if (tipo.Equals("resta"))
        {
            segundos -= segundos2;
            minutos -= minutos2;
            horas -= horas2;

            while (segundos < 0)
            {
                minutos--;
                segundos += 60;
            }

            while (minutos < 0)
            {
                horas--;
                minutos += 60;
            }

            if (horas < 0)
            {
                horas = 0;
            }
        }

        return $"{horas:00}:{minutos:00}:{segundos:00}";
    };


}



<style>
    /************ EVENTOS ***************/
    .detalle-evento th {
        white-space: pre-line;
        padding: 0;
        font-size: 2vh;
        text-align: center;
    }

    .detalle-evento tbody tr td {
        white-space: nowrap;
        text-align: center;
        padding: 3px;
    }

    textarea {
        height: 24px;
        width: 300px;
        overflow-y: hidden;
        resize: none;
    }

    .titulo-hora-evento {
        width: 20vh;
    }

    .titulo-unidad-evento {
        width: 15vh;
    }

    .titulo-detalle-evento {
        width: 15vh;
    }

    .titulo-vista-general {
        border-bottom: solid 4px black;
        margin: 0;
        text-align: center;
        padding: 5vh 0 0 0;
        width: 100%;
    }

        .titulo-vista-general h1 {
            font-weight: bold;
        }

    .contenido-detalle-general {
        padding: 20px 0 0 0;
    }

    .table-bordered td, .table-bordered th {
        border: 1px solid black;
        color: black;
    }

    .table thead th {
        border-bottom: 2px solid black;
    }

    .detalle-calculado-horas td {
        font-weight: bold;
        background: #E1E0E0;
    }

    #btnEventEG1 {
        bottom: 1px;
    }

    .botonSeleccionado {
        background-color: #F37021;
        font-weight: bold;
    }

    .btn-light.focus, .btn-light:focus {
        background-color: #F37021;
    }

    #EventEG02 {
        display: none;
    }

    #EventEG01 {
        display: none;
    }

    .contendor-Botones-seleccion button {
        border-block-end-color: red;
    }






    /************ DATA ***************/

    #contenido-consulta-data .sidebar-divider {
        border-top: 3px solid rgba(0,5,0,0.1);
    }

    #tabla-gas-detalle {
        height: 10vh;
    }

    .table thead th {
        font-weight: bold;
        font-size: 14px;
        background: #d02139;
        color: white;
        box-shadow: inset 2px 2px 4px 1px rgb(138, 18, 35);
    }

    .tituloBody th {
        text-align: center !important;
        font-weight: bold;
        font-size: 24px;
        background: #d02139;
        color: white;
        box-shadow: inset 2px 2px 4px 1px rgb(138, 18, 35);
    }

    #contenedor-data-graficos .table {
        width: 50%;
        margin: 0 15px 15px 0;
    }

        #contenedor-data-graficos .table tbody th {
            text-align: left;
        }

    .table {
        color: black;
    }

        .table td, .table th {
            padding: 0px !important;
            text-align: center;
            vertical-align: middle;
        }

    .table-bordered td, .table-bordered th {
        border: 1px solid black !important;
    }

    #contenido-consulta-data input {
        text-align: center;
        width: 100%;
    }
    /************************************************/




    /***************** PRODUCCION *****************************/


    .contenedor-sin-movimiento {
        display: block;
    }

        .contenedor-sin-movimiento div {
            width: 400px;
            border: solid 1px black;
            font-weight: bold;
        }

    .contenedor-con-movimiento {
        display: flex;
        overflow-y: hidden;
        overflow-x: scroll;
        height: 100%;
    }

        .contenedor-con-movimiento div div {
            border: solid 1px black;
            text-align: center;
        }

    .tituloProduccion {
        font-weight: bold;
        font-size: 14px;
        background: #d02139;
        color: white;
        box-shadow: inset 2px 2px 4px 1px rgb(138, 18, 35);
    }

        .tituloProduccion input {
            font-size: 14px;
            font-weight: bold;
            background: transparent !important;
        }

    .contenedor-RAM input {
        border: none;
        height: 2.2vh;
    }

    .contenedor-RAM {
        font-size: 14px;
    }
    /********** contenedor-OutagePercentage ******************/

    .leyenda-projection {
        text-align: right;
    }

        .leyenda-projection table {
            width: 40%;
            display: inline-block;
        }

            .leyenda-projection table tbody tr th {
                width: 100vh;
            }

            .leyenda-projection table tbody tr td {
                width: 20vh;
            }

    #contenedor-Report1 {
        display: none;
    }

    .detalles-report1 {
        width: 110vh;
    }

    .contenedor-tablas-reporte {
        padding: 0 10vh 0 0;
    }

    .contenedor-Report2-detalles {
        display: flex;
    }

        .contenedor-Report2-detalles div {
            border: 1px solid;
        }

    .contenedor-Report2-detalles-titulo div {
        width: 25vh;
    }

    .contenedor-Report2-detalles-datos div {
        width: 12vh;
    }

    #contenedor-Report2 {
        display: none;
    }

    #contenido-produccion {
        display: none;
    }

    #contenedor-EG01 {
        display: none;
    }

    #contenedor-EG02 {
        display: none;
    }

    #contenedor-OutagePercentage {
        display: none;
    }

    #contenedor-OutageProjection {
        display: none;
    }


    .contenedor-detalle-numeracion-oil div {
        width: 5vh;
        height: 12vh;
        border: 1px solid;
    }

    .contenedor-detalle-titulo-oil div {
        height: 3vh;
        border: 1px solid;
        width: 30vh;
    }

    .contenedor-detalle-oil div {
        border: 1px solid;
        height: 3vh;
    }

    .contenedor-detalle-oil {
        height: 2vh;
        width: 12vh;
    }

        .contenedor-detalle-oil input {
            width: 100%;
            text-align: right;
        }

    .div-desactivado {
        pointer-events: none;
    }

    .fondo-detalle-maximo-oil {
        background: #F3DF6E;
    }

        .fondo-detalle-maximo-oil input {
            background: transparent !important;
        }

    .fondo-detalle-limite-oil {
        background: #F3A26E;
    }

        .fondo-detalle-limite-oil input {
            background: transparent !important;
        }

    .detalle-item-oil div {
        text-align: center;
        padding: 5vh 0 0 0px;
        font-weight: bold;
    }

</style>




<div style="position: fixed;bottom: 1rem;">
    <button class="btn btn-primary" id="GuardarDatos"><i class="fas fa-download fa-sm text-white-50"></i>Guardar Datos</button>
</div>
<div class="contendor-Botones-seleccion">
    <button style="bottom: 6.4vh;" class="btn btn-light  floating-button botonSeleccionado" id="btnData">
        <i id="mostrarVistaData">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
            </svg>
        </i>
        <i style="display:none;" id="ocultarVistaData">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588M5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z" />
                <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z" />
            </svg>
        </i>
        Data
    </button>
    <button class="btn btn-light  floating-button" id="btnEventEG1">
        <i style="display:none;" id="mostrarVistaGe1">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
            </svg>
        </i>
        <i id="ocultarVistaGe1">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588M5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z" />
                <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z" />
            </svg>
        </i>
        EG01 Outage
    </button>
    <button style="bottom: 6.4vh;" class="btn btn-light  floating-button" id="btnEventEG2">
        <i style="display:none;" id="mostrarVistaGe2">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
            </svg>
        </i>
        <i id="ocultarVistaGe2">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588M5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z" />
                <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z" />
            </svg>
        </i>
        EG02 Outage
    </button>
    <button style="bottom: 6.4vh;" class="btn btn-light  floating-button" id="btnProduccion">
        <i style="display:none;" id="mostrarVistaProduccion">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
            </svg>
        </i>
        <i id="ocultarVistaProduccion">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588M5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z" />
                <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z" />
            </svg>
        </i>
        Produccion
    </button>
    <button style="bottom: 6.4vh;" class="btn btn-light  floating-button" id="btnEG01">
        <i style="display:none;" id="mostrarVistaEG01">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
            </svg>
        </i>
        <i id="ocultarVistaEG01">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588M5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z" />
                <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z" />
            </svg>
        </i>
        EG01
    </button>
    <button style="bottom: 6.4vh;" class="btn btn-light  floating-button" id="btnEG02">
        <i style="display:none;" id="mostrarVistaEG02">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
            </svg>
        </i>
        <i id="ocultarVistaEG02">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588M5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z" />
                <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z" />
            </svg>
        </i>
        EG02
    </button>
    <button style="bottom: 6.4vh;" class="btn btn-light  floating-button" id="btnOutagePercentage">
        <i style="display:none;" id="mostrarVistaOutagePercentage">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
            </svg>
        </i>
        <i id="ocultarVistaOutagePercentage">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588M5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z" />
                <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z" />
            </svg>
        </i>
        Outage Percentage
    </button>
    <button style="bottom: 6.4vh;" class="btn btn-light  floating-button" id="btnOutageProjection">
        <i style="display:none;" id="mostrarVistaOutageProjection">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
            </svg>
        </i>
        <i id="ocultarVistaOutageProjection">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588M5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z" />
                <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z" />
            </svg>
        </i>
        Outage Projection
    </button>
    <button style="bottom: 6.4vh;" class="btn btn-light  floating-button" id="btnReport1">
        <i style="display:none;" id="mostrarVistaReport1">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
            </svg>
        </i>
        <i id="ocultarVistaReport1">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588M5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z" />
                <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z" />
            </svg>
        </i>
        Report1
    </button>

    <button style="bottom: 6.4vh;" class="btn btn-light  floating-button" id="btnReport2">
        <i style="display:none;" id="mostrarVistaReport2">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
            </svg>
        </i>
        <i id="ocultarVistaReport2">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588M5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z" />
                <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z" />
            </svg>
        </i>
        Report2
    </button>

    <button style="bottom: 6.4vh;" class="btn btn-light  floating-button" id="btnOil">
        <i style="display:none;" id="mostrarVistaOil">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
            </svg>
        </i>
        <i id="ocultarVistaOil">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588M5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z" />
                <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z" />
            </svg>
        </i>
        Oil
    </button>

    <button style="bottom: 6.4vh;" class="btn btn-light  floating-button" id="btnOilGraph">
        <i style="display:none;" id="mostrarVistaOilGraph">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
            </svg>
        </i>
        <i id="ocultarVistaOilGraph">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588M5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z" />
                <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z" />
            </svg>
        </i>
        Graph Oil
    </button>

    <button style="bottom: 6.4vh;" class="btn btn-light  floating-button" id="btnDeretingLoad">
        <i style="display:none;" id="mostrarVistaDeretingLoad">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
            </svg>
        </i>
        <i id="ocultarVistaDeretingLoad">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588M5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z" />
                <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z" />
            </svg>
        </i>
        Dereting Load
    </button>




</div>


<div class="contenedor-RAM">
    <div class="titulo-vista-general">
        <h1 id="tituloEvento-Ram">
        </h1>
    </div>
    <div class="contenido-detalle-general">

        <div>
            <div id="EventEG01">
                <table class="table table-bordered detalle-evento" id="tablaEventos">
                    <thead style="background: orange;color: black;">
                        <tr>
                            <th class="titulo-hora-evento" rowspan="2">Fecha y Hora deparada</th>
                            <th class="titulo-hora-evento" rowspan="2">Fecha y Hora de Arranque</th>
                            <th rowspan="2">Sistema</th>
                            <th class="titulo-unidad-evento" rowspan="2">Unidad Funcional</th>
                            <th colspan="4">Tipo de Parada (Horas)</th>
                            <th rowspan="2">Descripcion del Evento</th>
                        </tr>
                        <tr>
                            <th class="titulo-detalle-evento">External Trips</th>
                            <th class="titulo-detalle-evento">Forced Maint</th>
                            <th class="titulo-detalle-evento">Planned Maint</th>
                            <th class="titulo-detalle-evento">Stand By</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            if (Model.ContainsKey(1))
                            {
                                foreach (var kvp in Model[1])
                                {
                                    TimeSpan externalTrips = TimeSpan.Zero;
                                    TimeSpan forcedMaint = TimeSpan.Zero;
                                    TimeSpan plannedMaint = TimeSpan.Zero;
                                    TimeSpan StandBy = TimeSpan.Zero;
                                    foreach (var registro in kvp.Value)
                                    {
                                        <tr>
                                            <td>@(registro.FechaParada)</td>
                                            <td>@(registro.FechaArranque)</td>
                                            <td>@(registro.Sistema)</td>
                                            <td>@(registro.UnidadFuncional)</td>
                                            <td>@(registro.ExternalTrips)</td>
                                            <td>@(registro.ForcedMaint)</td>
                                            <td>@(registro.PlannedMaint)</td>
                                            <td>@(registro.StandBy)</td>
                                            <td>@(registro.DescripcionEvento)</td>
                                            <th></th>
                                        </tr>

                                        externalTrips = externalTrips.Add(TimeSpan.Parse(registro.ExternalTrips));
                                        forcedMaint = forcedMaint.Add(TimeSpan.Parse(registro.ForcedMaint));
                                        plannedMaint = plannedMaint.Add(TimeSpan.Parse(registro.PlannedMaint));
                                        StandBy = StandBy.Add(TimeSpan.Parse(registro.StandBy));
                                    }
                                    <tr class-atribute="totalEG1" class="detalle-calculado-horas">
                                        <td class-name="subtitulo" colspan="4">Total Tiempo de Parada Grupo N°1 (@(kvp.Key.ToString("MMMM")) @(kvp.Key.ToString("yyyy")))</td>
                                        <td class-name="totalExternalTrips">@externalTrips</td>
                                        <td class-name="totalForcedMaint">@forcedMaint</td>
                                        <td class-name="totalPlannedMaint">@plannedMaint</td>
                                        <td class-name="totalStandBy">@StandBy</td>
                                        <td></td>
                                    </tr>

                                    if (!valoresListadoEventoGE1.ContainsKey(kvp.Key.ToString("MMMM")))
                                    {
                                        // Si no existe, agrega un nuevo diccionario interno
                                        valoresListadoEventoGE1[kvp.Key.ToString("MMMM").ToLower()] = new Dictionary<string, TimeSpan>();
                                    }

                                    valoresListadoEventoGE1[kvp.Key.ToString("MMMM").ToLower()]["externalTrips"] = externalTrips;
                                    valoresListadoEventoGE1[kvp.Key.ToString("MMMM").ToLower()]["forcedMaint"] = forcedMaint;
                                    valoresListadoEventoGE1[kvp.Key.ToString("MMMM").ToLower()]["plannedMaint"] = plannedMaint;
                                    valoresListadoEventoGE1[kvp.Key.ToString("MMMM").ToLower()]["StandBy"] = StandBy;
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
            <div id="EventEG02">
                <table class="table table-bordered detalle-evento" id="tablaEventos">
                    <thead style="background: orange;color: black;">
                        <tr>
                            <th class="titulo-hora-evento" rowspan="2">Fecha y Hora deparada</th>
                            <th class="titulo-hora-evento" rowspan="2">Fecha y Hora de Arranque</th>
                            <th rowspan="2">Sistema</th>
                            <th class="titulo-unidad-evento" rowspan="2">Unidad Funcional</th>
                            <th colspan="4">Tipo de Parada (Horas)</th>
                            <th rowspan="2">Descripcion del Evento</th>
                        </tr>
                        <tr>
                            <th class="titulo-detalle-evento">External Trips</th>
                            <th class="titulo-detalle-evento">Forced Maint</th>
                            <th class="titulo-detalle-evento">Planned Maint</th>
                            <th class="titulo-detalle-evento">Stand By</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            if (Model.ContainsKey(2))
                            {
                                foreach (var kvp in Model[2])
                                {
                                    TimeSpan externalTrips = TimeSpan.Zero;
                                    TimeSpan forcedMaint = TimeSpan.Zero;
                                    TimeSpan plannedMaint = TimeSpan.Zero;
                                    TimeSpan StandBy = TimeSpan.Zero;
                                    foreach (var registro in kvp.Value)
                                    {
                                        <tr>
                                            <td>@(registro.FechaParada)</td>
                                            <td>@(registro.FechaArranque)</td>
                                            <td>@(registro.Sistema)</td>
                                            <td>@(registro.UnidadFuncional)</td>
                                            <td>@(registro.ExternalTrips)</td>
                                            <td>@(registro.ForcedMaint)</td>
                                            <td>@(registro.PlannedMaint)</td>
                                            <td>@(registro.StandBy)</td>
                                            <td>@(registro.DescripcionEvento)</td>
                                            <th></th>
                                        </tr>

                                        externalTrips = externalTrips.Add(TimeSpan.Parse(registro.ExternalTrips));
                                        forcedMaint = forcedMaint.Add(TimeSpan.Parse(registro.ForcedMaint));
                                        plannedMaint = plannedMaint.Add(TimeSpan.Parse(registro.PlannedMaint));
                                        StandBy = StandBy.Add(TimeSpan.Parse(registro.StandBy));
                                    }
                                    <tr class-atribute="totalEG2" class="detalle-calculado-horas">
                                        <td class-name="subtitulo" colspan="4">Total Tiempo de Parada Grupo N°2 (@(kvp.Key.ToString("MMMM")) @(kvp.Key.ToString("yyyy")))</td>
                                        <td class-name="totalExternalTrips">@externalTrips</td>
                                        <td class-name="totalForcedMaint">@forcedMaint</td>
                                        <td class-name="totalPlannedMaint">@plannedMaint</td>
                                        <td class-name="totalStandBy">@StandBy</td>
                                        <td></td>
                                    </tr>

                                    if (!valoresListadoEventoGE2.ContainsKey(kvp.Key.ToString("MMMM")))
                                    {
                                        // Si no existe, agrega un nuevo diccionario interno
                                        valoresListadoEventoGE2[kvp.Key.ToString("MMMM").ToLower()] = new Dictionary<string, TimeSpan>();
                                    }
                                    valoresListadoEventoGE2[kvp.Key.ToString("MMMM").ToLower()]["externalTrips"] = externalTrips;
                                    valoresListadoEventoGE2[kvp.Key.ToString("MMMM").ToLower()]["forcedMaint"] = forcedMaint;
                                    valoresListadoEventoGE2[kvp.Key.ToString("MMMM").ToLower()]["plannedMaint"] = plannedMaint;
                                    valoresListadoEventoGE2[kvp.Key.ToString("MMMM").ToLower()]["StandBy"] = StandBy;

                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div>
            <div id="contenido-data">
                <div>
                    <div>
                        <div>
                            <button style="bottom: 1px; background-color:#F37021;" class="btn btn-light btnMostrarGE floating-button" id="dataDetalles">
                                <i style="display:none;" id="mostrarVistaDetalles">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                                        <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                                        <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
                                    </svg>
                                </i>
                                <i id="ocultarVistaDetalles">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                                        <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588M5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z" />
                                        <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z" />
                                    </svg>
                                </i>
                                Detalle
                            </button>
                            <button style="bottom: 6.4vh;" class="btn btn-light btnMostrarGE floating-button" id="dataGraficos">
                                <i id="mostrarVistaGraficos">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                                        <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                                        <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
                                    </svg>
                                </i>
                                <i style="display:none;" id="ocultarVistaGraficos">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                                        <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588M5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z" />
                                        <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z" />
                                    </svg>
                                </i>
                                Graficos
                            </button>
                        </div>
                    </div>
                    <div>
                        <div id="contenedor-data-detalles">
                            @{
                                foreach (var datos in datosProduccion)
                                {
                                    var listaIonMes = new List<ReporteProducion>();
                                    var listaGasMes = new List<decimal>();

                                    consumoGasAcumulado = 0;
                                    nivelAceiteGalonGe1Acumulado = 0;
                                    nivelAceiteGalonGe2Acumulado = 0;

                                    cityGateYesterdayGE1Total = 0;
                                    cityGateYesterdayGE2Total = 0;
                                    cityGateTodayGE1Total = 0;
                                    cityGateTodayGE2Total = 0;
                                    // Obtener el nombre completo del mes
                                    string nombreMes = datos.Key.ToString("MMMM", new System.Globalization.CultureInfo("es-ES"));

                                    Dictionary<int, List<ReporteProduccionStatus>> datoMes = detallesProduccion.Where(x => x.Key.Equals(datos.Key)).Select(x => x.Value).FirstOrDefault();

                                    <table class="table table-bordered">
                                        <thead>
                                            <tr>
                                                <th rowspan="2">Date</th>
                                                <th colspan="4">PRODUCCIÓN @nombreMes.ToUpper() MWh</th>
                                                <th colspan="2">Horas de Operación</th>
                                                <th colspan="2">Consumo de gas kg</th>
                                                <th>ION</th>
                                                <th>GAS ERM</th>
                                                <th colspan="4">ACEITE</th>
                                            </tr>
                                            <tr>
                                                <th>Gen.1 act.energy MWh</th>
                                                <th>Gen.2 act.energy MWh</th>
                                                <th> energía total activa generada MWh</th>
                                                <th>Ingresos a: (MW/H)*US$</th>
                                                <th>Horas de operación acumuladas Gen.1</th>
                                                <th>Horas de operación acumuladas Gen.2</th>
                                                <th>Gen1. Consumo de gas en kg</th>
                                                <th>Gen2. Consumo de gas en kg</th>
                                                <th>Energía exportada MWh</th>
                                                <th>Consumo de gas Sm3</th>
                                                <th>Nivel de aceite motor 1</th>
                                                <th>Nivel de aceite motor 2</th>
                                                <th>Adición de aceite en carter Gen.1 GLS</th>
                                                <th>Adición de aceite en carter Gen.2 GLSS</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @for (int i = 0; i < datos.Value.Count; i++)
                                            {
                                                var horasOp1 = datoMes != null ? datoMes[1].Where(x => x.Fecha.Equals(datos.Value[i].Fecha)).Select(x => x.RunningHours).FirstOrDefault() : 0;
                                                var horasOp2 = datoMes != null ? datoMes[2].Where(x => x.Fecha.Equals(datos.Value[i].Fecha)).Select(x => x.RunningHours).FirstOrDefault() : 0;
                                                var energiaExportada = datosION != null ? datosION.Where(x => x.Fecha.Equals(datos.Value[i].Fecha)).Select(x => x.TotalPlantExportION).FirstOrDefault() : 0;
                                                var consumoGasDia = reporteGas != null ? reporteGas.Where(x => DateTime.Parse(x.Fecha).AddDays(-1).Equals(DateTime.Parse(datos.Value[i].Fecha))).Select(x => x.DP).FirstOrDefault() : 0;
                                                var nivelAceiteGe1 = datosCarter != null ? datosCarter["TODAY"].Where(x => x.Fecha.Equals(datos.Value[i].Fecha)).Select(x => x.Generador1).FirstOrDefault() : 0;
                                                var nivelAceiteGe2 = datosCarter != null ? datosCarter["TODAY"].Where(x => x.Fecha.Equals(datos.Value[i].Fecha)).Select(x => x.Generador2).FirstOrDefault() : 0;
                                                var nivelAceiteGalonGe1 = datosCarter != null ? datosCarter["ADDED"].Where(x => x.Fecha.Equals(datos.Value[i].Fecha)).Select(x => x.Generador1).FirstOrDefault() : 0;
                                                var nivelAceiteGalonGe2 = datosCarter != null ? datosCarter["ADDED"].Where(x => x.Fecha.Equals(datos.Value[i].Fecha)).Select(x => x.Generador2).FirstOrDefault() : 0;

                                                var cityGateYesterdayGE1 = cityGateYesterday != null ? cityGateYesterday.Where(x => x.Fecha.Equals(datos.Value[i].Fecha)).Select(x => x.KgEng1).FirstOrDefault() : 0;
                                                var cityGateYesterdayGE2 = cityGateYesterday != null ? cityGateYesterday.Where(x => x.Fecha.Equals(datos.Value[i].Fecha)).Select(x => x.KgEng2).FirstOrDefault() : 0;
                                                var cityGateTodayGE1 = cityGateToday != null ? cityGateToday.Where(x => x.Fecha.Equals(datos.Value[i].Fecha)).Select(x => x.KgEng1).FirstOrDefault() : 0;
                                                var cityGateTodayGE2 = cityGateToday != null ? cityGateToday.Where(x => x.Fecha.Equals(datos.Value[i].Fecha)).Select(x => x.KgEng2).FirstOrDefault() : 0;


                                                <tr>
                                                    <td>@datos.Value[i].Fecha.Split(' ')[0]</td>
                                                    <td>@double.Parse(datos.Value[i].PmuEng_01.ToString())</td>
                                                    <td>@(Math.Round(datos.Value[i].PmuEng_02, 2).ToString("N2"))</td>
                                                    <td>@(Math.Round(datos.Value[i].PmuEng_01 + datos.Value[i].PmuEng_02, 2).ToString("N2"))</td>
                                                    <td>$ @(Math.Round((datos.Value[i].PmuEng_01 + datos.Value[i].PmuEng_02) * montoCalcular, 2).ToString("N2"))</td>
                                                    <td>@(horasOp1.ToString("N2"))</td>
                                                    <td>@(horasOp2.ToString("N2"))</td>
                                                    <td>@((cityGateTodayGE1 - cityGateYesterdayGE1).ToString("N2"))</td>
                                                    <td>@((cityGateTodayGE2 - cityGateYesterdayGE2).ToString("N2"))</td>
                                                    <td>@(energiaExportada.ToString("N2"))</td>
                                                    <td>@(consumoGasDia.ToString("N2"))</td>
                                                    <td>@(nivelAceiteGe1.ToString("N2"))</td>
                                                    <td>@(nivelAceiteGe2.ToString("N2"))</td>
                                                    <td>@(nivelAceiteGalonGe1.ToString("N2"))</td>
                                                    <td>@(nivelAceiteGalonGe2.ToString("N2"))</td>
                                                </tr>
                                                consumoGasAcumulado = consumoGasAcumulado + consumoGasDia;
                                                nivelAceiteGalonGe1Acumulado = nivelAceiteGalonGe1Acumulado + nivelAceiteGalonGe1;
                                                nivelAceiteGalonGe2Acumulado = nivelAceiteGalonGe2Acumulado + nivelAceiteGalonGe2;

                                                cityGateYesterdayGE1Total = cityGateYesterdayGE1Total + cityGateYesterdayGE1;
                                                cityGateYesterdayGE2Total = cityGateYesterdayGE2Total + cityGateYesterdayGE2;
                                                cityGateTodayGE1Total = cityGateTodayGE1Total + cityGateTodayGE1;
                                                cityGateTodayGE2Total = cityGateTodayGE2Total + cityGateTodayGE2;

                                                var datoIonDia = datosION.Where(x => x.Fecha.Equals(datos.Value[i].Fecha)).Select(x => x).FirstOrDefault();
                                                if (datoIonDia != null)
                                                {
                                                    listaIonMes.Add(datoIonDia);
                                                }
                                                if (consumoGasDia != null)
                                                {
                                                    listaGasMes.Add(consumoGasDia);
                                                }
                                            }
                                            @{
                                                decimal totalPmuEng_01 = datos.Value.Sum(item => item.PmuEng_01);
                                                decimal totalPmuEng_02 = datos.Value.Sum(item => item.PmuEng_02);
                                                decimal horasOp1Aculadas = datoMes != null ? datoMes[1].Sum(item => item.RunningHours) : 0;
                                                decimal horasOp2Aculadas = datoMes != null ? datoMes[2].Sum(item => item.RunningHours) : 0;
                                                decimal energiaExportadaAcumulado = datosION.Sum(item => item.TotalPlantExportION);

                                                if (!valoresPorMes.ContainsKey(nombreMes))
                                                {
                                                    // Si no existe, agrega un nuevo diccionario interno
                                                    valoresPorMes[nombreMes] = new Dictionary<string, decimal>();

                                                    datosIonMes[nombreMes] = new List<ReporteProducion>();
                                                    datosGasMes[nombreMes] = new List<decimal>();
                                                }

                                                datosIonMes[nombreMes] = listaIonMes;
                                                datosGasMes[nombreMes] = listaGasMes;
                                                //valoresMes.Add(datos.Key, nombreMes);

                                                valoresPorMes[nombreMes]["consumoGasAcumulado"] = consumoGasAcumulado;
                                                valoresPorMes[nombreMes]["nivelAceiteGalonGe1Acumulado"] = nivelAceiteGalonGe1Acumulado;
                                                valoresPorMes[nombreMes]["nivelAceiteGalonGe2Acumulado"] = nivelAceiteGalonGe2Acumulado;
                                                valoresPorMes[nombreMes]["totalPmuEng_01"] = totalPmuEng_01;
                                                valoresPorMes[nombreMes]["totalPmuEng_02"] = totalPmuEng_02;
                                                valoresPorMes[nombreMes]["horasOp1Aculadas"] = horasOp1Aculadas;
                                                valoresPorMes[nombreMes]["horasOp2Aculadas"] = horasOp2Aculadas;
                                                valoresPorMes[nombreMes]["energiaExportadaAcumulado"] = energiaExportadaAcumulado;
                                            }

                                            <tr>
                                                <td></td>
                                                <td>@totalPmuEng_01</td>
                                                <td>@totalPmuEng_02</td>
                                                <td>@(totalPmuEng_01 + totalPmuEng_02)</td>
                                                <td>@((totalPmuEng_01 + totalPmuEng_02) * montoCalcular)</td>
                                                <td>@(horasOp1Aculadas)</td>
                                                <td>@(horasOp2Aculadas)</td>
                                                <td>@(cityGateTodayGE1Total - cityGateYesterdayGE1Total)</td>
                                                <td>@(cityGateTodayGE2Total - cityGateYesterdayGE2Total)</td>
                                                <td>@(energiaExportadaAcumulado)</td>
                                                <td>@(consumoGasAcumulado)</td>
                                                <td></td>
                                                <td></td>
                                                <td>@(nivelAceiteGalonGe1Acumulado)</td>
                                                <td>@(nivelAceiteGalonGe2Acumulado)</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    <hr class="sidebar-divider">
                                }
                            }

                        </div>
                        <div style="display:none;" id="contenedor-data-graficos">
                            <div>

                                @{
                                    var ultimosPorMesCityGate = cityGateToday
                                    .GroupBy(f => new { Mes = DateTime.Parse(f.Fecha).Month, Año = DateTime.Parse(f.Fecha).Year })
                                    .Select(g => new
                                    {
                                        Mes = g.Key.Mes,
                                        Año = g.Key.Año,
                                        PrimerValor = g.OrderBy(f => DateTime.Parse(f.Fecha)).FirstOrDefault(),
                                        UltimoValor = g.OrderByDescending(f => DateTime.Parse(f.Fecha)).FirstOrDefault()
                                    });

                                    var primerosPorMesCityGate = cityGateYesterday
                                    .GroupBy(f => new { Mes = DateTime.Parse(f.Fecha).Month, Año = DateTime.Parse(f.Fecha).Year })
                                    .Select(g => new
                                    {
                                        Mes = g.Key.Mes,
                                        Año = g.Key.Año,
                                        PrimerValor = g.OrderBy(f => DateTime.Parse(f.Fecha)).FirstOrDefault(),
                                        UltimoValor = g.OrderByDescending(f => DateTime.Parse(f.Fecha)).FirstOrDefault()
                                    });


                                    Dictionary<DateTime, CityGateFlow> diccionarioPrimerMes = primerosPorMesCityGate
                                    .ToDictionary(
                                    resultado => new DateTime(resultado.Año, resultado.Mes, DateTime.Parse(resultado.PrimerValor.Fecha).Day),
                                    resultado => resultado.PrimerValor
                                    );

                                    Dictionary<DateTime, CityGateFlow> diccionarioUltimoMes = ultimosPorMesCityGate
                                    .ToDictionary(
                                    resultado => new DateTime(resultado.Año, resultado.Mes, DateTime.Parse(resultado.PrimerValor.Fecha).Day),
                                    resultado => resultado.UltimoValor
                                    );


                                    var ultimosPorMesAceite = datosCarter["TODAY"]
                                    .GroupBy(f => new { Mes = DateTime.Parse(f.Fecha).Month, Año = DateTime.Parse(f.Fecha).Year })
                                    .Select(g => new
                                    {
                                        Mes = g.Key.Mes,
                                        Año = g.Key.Año,
                                        PrimerValor = g.OrderBy(f => DateTime.Parse(f.Fecha)).FirstOrDefault(),
                                        UltimoValor = g.OrderByDescending(f => DateTime.Parse(f.Fecha)).FirstOrDefault()
                                    });

                                    var primerosPorMesAceite = datosCarter["YESTERDAY"]
                                    .GroupBy(f => new { Mes = DateTime.Parse(f.Fecha).Month, Año = DateTime.Parse(f.Fecha).Year })
                                    .Select(g => new
                                    {
                                        Mes = g.Key.Mes,
                                        Año = g.Key.Año,
                                        PrimerValor = g.OrderBy(f => DateTime.Parse(f.Fecha)).FirstOrDefault(),
                                        UltimoValor = g.OrderByDescending(f => DateTime.Parse(f.Fecha)).FirstOrDefault()
                                    });

                                    Dictionary<DateTime, LevelLubeOilCartel> diccionarioPrimerMesAceite = primerosPorMesAceite
                                    .ToDictionary(
                                    resultado => new DateTime(resultado.Año, resultado.Mes, DateTime.Parse(resultado.PrimerValor.Fecha).Day),
                                    resultado => resultado.PrimerValor
                                    );

                                    Dictionary<DateTime, LevelLubeOilCartel> diccionarioUltimoMesAceite = ultimosPorMesAceite
                                    .ToDictionary(
                                    resultado => new DateTime(resultado.Año, resultado.Mes, DateTime.Parse(resultado.PrimerValor.Fecha).Day),
                                    resultado => resultado.UltimoValor
                                    );



                                    var index = 0;
                                    foreach (var datos in valoresMes)
                                    {
                                        int CantidadDiasMes = DateTime.DaysInMonth(datos.Key.Year, datos.Key.Month);

                                        <div style="display:flex;">

                                            <div class="col-xl-8 col-lg-7">
                                                <div class="card shadow mb-4" style="width: 100%;">
                                                    <!-- Card Header - Dropdown -->
                                                    <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                        <h6 class="m-0 font-weight-bold text-primary" id='@($"tituloGrafico{datos.Value}")'>Producción total @textInfo.ToTitleCase(datos.Value.ToString()) en MWh</h6>
                                                    </div>
                                                    <!-- Card Body -->
                                                    <div class="card-body">
                                                        <div class="chart-area">
                                                            <div class="chartjs-size-monitor-shrink">
                                                                <div></div>
                                                            </div>
                                                            <!--  <canvas id="myAreaChart" style="display: block;  height: 230px !important;   width: 1157px;"></canvas>-->
                                                            <div id='@($"myAreaChartProduccion{datos.Value}")'></div>

                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            @if (datos.Value.Equals("enero"))
                                            {
                                                <table id="tabla-gas-detalle" class="table table-bordered">
                                                    @{
                                                        <tbody>
                                                            <tr>
                                                                <th>1cm en carter a litros</th>
                                                                <td><input value="@valorGalones" /></td>
                                                            </tr>
                                                            <tr>
                                                                <th>1 galon en lts</th>
                                                                <td><input value="@galonesLts" /></td>
                                                            </tr>
                                                            <tr>
                                                                <th>1 cil en gls</th>
                                                                <td><input value="@cilGls" /></td>
                                                            </tr>
                                                            <tr>
                                                                <th>GLS en carter</th>
                                                                <td><input value="@Math.Round(glsCarter,2)" /></td>
                                                            </tr>
                                                        </tbody>
                                                    }
                                                </table>
                                            }

                                        </div>
                                        <div>
                                            <div style="display:flex;">
                                                <table class="table table-bordered">
                                                    <tbody>
                                                        <tr class="tituloBody">
                                                            <th>CONSUMO DE GAS</th>
                                                            <th>EG01</th>
                                                            <th>EG02</th>
                                                            <th rowspan="3">
                                                                PLANTA
                                                            </th>
                                                        </tr>
                                                        @if (diccionarioPrimerMes.ContainsKey(datos.Key))
                                                        {
                                                            <tr>
                                                                <th>
                                                                    Inicio de mes @datos.Key.ToString("dd/MM/yyyy") en kg
                                                                </th>
                                                                <td>@diccionarioPrimerMes[datos.Key].KgEng1</td>
                                                                <td>@diccionarioPrimerMes[datos.Key].KgEng2</td>
                                                            </tr>
                                                            <tr>
                                                                <th>Fin de mes @(string.Concat(DateTime.DaysInMonth(datos.Key.Year, datos.Key.Month), datos.Key.ToString("/MM/yyyy"))) (today)</th>
                                                                <td>@diccionarioUltimoMes[datos.Key].KgEng1</td>
                                                                <td>@diccionarioUltimoMes[datos.Key].KgEng2</td>
                                                            </tr>
                                                            <tr>
                                                                <th>Consumo total en kg</th>
                                                                <td>@ConsumoTotalGas(diccionarioUltimoMes[datos.Key].KgEng1,diccionarioPrimerMes[datos.Key].KgEng1)</td>
                                                                <td>@ConsumoTotalGas(diccionarioUltimoMes[datos.Key].KgEng2 ,diccionarioPrimerMes[datos.Key].KgEng2)</td>
                                                                <td>@(ConsumoTotalGas(diccionarioUltimoMes[datos.Key].KgEng1, diccionarioPrimerMes[datos.Key].KgEng1) + ConsumoTotalGas(diccionarioUltimoMes[datos.Key].KgEng2, diccionarioPrimerMes[datos.Key].KgEng2))</td>
                                                            </tr>
                                                        }

                                                    </tbody>

                                                </table>


                                                <table class="table table-bordered">
                                                    <thead>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="tituloBody">
                                                            <th>CONSUMO DE ACEITE</th>
                                                            <th>EG01</th>
                                                            <th>EG02</th>
                                                            <th rowspan="3">
                                                                PLANTA
                                                            </th>
                                                        </tr>
                                                        @if (diccionarioUltimoMesAceite.ContainsKey(datos.Key))
                                                        {
                                                            <tr>
                                                                <th>
                                                                    Inicio de mes @datos.Key.ToString("dd/MM/yyyy") en cm
                                                                </th>
                                                                <td>@diccionarioPrimerMesAceite[datos.Key].Generador1</td>
                                                                <td>@diccionarioPrimerMesAceite[datos.Key].Generador2</td>
                                                            </tr>
                                                            <tr>
                                                                <th>Fin de mes @(string.Concat(CantidadDiasMes, datos.Key.ToString("/MM/yyyy"))) (today)</th>
                                                                <td>@diccionarioUltimoMesAceite[datos.Key].Generador1</td>
                                                                <td>@diccionarioUltimoMesAceite[datos.Key].Generador2</td>
                                                            </tr>
                                                            <tr>
                                                                <th>
                                                                    Diferencia en gr
                                                                </th>
                                                                @{
                                                                    decimal valorAceiteDiferencia1 = GenerateDataCellsAceite("", diccionarioUltimoMesAceite[datos.Key].Generador1, diccionarioPrimerMesAceite[datos.Key].Generador1);
                                                                    decimal valorAceiteDiferencia2 = GenerateDataCellsAceite("", diccionarioUltimoMesAceite[datos.Key].Generador2, diccionarioPrimerMesAceite[datos.Key].Generador2);

                                                                }
                                                                <td>@valorAceiteDiferencia1</td>
                                                                <td>@valorAceiteDiferencia2</td>
                                                                <td>@(valorAceiteDiferencia1 + valorAceiteDiferencia2)</td>
                                                            </tr>
                                                            <tr>
                                                                @{
                                                                    decimal valorAceiteAnadido1 = GenerateDataCellsAceite("añadidos", valoresPorMes[datos.Value]["nivelAceiteGalonGe1Acumulado"], 0);
                                                                    decimal valorAceiteAnadido2 = GenerateDataCellsAceite("añadidos", valoresPorMes[datos.Value]["nivelAceiteGalonGe2Acumulado"], 0);

                                                                }
                                                                <th>
                                                                    Gls añadidos en gr
                                                                </th>

                                                                <td>@valorAceiteAnadido1</td>
                                                                <td>@valorAceiteAnadido2</td>
                                                                <td>@(valorAceiteAnadido1 + valorAceiteAnadido2)</td>
                                                            </tr>
                                                            <tr>
                                                                @{
                                                                    decimal valorAceiteTotal1 = GenerateDataCellsAceite("total", valorAceiteAnadido1, valorAceiteDiferencia1);
                                                                    decimal valorAceiteTotal2 = GenerateDataCellsAceite("total", valorAceiteAnadido2, valorAceiteDiferencia2);
                                                                }
                                                                <th>
                                                                    Total en gr
                                                                </th>
                                                                <td id='@($"UsoTotalAceiteEG1{datos.Value}")'>@valorAceiteTotal1</td>
                                                                <td id='@($"UsoTotalAceiteEG2{datos.Value}")'>@valorAceiteTotal2</td>
                                                                <td id='@($"UsoTotalAceiteEG{datos.Value}")'>@(valorAceiteTotal1 + valorAceiteTotal2)</td>
                                                            </tr>
                                                            <tr>
                                                                @{
                                                                    decimal valorAceiteConsumoTotal1 = GenerateDataCellsAceite("consumo", valorAceiteTotal1, valoresPorMes[datos.Value]["totalPmuEng_01"]);
                                                                    decimal valorAceiteConsumoTotal2 = GenerateDataCellsAceite("consumo", valorAceiteTotal2, valoresPorMes[datos.Value]["totalPmuEng_02"]);

                                                                    decimal valorAceiteConsumoTotal = GenerateDataCellsAceite("consumo", valorAceiteTotal1 + valorAceiteTotal2, valoresPorMes[datos.Value]["totalPmuEng_01"] + valoresPorMes[datos.Value]["totalPmuEng_02"]);

                                                                    valoresPorMes[datos.Value.ToLower()]["valorAceiteConsumoTotal"] = valorAceiteConsumoTotal;
                                                                }
                                                                <th>
                                                                    Consumo total gr/kWh
                                                                </th>
                                                                <td id='@($"consumoTotalAceiteEG1{datos.Value}")'>@valorAceiteConsumoTotal1</td>
                                                                <td id='@($"consumoTotalAceiteEG2{datos.Value}")'>@valorAceiteConsumoTotal2</td>
                                                                <td id='@($"consumoTotalAceiteEG{datos.Value}")'>@valorAceiteConsumoTotal</td>
                                                            </tr>
                                                        }
                                                    </tbody>

                                                </table>
                                            </div>
                                            <div>
                                                <table class="table table-bordered">
                                                    <thead>
                                                        <tr>
                                                            <th rowspan="2">
                                                                HORAS DE OPERACIÓN
                                                            </th>
                                                            <th colspan="2">
                                                                @datos.Value.ToUpper()
                                                            </th>
                                                        </tr>
                                                        <tr>
                                                            <th>EG01</th>
                                                            <th>EG02</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @{
                                                            int horasDias = 24 * CantidadDiasMes;
                                                            <tr>
                                                                <th>Horas total del mes</th>
                                                                <td>@(horasDias)</td>
                                                                <td>@(horasDias)</td>
                                                            </tr>
                                                            <tr>
                                                                <th>Horas no operadas</th>
                                                                <td>@(horasDias - ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "horasOp1Aculadas"))</td>
                                                                <td>@(horasDias - ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "horasOp2Aculadas"))</td>
                                                            </tr>
                                                            <tr>
                                                                <th>Disponibilidad (referencial)</th>
                                                                <td>@Math.Round(ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"horasOp1Aculadas") / horasDias,2)%</td>
                                                                <td>@Math.Round(ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"horasOp2Aculadas") / horasDias,2)%</td>
                                                            </tr>
                                                            <tr>
                                                                <th>Horas de operación</th>
                                                                @HorasParseadas(ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"horasOp1Aculadas"))
                                                                @HorasParseadas(ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"horasOp2Aculadas"))
                                                            </tr>
                                                            <tr>
                                                                <th>Horas fuera de operación</th>
                                                                @HorasParseadas(horasDias - ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"horasOp1Aculadas"))
                                                                @HorasParseadas(horasDias - ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"horasOp2Aculadas"))
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                            <div>
                                                <div style="display:flex;">
                                                    <div class="col-xl-7 col-lg-7">
                                                        <div class="card shadow mb-4" style="width: 100%;">
                                                            <!-- Card Header - Dropdown -->
                                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                                <h6 class="m-0 font-weight-bold text-primary" id='@($"tituloGraficoEnergia{datos.Value}")'>
                                                                    Energía expotada durante el mes de @datos.Value.ToLower() MWh
                                                                </h6>
                                                            </div>
                                                            <!-- Card Body -->
                                                            <div class="card-body">
                                                                <div class="chart-area">
                                                                    <div class="chartjs-size-monitor-shrink">
                                                                        <div></div>
                                                                    </div>
                                                                    <!--  <canvas id="myAreaChart" style="display: block;  height: 230px !important;   width: 1157px;"></canvas>-->
                                                                    <div id='@($"myAreaChartEnergia{datos.Value}")'></div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-xl-5 col-lg-7">
                                                        <div class="card shadow mb-4" style="width: 100%;">
                                                            <!-- Card Header - Dropdown -->
                                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                                <h6 class="m-0 font-weight-bold text-primary" id='@($"tituloGraficoConsumoAceiteGl{datos.Value}")'>Consumo de aceite (gls) @datos.Value.ToLower()</h6>
                                                            </div>
                                                            <!-- Card Body -->
                                                            <div class="card-body">
                                                                <div class="chart-area">
                                                                    <div class="chartjs-size-monitor-shrink">
                                                                        <div></div>
                                                                    </div>
                                                                    <!--  <canvas id="myAreaChart" style="display: block;  height: 230px !important;   width: 1157px;"></canvas>-->
                                                                    <div id='@($"myAreaChartAceitegl{datos.Value}")'></div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div style="display:flex;">
                                                    <div class="col-xl-7 col-lg-7">
                                                        <div class="card shadow mb-4" style="width: 100%;">
                                                            <!-- Card Header - Dropdown -->
                                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                                <h6 class="m-0 font-weight-bold text-primary" id='@($"tituloGraficoConsumoGas{datos.Value}")'>
                                                                    consumo de gas ERM durante el mes de @datos.Value.ToLower() Sm3
                                                                </h6>
                                                            </div>
                                                            <!-- Card Body -->
                                                            <div class="card-body">
                                                                <div class="chart-area">
                                                                    <div class="chartjs-size-monitor-shrink">
                                                                        <div></div>
                                                                    </div>
                                                                    <!--  <canvas id="myAreaChart" style="display: block;  height: 230px !important;   width: 1157px;"></canvas>-->
                                                                    <div id='@($"myAreaChartConsumoGas{datos.Value}")'></div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-xl-5 col-lg-7">
                                                        <div class="card shadow mb-4" style="width: 100%;">
                                                            <!-- Card Header - Dropdown -->
                                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                                <h6 class="m-0 font-weight-bold text-primary" id='@($"tituloGraficoConsumoAceiteGr{datos.Value}")'>
                                                                    Consumo de aceite gr/kWh @datos.Value.ToLower()
                                                                </h6>
                                                            </div>
                                                            <!-- Card Body -->
                                                            <div class="card-body">
                                                                <div class="chart-area">
                                                                    <div class="chartjs-size-monitor-shrink">
                                                                        <div></div>
                                                                    </div>
                                                                    <!--  <canvas id="myAreaChart" style="display: block;  height: 230px !important;   width: 1157px;"></canvas>-->
                                                                    <div id='@($"myAreaChartAceitegr{datos.Value}")'></div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <hr class="sidebar-divider">
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div>
            <div id="contenido-produccion">
                <div style="display: flex;">
                    <div>
                        <div>
                            <div class="contenedor-sin-movimiento">
                                <div>&nbsp;</div>
                                <div class="tituloProduccion">Producción Unidad EG01 (MWh)</div>
                                <div class="tituloProduccion">producción Unidad EG02 (MWh)</div>
                                <div class="tituloProduccion">Producción total Planta (MWh)</div>
                                <div class="tituloProduccion">Producción Neta Planta (MWh-ION)</div>
                                <div class="tituloProduccion">Consumo de Servicios auxiliares Planta (MWh)</div>
                                <div class="tituloProduccion">Consumo de servicios auxiliares EG01 (MWh)</div>
                                <div class="tituloProduccion">Consumo de servicios auxiliares EG02 (MWh)</div>
                                <div class="tituloProduccion">Horas Unidad EG01</div>
                                <div class="tituloProduccion">Horas Equivalentes (hh:mm:ss) EG01</div>
                                <div class="tituloProduccion">Horas Unidad EG02</div>
                                <div class="tituloProduccion">Horas Equivalentes (hh:mm:ss) EG02</div>
                            </div>

                            <div class="contenedor-sin-movimiento" style="padding: 15px 0 0 0;border: none;">
                                <div class="tituloProduccion">Consumo de gas Unidad EG01 (kg)</div>
                                <div class="tituloProduccion">Consumo de gas Unidad EG02 (kg)</div>
                                <div class="tituloProduccion">Consumo de gas total Planta (kg)</div>
                            </div>
                            <div class="contenedor-sin-movimiento" style="padding: 15px 0 0 0;border: none;">
                                <div class="tituloProduccion" style="height:6.2vh;">Consumo de servicios auxiliares (MWh se cuenta el consumo sin generar)</div>
                                <div class="tituloProduccion">Consumo de servicios auxiliares total (MWh)</div>
                            </div>
                        </div>
                    </div>
                    <div id="produccionData" class="contenedor-con-movimiento">

                        @{
                            Dictionary<string, string> valoresYTD = new Dictionary<string, string>();

                            foreach (var datos in valoresMes)
                            {
                                decimal consumoServiciosAuxiliares = datosRamPorMes != null && datosRamPorMes.ContainsKey(datos.Value) ? datosRamPorMes[datos.Value].ConsumoServiciosAuxiliares : 0;
                                decimal totalPmuEng = ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_01") + ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_02");
                                decimal consumoServiciosTotal = (totalPmuEng - ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "energiaExportadaAcumulado")) + consumoServiciosAuxiliares;

                                <div id="@($"contenedor-data-{datos.Value}")">
                                    <div id="@($"tituloMes-{datos.Value}")" class="tituloProduccion">@datos.Value.ToUpper()</div>
                                    <div id='@($"produccionEG1{datos.Value}")'>@ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"totalPmuEng_01")</div>
                                    <div id='@($"produccionEG2{datos.Value}")'>@ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"totalPmuEng_02")</div>
                                    <div id='@($"produccionTotal{datos.Value}")'>@(totalPmuEng)</div>
                                    <div>@ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"energiaExportadaAcumulado")</div>
                                    <div id='@($"serviciosAuxiliares{datos.Value}")'>@(totalPmuEng - ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "energiaExportadaAcumulado"))</div>
                                    <div id='@($"serviciosAuxiliaresEG1{datos.Value}")'>@Math.Round(DivisionPorCero(ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"totalPmuEng_01") , totalPmuEng) * consumoServiciosTotal,2)</div>
                                    <div id='@($"serviciosAuxiliaresEG2{datos.Value}")'>@Math.Round(DivisionPorCero(ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"totalPmuEng_02") , totalPmuEng) * consumoServiciosTotal,2)</div>
                                    <div>@ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"horasOp1Aculadas")</div>
                                    <div>@HorasParseadas(ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"horasOp1Aculadas"))</div>
                                    <div>@ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"horasOp2Aculadas")</div>
                                    <div>@HorasParseadas(ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"horasOp2Aculadas"))</div>
                                    <div style="border: none;">
                                        @{
                                            decimal consumoGasUnidadEG01Act = 0;
                                            decimal consumoGasUnidadEG02Act = 0;

                                            <div style="padding: 15px 0 0 0;border: none;">

                                                @if (diccionarioPrimerMes.ContainsKey(datos.Key))
                                                {
                                                    consumoGasUnidadEG01Act = ConsumoTotalGas(diccionarioUltimoMes[datos.Key].KgEng1, diccionarioPrimerMes[datos.Key].KgEng1);
                                                    consumoGasUnidadEG02Act = ConsumoTotalGas(diccionarioUltimoMes[datos.Key].KgEng2, diccionarioPrimerMes[datos.Key].KgEng2);
                                                }
                                                <div>@consumoGasUnidadEG01Act.ToString("N2")</div>
                                                <div>@consumoGasUnidadEG01Act.ToString("N2")</div>
                                                <div>@((consumoGasUnidadEG01Act + consumoGasUnidadEG01Act).ToString("N2"))</div>
                                            </div>
                                            <div style="padding: 15px 0 0 0;border: none;">

                                                <div style="height:6.2vh;"><input onchange="modificarConsumoRam('@(datos.Value)',this.value)" value="@(consumoServiciosAuxiliares)" reporte-ram="true" class-name="consumoServiciosAuxiliares" fecha-mes="@datos.Value" id='@($"input-Servicio-Auxiliares-{datos.Value}")' style="height:5.8vh;text-align:center;" /></div>

                                                <div id='@($"consumoAuxiliares{datos.Value}")'>@(consumoServiciosTotal)</div>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div id="@($"contenedor-data-copia{datos.Value}")">
                                    <div class="tituloProduccion">YTD</div>
                                    @{
                                        decimal consumoServiciosTotalYTD = 0;

                                        string produccionEG1 = "";
                                        string produccionEG2 = "";
                                        string producciónTotalPlanta = "";
                                        string producciónNetaPlanta = "";
                                        string consumoServiciosAuxiliaresPlanta = "";
                                        string consumoserviciosAuxiliaresEG1 = "";
                                        string consumoserviciosAuxiliaresEG2 = "";
                                        string horasUnidadEG01 = "";
                                        string horasEquivalentesEG01 = "";
                                        string horasUnidadEG02 = "";
                                        string horasEquivalentesEG02 = "";

                                        decimal consumoGasUnidadEG01 = 0;
                                        decimal consumoGasUnidadEG02 = 0;
                                        decimal consumoGasTotalPlanta = 0;

                                        if (datos.Value == "enero")
                                        {
                                            consumoServiciosTotalYTD = consumoServiciosTotal;
                                            produccionEG1 = ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_01").ToString();
                                            produccionEG2 = ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_02").ToString();
                                            producciónTotalPlanta = (ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_01") + ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_02")).ToString();
                                            producciónNetaPlanta = ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "energiaExportadaAcumulado").ToString();
                                            consumoServiciosAuxiliaresPlanta = (totalPmuEng - ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "energiaExportadaAcumulado")).ToString();
                                            consumoserviciosAuxiliaresEG1 = (DivisionPorCero(ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_01"), totalPmuEng) * consumoServiciosTotal).ToString("N2");
                                            consumoserviciosAuxiliaresEG2 = (DivisionPorCero(ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_02"), totalPmuEng) * consumoServiciosTotal).ToString("N2");
                                            horasUnidadEG01 = ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "horasOp1Aculadas").ToString();
                                            horasEquivalentesEG01 = HorasParseadas(ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "horasOp1Aculadas")).ToString();
                                            horasUnidadEG02 = ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "horasOp2Aculadas").ToString();
                                            horasEquivalentesEG02 = HorasParseadas(ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "horasOp2Aculadas"));

                                            consumoGasUnidadEG01 = consumoGasUnidadEG01Act;
                                            consumoGasUnidadEG02 = consumoGasUnidadEG02Act;
                                            consumoGasTotalPlanta = consumoGasUnidadEG01 + consumoGasUnidadEG02;
                                        }
                                        else
                                        {
                                            consumoServiciosTotalYTD = decimal.Parse(valoresYTD["consumoServiciosTotalYTD"]) + consumoServiciosTotal;

                                            produccionEG1 = (decimal.Parse(valoresYTD["produccionEG1"]) + ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_01")).ToString();
                                            produccionEG2 = (decimal.Parse(valoresYTD["produccionEG2"]) + ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_02")).ToString();
                                            producciónTotalPlanta = (decimal.Parse(produccionEG1) + decimal.Parse(produccionEG2)).ToString();
                                            producciónNetaPlanta = (decimal.Parse(valoresYTD["producciónNetaPlanta"]) + ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "energiaExportadaAcumulado")).ToString();
                                            consumoServiciosAuxiliaresPlanta = (decimal.Parse(producciónTotalPlanta) - decimal.Parse(producciónNetaPlanta)).ToString();
                                            consumoserviciosAuxiliaresEG1 = (DivisionPorCero(decimal.Parse(produccionEG1), decimal.Parse(producciónTotalPlanta)) * consumoServiciosTotalYTD).ToString("N2");
                                            consumoserviciosAuxiliaresEG2 = (DivisionPorCero(decimal.Parse(produccionEG2), decimal.Parse(producciónTotalPlanta)) * consumoServiciosTotalYTD).ToString("N2");
                                            horasUnidadEG01 = (decimal.Parse(valoresYTD["horasUnidadEG01"]) + ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "horasOp1Aculadas")).ToString();
                                            horasEquivalentesEG01 = HorasParseadas(decimal.Parse(horasUnidadEG01));
                                            horasUnidadEG02 = (decimal.Parse(valoresYTD["produccionEG1"]) + ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "horasOp2Aculadas")).ToString();
                                            horasEquivalentesEG02 = HorasParseadas(decimal.Parse(horasUnidadEG02));

                                            consumoGasUnidadEG01 = (decimal.Parse(valoresYTD["consumoGasUnidadEG01"]) + consumoGasUnidadEG01Act);
                                            consumoGasUnidadEG02 = (decimal.Parse(valoresYTD["consumoGasUnidadEG02"]) + consumoGasUnidadEG02Act);
                                            consumoGasTotalPlanta = consumoGasUnidadEG01 + consumoGasUnidadEG02;
                                        }
                                    }
                                    <div id='@($"ytd-produccionEG1{datos.Value}")'>@produccionEG1</div>
                                    <div id='@($"ytd-produccionEG2{datos.Value}")'>@produccionEG2</div>
                                    <div id='@($"ytd-produccionTotal{datos.Value}")'>@(producciónTotalPlanta)</div>
                                    <div>@(producciónNetaPlanta)</div>
                                    <div id='@($"serviciosAuxiliares{datos.Value}")'>@(consumoServiciosAuxiliaresPlanta)</div>
                                    <div id='@($"ytd-serviciosAuxiliaresEG1{datos.Value}")'>@(consumoserviciosAuxiliaresEG1)</div>
                                    <div id='@($"ytd-serviciosAuxiliaresEG2{datos.Value}")'>@(consumoserviciosAuxiliaresEG2)</div>
                                    <div>@(horasUnidadEG01)</div>
                                    <div>@(horasEquivalentesEG01)</div>
                                    <div>@(horasUnidadEG02)</div>
                                    <div>@(horasEquivalentesEG02)</div>
                                    <div style="border: none;">
                                        <div style="padding: 15px 0 0 0;border: none;">
                                            <div>@(consumoGasUnidadEG01)</div>
                                            <div>@consumoGasUnidadEG02</div>
                                            <div>@consumoGasTotalPlanta</div>
                                        </div>
                                        <div style="padding: 15px 0 0 0;border: none;">

                                            <div style="height:6.2vh;"><input onchange="modificarConsumoRam('@(datos.Value)',this.value)" value="@(consumoServiciosAuxiliares)" reporte-ram="true" class-name="consumoServiciosAuxiliares" fecha-mes="@datos.Value" id='@($"input-Servicio-Auxiliares-{datos.Value}")' style="height:5.8vh;text-align:center;" /></div>

                                            <div id='@($"ytd-consumoAuxiliares{datos.Value}")'>@(consumoServiciosTotalYTD)</div>
                                        </div>
                                    </div>
                                </div>

                                valoresYTD = new Dictionary<string, string>()
                        {
                        {"consumoServiciosTotalYTD",consumoServiciosTotalYTD.ToString()},
                        {"produccionEG1",produccionEG1},
                        {"produccionEG2",produccionEG2},
                        {"producciónTotalPlanta",producciónTotalPlanta},
                        {"producciónNetaPlanta",producciónNetaPlanta},
                        {"consumoServiciosAuxiliaresPlanta",consumoServiciosAuxiliaresPlanta},
                        {"consumoserviciosAuxiliaresEG1",consumoserviciosAuxiliaresEG1},
                        {"consumoserviciosAuxiliaresEG2",consumoserviciosAuxiliaresEG2},
                        {"horasUnidadEG01",horasUnidadEG01},
                        {"horasEquivalentesEG01",horasEquivalentesEG01},
                        {"horasUnidadEG02",horasUnidadEG02},
                        {"horasEquivalentesEG02",horasEquivalentesEG02},
                        {"consumoGasUnidadEG01",consumoGasUnidadEG01.ToString()},
                        {"consumoGasUnidadEG02",consumoGasUnidadEG02.ToString()},
                        {"consumoGasTotalPlanta",consumoGasTotalPlanta.ToString()}
                        };

                                if (!valoresProduccionPorMes.ContainsKey(datos.Value) && !valoresStringProduccionPorMes.ContainsKey(datos.Value))
                                {
                                    valoresStringProduccionPorMes[datos.Value] = new Dictionary<string, string>();
                                    valoresProduccionPorMes[datos.Value] = new Dictionary<string, decimal>();
                                }

                                valoresStringProduccionPorMes[datos.Value]["consumoServiciosTotalYTD"] = consumoServiciosTotalYTD.ToString();
                                valoresStringProduccionPorMes[datos.Value]["produccionEG1"] = produccionEG1;
                                valoresStringProduccionPorMes[datos.Value]["produccionEG2"] = produccionEG2;
                                valoresStringProduccionPorMes[datos.Value]["producciónTotalPlanta"] = producciónTotalPlanta;
                                valoresStringProduccionPorMes[datos.Value]["producciónNetaPlanta"] = producciónNetaPlanta;
                                valoresStringProduccionPorMes[datos.Value]["consumoServiciosAuxiliaresPlanta"] = consumoServiciosAuxiliaresPlanta;
                                valoresStringProduccionPorMes[datos.Value]["consumoserviciosAuxiliaresEG1"] = consumoserviciosAuxiliaresEG1;
                                valoresStringProduccionPorMes[datos.Value]["consumoserviciosAuxiliaresEG2"] = consumoserviciosAuxiliaresEG2;
                                valoresStringProduccionPorMes[datos.Value]["horasUnidadEG01"] = horasUnidadEG01;
                                valoresStringProduccionPorMes[datos.Value]["horasEquivalentesEG01"] = horasEquivalentesEG01;
                                valoresStringProduccionPorMes[datos.Value]["horasUnidadEG02"] = horasUnidadEG02;
                                valoresStringProduccionPorMes[datos.Value]["horasEquivalentesEG02"] = horasEquivalentesEG02;
                                valoresStringProduccionPorMes[datos.Value]["consumoGasUnidadEG01"] = consumoGasUnidadEG01.ToString();
                                valoresStringProduccionPorMes[datos.Value]["consumoGasUnidadEG02"] = consumoGasUnidadEG02.ToString();
                                valoresStringProduccionPorMes[datos.Value]["consumoGasTotalPlanta"] = consumoGasTotalPlanta.ToString();

                                valoresProduccionPorMes[datos.Value]["serviciosAuxiliaresEG1"] = @Math.Round(DivisionPorCero(ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_01"), totalPmuEng) * consumoServiciosTotal, 2);
                                valoresProduccionPorMes[datos.Value]["serviciosAuxiliaresEG2"] = @Math.Round(DivisionPorCero(ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_02"), totalPmuEng) * consumoServiciosTotal, 2);
                                valoresProduccionPorMes[datos.Value]["HorasEquivalentesEG01"] = ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "horasOp1Aculadas");
                                valoresProduccionPorMes[datos.Value]["HorasEquivalentesEG02"] = ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "horasOp2Aculadas");

                                if (diccionarioUltimoMes.ContainsKey(datos.Key) && diccionarioPrimerMes.ContainsKey(datos.Key))
                                {
                                    valoresProduccionPorMes[datos.Value]["consumoGasEG1"] = ConsumoTotalGas(diccionarioUltimoMes[datos.Key].KgEng1, diccionarioPrimerMes[datos.Key].KgEng1);
                                    valoresProduccionPorMes[datos.Value]["consumoGasEG2"] = ConsumoTotalGas(diccionarioUltimoMes[datos.Key].KgEng2, diccionarioPrimerMes[datos.Key].KgEng2);

                                }
                                else
                                {
                                    valoresProduccionPorMes[datos.Value]["consumoGasEG1"] = 0;
                                    valoresProduccionPorMes[datos.Value]["consumoGasEG2"] = 0;
                                }
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div>
            <div id="contenedor-EG01">
                <div style="display: flex;">
                    <div class="contenedor-sin-movimiento">
                        <div>
                            <div class="tituloProduccion">EG01</div>
                            <div class="tituloProduccion">Inicio del periodo</div>
                            <div class="tituloProduccion">Fin del periodo</div>
                        </div>
                        <div style="padding: 15px 0 0 0;border: none;">
                            <div class="tituloProduccion">Energía activa SSAA(MWh)</div>
                            <div class="tituloProduccion">Producción Total (MWh)</div>
                            <div class="tituloProduccion">Generación Neta (MWh)</div>
                            <div class="tituloProduccion">Consumo de combustible (kg)</div>
                            <div class="tituloProduccion">LHV (kJ/kg)</div>
                            <div class="tituloProduccion">Heat Rate (kJ/kWh)</div>
                        </div>
                        <div style="padding: 15px 0 0 0;border: none;">
                            <div class="tituloProduccion"># Solicitudes de arranque</div>
                            <div class="tituloProduccion"># Arranques exitosos</div>
                            <div class="tituloProduccion"># Arranques fallidos</div>
                            <div class="tituloProduccion">Intentos de arranques totales</div>
                        </div>
                        <div style="padding: 15px 0 0 0;border: none;">
                            <div class="tituloProduccion">Horas del mes</div>
                            <div class="tituloProduccion">Horas despachadas</div>
                            <div class="tituloProduccion">Horas Disponibles</div>
                            <div class="tituloProduccion">Horas Disponibles Equivalentes</div>
                            <div class="tituloProduccion">Horas de Reserva</div>
                            <div class="tituloProduccion">Horas Indisponibles Equivalente</div>
                            <div class="tituloProduccion">Horas Indisponibles</div>
                            <div class="tituloProduccion">Horas de Mantto (Parada) Programado</div>
                            <div class="tituloProduccion">Horas de Mantto (Parada) Fortuito</div>
                            <div class="tituloProduccion">Horas en Stand By</div>
                            <div class="tituloProduccion">Horas por fallas externas</div>
                            <div class="tituloProduccion">Horas de Derateo Equivalente</div>
                            <div class="tituloProduccion">Capacidad Máxima Neta (Potencia Efectiva)</div>
                        </div>
                        <div style="padding: 15px 0 0 0;border: none;">
                            <div class="tituloProduccion">Factor de Disponibilidad</div>
                            <div class="tituloProduccion">Factor de Indisponibilidad</div>
                            <div class="tituloProduccion">Factor de Disponibilidad Equivalente</div>
                            <div class="tituloProduccion">Factor de Indisponibilidad Equivalente</div>
                            <div class="tituloProduccion">Factor de Mantto (Parada) Programado</div>
                            <div class="tituloProduccion">Factor de Mantto (Parada) Fortuito</div>
                            <div class="tituloProduccion">Factor de Derateo</div>
                            <div class="tituloProduccion">Factor de Capacidad de Producción</div>
                            <div class="tituloProduccion">Factor de Carga de SSAA</div>
                            <div class="tituloProduccion">Confiabilidad de Arranques</div>
                            <div class="tituloProduccion">Horas totales</div>
                        </div>
                    </div>
                    <div class="contenedor-con-movimiento">
                        @{
                            foreach (var datos in valoresMes)
                            {
                                <div id="@($"contenedor-EG01-{datos.Value}")">
                                    @{
                                        decimal consumoGasEG1 = ValidarDatoEnDiccionario(valoresProduccionPorMes, datos.Value, "consumoGasEG1");
                                        decimal totalPmuEng01 = ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_01");

                                        decimal heatRate = 0;
                                        if (totalPmuEng01 > 0)
                                        {
                                            heatRate = Math.Round(DivisionPorCero((ValidarcionValorDecimal(valoresProduccionPorMes[datos.Value], "consumoGasEG1") * 48384), (ValidarcionValorDecimal(valoresPorMes[datos.Value], "totalPmuEng_01") * 1000)), 2);
                                        }
                                    }

                                    <div>
                                        <div id="@($"tituloMes-EG01-{datos.Value}")" class="tituloProduccion">@datos.Value.ToUpper()</div>
                                        <div>@datos.Key.ToString("dd/MM/yyyy")</div>
                                        <div>@(string.Concat(DateTime.DaysInMonth(datos.Key.Year, datos.Key.Month), datos.Key.ToString("/MM/yyyy")))</div>
                                    </div>
                                    <div style="padding: 15px 0 0 0;border: none;">
                                        <div>@ValidarDatoEnDiccionario(valoresProduccionPorMes,datos.Value,"serviciosAuxiliaresEG1")</div>
                                        <div>@ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"totalPmuEng_01")</div>
                                        <div>@(ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_01") - ValidarDatoEnDiccionario(valoresProduccionPorMes, datos.Value, "serviciosAuxiliaresEG1"))</div>
                                        <div>@(ValidarDatoEnDiccionario(valoresProduccionPorMes, datos.Value, "consumoGasEG1"))</div>

                                        @{
                                            decimal LHV_kJkg = datosRamPorMes != null && datosRamPorMes.ContainsKey(datos.Value) ? datosRamPorMes[datos.Value].LHV_kJkgGE1 : 48384M;

                                            <div>
                                                <input value="@(LHV_kJkg)" reporte-ram="true" id="LHV_kJkgGE1-@(datos.Value)" class-name="LHV_kJkg" fecha-mes="@datos.Value" style="text-align:center;" />
                                            </div>
                                        }
                                        <div>@heatRate</div>
                                    </div>
                                    @*Hay que traer de datos de produccion : arranques(total de arranques ejecutados) y sincronizaciones (arraques exitosos)*@
                                    <div style="padding: 15px 0 0 0;border: none;">
                                        @{
                                            ArranqueSincronizacion numeroArranqueMes = datosArranque != null && datosArranque.ContainsKey(datos.Value) ? datosArranque[datos.Value][1]["arranque"] : new ArranqueSincronizacion();
                                            ArranqueSincronizacion numeroSincroMes = datosArranque != null && datosArranque.ContainsKey(datos.Value) ? datosArranque[datos.Value][1]["sincronizacion"] : new ArranqueSincronizacion();

                                        }
                                        <div>@(numeroArranqueMes.Mensual)</div>
                                        <div>@(numeroSincroMes.Mensual)</div>
                                        <div>@(numeroArranqueMes.Mensual - numeroSincroMes.Mensual)</div>
                                        <div>@(numeroSincroMes.Mensual + (numeroArranqueMes.Mensual - numeroSincroMes.Mensual))</div>
                                    </div>
                                    <div style="padding: 15px 0 0 0;border: none;">
                                        @{
                                            int CantidadDiasMes = DateTime.DaysInMonth(datos.Key.Year, datos.Key.Month);
                                            int horasDias = 24 * CantidadDiasMes;
                                            decimal horasEquivalentesEG01 = ValidarDatoEnDiccionario(valoresProduccionPorMes, datos.Value, "HorasEquivalentesEG01");

                                            var horasIndisponibleParada = OperacionesHorasParseadas(ValidarTiempoEnDiccionario(valoresListadoEventoGE1, datos.Value, "plannedMaint").ToString(), ValidarTiempoEnDiccionario(valoresListadoEventoGE1, datos.Value, "forcedMaint").ToString(), "suma");

                                            var horasDisponibles = OperacionesHorasParseadas(HorasParseadas(horasDias), ValidarTiempoEnDiccionario(valoresListadoEventoGE1, datos.Value, "plannedMaint").ToString(), "resta");
                                            horasDisponibles = OperacionesHorasParseadas(horasDisponibles, ValidarTiempoEnDiccionario(valoresListadoEventoGE1, datos.Value, "forcedMaint").ToString(), "resta");
                                            horasDisponibles = OperacionesHorasParseadas(horasDisponibles, ValidarTiempoEnDiccionario(valoresListadoEventoGE1, datos.Value, "externalTrips").ToString(), "resta");

                                            var HorasDisponiblesEquivalentes = OperacionesHorasParseadas(HorasParseadas(horasDias), horasIndisponibleParada, "resta");
                                            HorasDisponiblesEquivalentes = OperacionesHorasParseadas(HorasDisponiblesEquivalentes, "00:00:00", "resta");
                                        }


                                        <div>@HorasParseadas(horasDias)</div>
                                        <div>@(HorasParseadas(horasEquivalentesEG01))</div>
                                        <div>@(horasDisponibles)</div>
                                        <div>@HorasDisponiblesEquivalentes</div>
                                        <div>@(OperacionesHorasParseadas(horasDisponibles, HorasParseadas(horasEquivalentesEG01), "resta"))</div>
                                        <div>@OperacionesHorasParseadas(horasIndisponibleParada,"00:00:00","suma")</div>
                                        <div>@(horasIndisponibleParada)</div>
                                        <div>@(ValidarTiempoEnDiccionario(valoresListadoEventoGE1, datos.Value, "plannedMaint"))</div>
                                        <div>@(ValidarTiempoEnDiccionario(valoresListadoEventoGE1, datos.Value, "forcedMaint"))</div>
                                        <div>@(ValidarTiempoEnDiccionario(valoresListadoEventoGE1, datos.Value, "StandBy"))</div>
                                        <div>@(ValidarTiempoEnDiccionario(valoresListadoEventoGE1, datos.Value, "externalTrips"))</div>

                                        @{
                                            string horasDerateoEquivalente = datosRamPorMes != null && datosRamPorMes.ContainsKey(datos.Value) ? datosRamPorMes[datos.Value].HorasDerateoEquivalenteGE1 : "00:00:00";
                                            decimal capacidadMaximaNeta = datosRamPorMes != null && datosRamPorMes.ContainsKey(datos.Value) ? datosRamPorMes[datos.Value].CapacidadMaximaNetaGE1 : 9.341m;

                                            <div>
                                                <input value="@(horasDerateoEquivalente)" reporte-ram="true" id="horasDerateoEquivalenteGE1-@(datos.Value)" class-name="horasDerateoEquivalente" fecha-mes="@datos.Value" style="text-align:center;" />
                                            </div>

                                            <div>
                                                <input value="@(capacidadMaximaNeta)" reporte-ram="true" id="capacidadMaximaNetaGE1-@(datos.Value)" class-name="capacidadMaximaNeta" fecha-mes="@datos.Value" style="text-align:center;" />
                                            </div>
                                        }
                                    </div>
                                    <div style="padding: 15px 0 0 0;border: none;">
                                        @{
                                            decimal FactorCapacidadProducción = DivisionPorCero((decimal)ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_01"), (decimal)(9.341 * 24 * DateTime.DaysInMonth(datos.Key.Year, datos.Key.Month)));

                                            var horasDelMes = HorasParseadas(horasDias);
                                            int totalSegundos = int.Parse(horasDelMes[0].ToString()) * 3600 + int.Parse(horasDelMes[1].ToString()) * 60 + int.Parse(horasDelMes[2].ToString());
                                            decimal FactorCargaSSAA = DivisionPorCero(ValidarDatoEnDiccionario(valoresProduccionPorMes, datos.Value, "serviciosAuxiliaresEG1"), (decimal)(9.341 * totalSegundos));

                                            var HorastotalesG1 = OperacionesHorasParseadas(OperacionesHorasParseadas(HorasParseadas(horasEquivalentesEG01), OperacionesHorasParseadas(horasDisponibles, HorasParseadas(horasEquivalentesEG01), "resta"), "suma"), OperacionesHorasParseadas(horasIndisponibleParada, ValidarTiempoEnDiccionario(valoresListadoEventoGE1, datos.Value, "externalTrips").ToString(), "suma"), "suma");

                                            string ConfiabilidadArranques = "NA";
                                            try
                                            {
                                                ConfiabilidadArranques = (DivisionPorCero(numeroArranqueMes.Mensual, (numeroSincroMes.Mensual + (numeroArranqueMes.Mensual - numeroSincroMes.Mensual)))).ToString("N2");
                                            }
                                            catch (Exception ex)
                                            {

                                            }
                                        }
                                        <div>@((1 - OperacionesHorasPorcentaje(horasDisponibles, HorasParseadas(horasDias))).ToString("P2"))</div>
                                        <div>@((OperacionesHorasPorcentaje(horasDisponibles, HorasParseadas(horasDias))).ToString("P2"))</div>
                                        <div>@((OperacionesHorasPorcentaje(HorasDisponiblesEquivalentes, HorasParseadas(horasDias))).ToString("P2"))</div>
                                        <div>@((OperacionesHorasPorcentaje(OperacionesHorasParseadas(horasIndisponibleParada, "00:00:00", "suma"), HorasParseadas(horasDias))).ToString("P2"))</div>
                                        <div>@((OperacionesHorasPorcentaje(ValidarTiempoEnDiccionario(valoresListadoEventoGE1, datos.Value, "plannedMaint").ToString(), HorasParseadas(horasDias))).ToString("P2"))</div>
                                        <div>@((OperacionesHorasPorcentaje(ValidarTiempoEnDiccionario(valoresListadoEventoGE1, datos.Value, "forcedMaint").ToString(), HorasParseadas(horasDias))).ToString("P2"))</div>
                                        <div>@((OperacionesHorasPorcentaje("00:00:00", HorasParseadas(horasDias))).ToString("P2"))</div>
                                        <div>@(FactorCapacidadProducción.ToString("P2"))</div>
                                        <div>@(FactorCargaSSAA.ToString("P2"))</div>
                                        <div>@ConfiabilidadArranques</div>
                                        <div>@HorastotalesG1</div>
                                    </div>
                                </div>
                                <div id="@($"contenedor-EG01-copia{datos.Value}")">
                                    @{
                                        string ydt_inicioPeriodo = datos.Key.ToString("dd/MM/yyyy");
                                        string ydt_finPeriodo = string.Concat(DateTime.DaysInMonth(datos.Key.Year, datos.Key.Month), datos.Key.ToString("/MM/yyyy"));


                                        string ydt_energíaActivaSSAA = ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes, datos.Value, "consumoserviciosAuxiliaresEG1");
                                        string ydt_producciónTotal = ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_01").ToString();
                                        string ydt_generaciónNeta = (decimal.Parse(ydt_producciónTotal) - decimal.Parse(ydt_energíaActivaSSAA)).ToString("N2");
                                        string ydt_consumoCombustible = ValidarDatoEnDiccionario(valoresProduccionPorMes, datos.Value, "consumoGasEG1").ToString("N2");

                                        string ydt_solicitudesArranque = numeroArranqueMes.Mensual.ToString();
                                        string ydt_arranquesExitosos = numeroSincroMes.Mensual.ToString();
                                        string ydt_arranquesFallidos = (numeroArranqueMes.Mensual - numeroSincroMes.Mensual).ToString();

                                        string ydt_horasMes = HorasParseadas(horasDias);
                                        string ydt_horasDespachadas = HorasParseadas(horasEquivalentesEG01);
                                        string ydt_horasDisponibles = horasDisponibles;
                                        string ydt_horasDisponiblesEquivalentes = HorasDisponiblesEquivalentes;
                                        string ydt_horasReserva = OperacionesHorasParseadas(horasDisponibles, HorasParseadas(horasEquivalentesEG01), "resta");
                                        string ydt_horasIndisponiblesEquivalente = OperacionesHorasParseadas(horasIndisponibleParada, "00:00:00", "suma");
                                        string ydt_horasIndisponibles = horasIndisponibleParada;
                                        string ydt_horasManttoProgramado = ValidarTiempoEnDiccionario(valoresListadoEventoGE1, datos.Value, "plannedMaint").ToString();
                                        string ydt_horasManttoFortuito = ValidarTiempoEnDiccionario(valoresListadoEventoGE1, datos.Value, "forcedMaint").ToString();
                                        string ydt_horasStandBy = ValidarTiempoEnDiccionario(valoresListadoEventoGE1, datos.Value, "StandBy").ToString();
                                        string ydt_horasFallasExternas = ValidarTiempoEnDiccionario(valoresListadoEventoGE1, datos.Value, "externalTrips").ToString();
                                        string ydt_horasDerateoEquivalente = horasDerateoEquivalente;
                                        string ydt_capacidadMáximaNeta = capacidadMaximaNeta.ToString();

                                        string ydt_factorCapacidadProducción = DivisionPorCero(decimal.Parse(ydt_producciónTotal), (decimal.Parse(ydt_capacidadMáximaNeta) * 24 * DateTime.DaysInMonth(datos.Key.Year, datos.Key.Month))).ToString("P2");
                                        string ydt_factorCargaSSAA = DivisionPorCero(decimal.Parse(ydt_energíaActivaSSAA), (decimal.Parse(ydt_capacidadMáximaNeta) * horasDias)).ToString("N2");

                                        string ydt_confiabilidadArranques = "NA";

                                        if (datos.Value != "enero")
                                        {
                                            ydt_producciónTotal = (decimal.Parse(valoresYTD["ydt_producciónTotal"]) + decimal.Parse(ydt_producciónTotal)).ToString("N2");
                                            ydt_generaciónNeta = (decimal.Parse(ydt_producciónTotal) - decimal.Parse(ydt_energíaActivaSSAA)).ToString("N2");
                                            ydt_consumoCombustible = (decimal.Parse(valoresYTD["ydt_consumoCombustible"]) + decimal.Parse(ydt_consumoCombustible)).ToString("N2");

                                            ydt_solicitudesArranque = (decimal.Parse(valoresYTD["ydt_solicitudesArranque"]) + decimal.Parse(ydt_solicitudesArranque)).ToString();
                                            ydt_arranquesExitosos = (decimal.Parse(valoresYTD["ydt_arranquesExitosos"]) + decimal.Parse(ydt_arranquesExitosos)).ToString();
                                            ydt_arranquesFallidos = (decimal.Parse(valoresYTD["ydt_arranquesFallidos"]) + (ydt_arranquesFallidos)).ToString();

                                            ydt_horasMes = OperacionesHorasParseadas(valoresYTD["ydt_horasMes"], ydt_horasMes, "suma");
                                            ydt_horasDespachadas = OperacionesHorasParseadas(valoresYTD["ydt_horasDespachadas"], ydt_horasDespachadas, "suma");
                                            ydt_horasDisponibles = OperacionesHorasParseadas(valoresYTD["ydt_horasDisponibles"], ydt_horasDisponibles, "suma");
                                            ydt_horasDisponiblesEquivalentes = OperacionesHorasParseadas(valoresYTD["ydt_horasDisponiblesEquivalentes"], ydt_horasDisponiblesEquivalentes, "suma");
                                            ydt_horasReserva = OperacionesHorasParseadas(valoresYTD["ydt_horasReserva"], ydt_horasReserva, "suma");
                                            ydt_horasIndisponiblesEquivalente = OperacionesHorasParseadas(valoresYTD["ydt_horasIndisponiblesEquivalente"], ydt_horasIndisponiblesEquivalente, "suma");
                                            ydt_horasIndisponibles = OperacionesHorasParseadas(valoresYTD["ydt_horasIndisponibles"], ydt_horasIndisponibles, "suma");
                                            ydt_horasManttoProgramado = OperacionesHorasParseadas(valoresYTD["ydt_horasManttoProgramado"], ydt_horasManttoProgramado, "suma");
                                            ydt_horasManttoFortuito = OperacionesHorasParseadas(valoresYTD["ydt_horasManttoFortuito"], ydt_horasManttoFortuito, "suma");
                                            ydt_horasStandBy = OperacionesHorasParseadas(valoresYTD["ydt_horasStandBy"], ydt_horasStandBy, "suma");
                                            ydt_horasFallasExternas = OperacionesHorasParseadas(valoresYTD["ydt_horasFallasExternas"], ydt_horasFallasExternas, "suma");
                                            ydt_horasDerateoEquivalente = OperacionesHorasParseadas(valoresYTD["ydt_horasDerateoEquivalente"], ydt_horasDerateoEquivalente, "suma");

                                            /* ydt_factorDisponibilidad = (1 - OperacionesHorasPorcentaje(ydt_horasIndisponibles, ydt_horasMes)).ToString("p2");
                                            ydt_factorIndisponibilidad = OperacionesHorasPorcentaje(ydt_horasIndisponibles, ydt_horasMes).ToString("p2");
                                            ydt_factorDisponibilidadEquivalente = OperacionesHorasPorcentaje(ydt_horasDisponiblesEquivalentes, ydt_horasMes).ToString("p2");
                                            ydt_factorIndisponibilidadEquivalente = OperacionesHorasPorcentaje(ydt_horasIndisponiblesEquivalente, ydt_horasMes).ToString("p2");
                                            ydt_factorManttoProgramado = OperacionesHorasPorcentaje(ydt_horasManttoProgramado, ydt_horasMes).ToString("p2");
                                            ydt_factorManttoFortuito = OperacionesHorasPorcentaje(ydt_horasManttoFortuito, ydt_horasMes).ToString("p2");
                                            ydt_factorDerateo = OperacionesHorasPorcentaje(ydt_horasDerateoEquivalente, ydt_horasMes).ToString("p2");*/
                                            ydt_factorCapacidadProducción = DivisionPorCero(decimal.Parse(ydt_producciónTotal), (decimal.Parse(ydt_capacidadMáximaNeta) * 24 * DateTime.DaysInMonth(datos.Key.Year, datos.Key.Month))).ToString("P2");
                                            ydt_factorCargaSSAA = ydt_factorCargaSSAA = DivisionPorCero(decimal.Parse(ydt_energíaActivaSSAA), (decimal.Parse(ydt_capacidadMáximaNeta) * horasDias)).ToString("N2");

                                        }
                                        string ydt_factorDisponibilidad = (1 - OperacionesHorasPorcentaje(ydt_horasIndisponibles, ydt_horasMes)).ToString("p2");
                                        string ydt_factorIndisponibilidad = OperacionesHorasPorcentaje(ydt_horasIndisponibles, ydt_horasMes).ToString("p2");
                                        string ydt_factorDisponibilidadEquivalente = OperacionesHorasPorcentaje(ydt_horasDisponiblesEquivalentes, ydt_horasMes).ToString("p2");
                                        string ydt_factorIndisponibilidadEquivalente = OperacionesHorasPorcentaje(ydt_horasIndisponiblesEquivalente, ydt_horasMes).ToString("p2");
                                        string ydt_factorManttoProgramado = OperacionesHorasPorcentaje(ydt_horasManttoProgramado, ydt_horasMes).ToString("p2");
                                        string ydt_factorManttoFortuito = OperacionesHorasPorcentaje(ydt_horasManttoFortuito, ydt_horasMes).ToString("p2");
                                        string ydt_factorDerateo = OperacionesHorasPorcentaje(ydt_horasDerateoEquivalente, ydt_horasMes).ToString("p2");

                                        string ydt_heatRate = (DivisionPorCero(decimal.Parse(ydt_consumoCombustible) * 48384, decimal.Parse(ydt_producciónTotal) * 1000)).ToString("N2");
                                        string ydt_intentosArranquesTotales = (decimal.Parse(ydt_arranquesExitosos) + decimal.Parse(ydt_arranquesFallidos)).ToString();

                                        try
                                        {
                                            ydt_confiabilidadArranques = DivisionPorCero(decimal.Parse(ydt_arranquesExitosos), decimal.Parse(ydt_intentosArranquesTotales)).ToString("N2");
                                        }
                                        catch (Exception ex)
                                        {

                                        }
                                        string ydt_horasTotales = OperacionesHorasParseadas(OperacionesHorasParseadas(ydt_horasDespachadas, ydt_horasReserva, "suma"), OperacionesHorasParseadas(ydt_horasIndisponibles, ydt_horasFallasExternas, "suma"), "suma");

                                    }
                                    <div>
                                        <div id="@($"tituloMes-EG01-{datos.Value}")" class="tituloProduccion">YTD</div>
                                        <div>@ydt_inicioPeriodo</div>
                                        <div>@ydt_finPeriodo</div>
                                    </div>
                                    <div style="padding: 15px 0 0 0;border: none;">
                                        <div>@ydt_energíaActivaSSAA</div>
                                        <div>@ydt_producciónTotal</div>
                                        <div>@ydt_generaciónNeta</div>
                                        <div>@ydt_consumoCombustible</div>

                                        <div>
                                            <input value="@(LHV_kJkg)" reporte-ram="true" class-name="LHV_kJkg" fecha-mes="@datos.Value" style="text-align:center;" />
                                        </div>
                                        <div>@ydt_heatRate</div>
                                    </div>
                                    @*Hay que traer de datos de produccion : arranques(total de arranques ejecutados) y sincronizaciones (arraques exitosos)*@
                                    <div style="padding: 15px 0 0 0;border: none;">
                                        <div>@(numeroArranqueMes.Mensual)</div>
                                        <div>@(numeroSincroMes.Mensual)</div>
                                        <div>@(numeroArranqueMes.Mensual - numeroSincroMes.Mensual)</div>
                                        <div>@(numeroSincroMes.Mensual + (numeroArranqueMes.Mensual - numeroSincroMes.Mensual))</div>
                                    </div>
                                    <div style="padding: 15px 0 0 0;border: none;">
                                        <div>@ydt_horasMes</div>
                                        <div>@(HorasParseadas(horasEquivalentesEG01))</div>
                                        <div>@(horasDisponibles)</div>
                                        <div>@ydt_horasDisponiblesEquivalentes</div>
                                        <div>@ydt_horasReserva</div>
                                        <div>@ydt_horasIndisponiblesEquivalente</div>
                                        <div>@ydt_horasIndisponibles</div>
                                        <div>@ydt_horasManttoProgramado</div>
                                        <div>@ydt_horasManttoFortuito</div>
                                        <div>@ydt_horasStandBy</div>
                                        <div>@ydt_horasFallasExternas</div>

                                        <div>
                                            <input value="@(ydt_horasDerateoEquivalente)" reporte-ram="true" class-name="horasDerateoEquivalente" fecha-mes="@datos.Value" style="text-align:center;" disabled />
                                        </div>

                                        <div>
                                            <input value="@(ydt_capacidadMáximaNeta)" reporte-ram="true" class-name="capacidadMaximaNeta" fecha-mes="@datos.Value" style="text-align:center;" />
                                        </div>
                                    </div>
                                    <div style="padding: 15px 0 0 0;border: none;">
                                        <div>@ydt_factorDisponibilidad</div>
                                        <div>@ydt_factorIndisponibilidad</div>
                                        <div>@ydt_factorDisponibilidadEquivalente</div>
                                        <div>@ydt_factorIndisponibilidadEquivalente</div>
                                        <div>@ydt_factorManttoProgramado</div>
                                        <div>@ydt_factorManttoFortuito</div>
                                        <div>@ydt_factorDerateo</div>
                                        <div>@ydt_factorCapacidadProducción</div>
                                        <div>@ydt_factorCargaSSAA</div>
                                        <div>@ydt_confiabilidadArranques</div>
                                        <div>@ydt_horasTotales</div>
                                    </div>
                                </div>


                                valoresYTD = new Dictionary<string, string>()
                        {
                        {"ydt_producciónTotal",ydt_producciónTotal},
                        {"ydt_generaciónNeta",ydt_generaciónNeta},
                        {"ydt_consumoCombustible",ydt_consumoCombustible},
                        {"ydt_solicitudesArranque",ydt_solicitudesArranque},
                        {"ydt_arranquesExitosos",ydt_arranquesExitosos},
                        {"ydt_arranquesFallidos",ydt_arranquesFallidos},
                        {"ydt_intentosArranquesTotales",ydt_intentosArranquesTotales},
                        {"ydt_horasMes",ydt_horasMes},
                        {"ydt_horasDespachadas",ydt_horasDespachadas},
                        {"ydt_horasDisponibles",ydt_horasDisponibles},
                        {"ydt_horasDisponiblesEquivalentes",ydt_horasDisponiblesEquivalentes},
                        {"ydt_horasReserva",ydt_horasReserva},
                        {"ydt_horasIndisponiblesEquivalente",ydt_horasIndisponiblesEquivalente},
                        {"ydt_horasIndisponibles",ydt_horasIndisponibles},
                        {"ydt_horasManttoProgramado",ydt_horasManttoProgramado},
                        {"ydt_horasManttoFortuito",ydt_horasManttoFortuito},
                        {"ydt_horasStandBy",ydt_horasStandBy},
                        {"ydt_horasFallasExternas",ydt_horasFallasExternas},
                        {"ydt_horasDerateoEquivalente",ydt_horasDerateoEquivalente}
                        };


                                if (!valoresListadoGE1.ContainsKey(datos.Value.ToLower()))
                                {
                                    valoresListadoGE1[datos.Value.ToLower()] = new Dictionary<string, string>();
                                }

                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_producciónTotal"] = ydt_producciónTotal;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_generaciónNeta"] = ydt_generaciónNeta;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_consumoCombustible"] = ydt_consumoCombustible;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_heatRate"] = ydt_heatRate;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_solicitudesArranque"] = ydt_solicitudesArranque;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_arranquesExitosos"] = ydt_arranquesExitosos;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_arranquesFallidos"] = ydt_arranquesFallidos;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_intentosArranquesTotales"] = ydt_intentosArranquesTotales;

                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_horasMes"] = ydt_horasMes;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_horasDespachadas"] = ydt_horasDespachadas;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_horasDisponibles"] = ydt_horasDisponibles;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_horasDisponiblesEquivalentes"] = ydt_horasDisponiblesEquivalentes;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_horasReserva"] = ydt_horasReserva;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_horasIndisponiblesEquivalente"] = ydt_horasIndisponiblesEquivalente;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_horasIndisponibles"] = ydt_horasIndisponibles;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_horasManttoProgramado"] = ydt_horasManttoProgramado;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_horasManttoFortuito"] = ydt_horasManttoFortuito;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_horasStandBy"] = ydt_horasStandBy;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_horasFallasExternas"] = ydt_horasFallasExternas;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_horasDerateoEquivalente"] = ydt_horasDerateoEquivalente;

                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_factorDisponibilidad"] = ydt_factorDisponibilidad;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_factorIndisponibilidad"] = ydt_factorIndisponibilidad;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_factorDisponibilidadEquivalente"] = ydt_factorDisponibilidadEquivalente;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_factorIndisponibilidadEquivalente"] = ydt_factorIndisponibilidadEquivalente;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_factorManttoProgramado"] = ydt_factorManttoProgramado;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_factorManttoFortuito"] = ydt_factorManttoFortuito;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_factorDerateo"] = ydt_factorDerateo;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_factorCapacidadProducción"] = ydt_factorCapacidadProducción;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_factorCargaSSAA"] = ydt_factorCargaSSAA;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_confiabilidadArranques"] = ydt_confiabilidadArranques;
                                valoresStringProduccionPorMes[datos.Value]["eg1-ydt_horasTotales"] = ydt_horasTotales;

                                cantidadAgregadoMes = cantidadAgregadoMes + datos.Key.Day;
                                valoresListadoGE1[datos.Value]["cantidadDiasMes"] = cantidadAgregadoMes.ToString();
                                valoresListadoGE1[datos.Value]["capacidadMaximaNeta"] = capacidadMaximaNeta.ToString();
                                valoresListadoGE1[datos.Value]["horasMes"] = HorasParseadas(horasDias);
                                valoresListadoGE1[datos.Value]["factorCapacidadProducción"] = FactorCapacidadProducción.ToString();
                                valoresListadoGE1[datos.Value]["factorDisponibilidadEquivalente"] = (OperacionesHorasPorcentaje(HorasDisponiblesEquivalentes, HorasParseadas(horasDias))).ToString();
                                valoresListadoGE1[datos.Value]["factorDisponibilidad"] = (1 - OperacionesHorasPorcentaje(horasDisponibles, HorasParseadas(horasDias))).ToString();
                                valoresListadoGE1[datos.Value]["heatRate"] = DivisionPorCero((ValidarDatoEnDiccionario(valoresProduccionPorMes, datos.Value, "consumoGasEG1") * 48384), (ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_01") * 1000)).ToString();
                                valoresListadoGE1[datos.Value.ToLower()]["horasIndisponibleParada"] = horasIndisponibleParada;
                                valoresListadoGE1[datos.Value.ToLower()]["horasIndisponibleEquivalentes"] = OperacionesHorasParseadas(horasIndisponibleParada, "00:00:00", "suma");
                                valoresListadoGE1[datos.Value.ToLower()]["horasDisponiblesEquivalentes"] = HorasDisponiblesEquivalentes;
                            }
                        }
                    </div>
                </div>
            </div>


            <div id="contenedor-EG02">
                <div style="display: flex;">
                    <div class="contenedor-sin-movimiento">
                        <div>
                            <div class="tituloProduccion">EG02</div>
                            <div class="tituloProduccion">Inicio del periodo</div>
                            <div class="tituloProduccion">Fin del periodo</div>
                        </div>
                        <div style="padding: 15px 0 0 0;border: none;">
                            <div class="tituloProduccion">Energía activa SSAA(MWh)</div>
                            <div class="tituloProduccion">Producción Total (MWh)</div>
                            <div class="tituloProduccion">Generación Neta (MWh)</div>
                            <div class="tituloProduccion">Consumo de combustible (kg)</div>
                            <div class="tituloProduccion">LHV (kJ/kg)</div>
                            <div class="tituloProduccion">Heat Rate (kJ/kWh)</div>
                        </div>
                        <div style="padding: 15px 0 0 0;border: none;">
                            <div class="tituloProduccion"># Solicitudes de arranque</div>
                            <div class="tituloProduccion"># Arranques exitosos</div>
                            <div class="tituloProduccion"># Arranques fallidos</div>
                            <div class="tituloProduccion">Intentos de arranques totales</div>
                        </div>
                        <div style="padding: 15px 0 0 0;border: none;">
                            <div class="tituloProduccion">Horas del mes</div>
                            <div class="tituloProduccion">Horas despachadas</div>
                            <div class="tituloProduccion">Horas Disponibles</div>
                            <div class="tituloProduccion">Horas Disponibles Equivalentes</div>
                            <div class="tituloProduccion">Horas de Reserva</div>
                            <div class="tituloProduccion">Horas Indisponibles Equivalente</div>
                            <div class="tituloProduccion">Horas Indisponibles</div>
                            <div class="tituloProduccion">Horas de Mantto (Parada) Programado</div>
                            <div class="tituloProduccion">Horas de Mantto (Parada) Fortuito</div>
                            <div class="tituloProduccion">Horas en Stand By</div>
                            <div class="tituloProduccion">Horas por fallas externas</div>
                            <div class="tituloProduccion">Horas de Derateo Equivalente</div>
                            <div class="tituloProduccion">Capacidad Máxima Neta (Potencia Efectiva)</div>
                        </div>
                        <div style="padding: 15px 0 0 0;border: none;">
                            <div class="tituloProduccion">Factor de Disponibilidad</div>
                            <div class="tituloProduccion">Factor de Indisponibilidad</div>
                            <div class="tituloProduccion">Factor de Disponibilidad Equivalente</div>
                            <div class="tituloProduccion">Factor de Indisponibilidad Equivalente</div>
                            <div class="tituloProduccion">Factor de Mantto (Parada) Programado</div>
                            <div class="tituloProduccion">Factor de Mantto (Parada) Fortuito</div>
                            <div class="tituloProduccion">Factor de Derateo</div>
                            <div class="tituloProduccion">Factor de Capacidad de Producción</div>
                            <div class="tituloProduccion">Factor de Carga de SSAA</div>
                            <div class="tituloProduccion">Confiabilidad de Arranques</div>
                            <div class="tituloProduccion">Horas totales</div>
                        </div>
                    </div>
                    <div class="contenedor-con-movimiento">
                        @{
                            cantidadAgregadoMes = 0;

                            foreach (var datos in valoresMes)
                            {
                                <div>
                                    @{
                                        //=SI.ERROR((B8*B9)/(B6*1000);0)
                                        decimal consumoGasEG2 = ValidarcionValorDecimal(valoresProduccionPorMes[datos.Value], "consumoGasEG2");
                                        decimal totalPmuEng02 = ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_02");

                                        decimal heatRate = 0;
                                        if (totalPmuEng02 > 0)
                                        {
                                            heatRate = Math.Round(DivisionPorCero((ValidarDatoEnDiccionario(valoresProduccionPorMes, datos.Value, "consumoGasEG2") * 48384), ((ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_02") * 1000))), 2);
                                        }
                                    }

                                    <div>
                                        <div class="tituloProduccion">@datos.Value.ToUpper()</div>
                                        <div>@datos.Key.ToString("dd/MM/yyyy")</div>
                                        <div>@(string.Concat(DateTime.DaysInMonth(datos.Key.Year, datos.Key.Month), datos.Key.ToString("/MM/yyyy")))</div>
                                    </div>
                                    <div style="padding: 15px 0 0 0;border: none;">
                                        <div>@valoresProduccionPorMes[datos.Value]["serviciosAuxiliaresEG2"]</div>
                                        <div>@ValidarDatoEnDiccionario(valoresPorMes,datos.Value,"totalPmuEng_02")</div>
                                        <div>@(ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_02") - ValidarDatoEnDiccionario(valoresProduccionPorMes, datos.Value, "serviciosAuxiliaresEG2"))</div>
                                        <div>@ValidarDatoEnDiccionario(valoresProduccionPorMes,datos.Value,"consumoGasEG2")</div>

                                        @{
                                            decimal LHV_kJkg = datosRamPorMes != null && datosRamPorMes.ContainsKey(datos.Value) ? datosRamPorMes[datos.Value].LHV_kJkgGE2 : 48384M;

                                            <div>
                                                <input value="@(LHV_kJkg)" reporte-ram="true" class-name="LHV_kJkg" id="LHV_kJkgGE2-@(datos.Value)" fecha-mes="@datos.Value" style="text-align:center;" />
                                            </div>
                                        }
                                        <div>@heatRate</div>
                                    </div>
                                    @*Hay que traer de datos de produccion : arranques(total de arranques ejecutados) y sincronizaciones (arraques exitosos)*@
                                    <div style="padding: 15px 0 0 0;border: none;">
                                        @{
                                            ArranqueSincronizacion numeroArranqueMes = datosArranque != null && datosArranque.ContainsKey(datos.Value) ? datosArranque[datos.Value][2]["arranque"] : new ArranqueSincronizacion();
                                            ArranqueSincronizacion numeroSincroMes = datosArranque != null && datosArranque.ContainsKey(datos.Value) ? datosArranque[datos.Value][2]["sincronizacion"] : new ArranqueSincronizacion();

                                        }
                                        <div>@(numeroArranqueMes.Mensual)</div>
                                        <div>@(numeroSincroMes.Mensual)</div>
                                        <div>@(numeroArranqueMes.Mensual - numeroSincroMes.Mensual)</div>
                                        <div>@(numeroSincroMes.Mensual + (numeroArranqueMes.Mensual - numeroSincroMes.Mensual))</div>
                                    </div>
                                    <div style="padding: 15px 0 0 0;border: none;">
                                        @{
                                            int CantidadDiasMes = DateTime.DaysInMonth(datos.Key.Year, datos.Key.Month);
                                            int horasDias = 24 * CantidadDiasMes;
                                            decimal horasEquivalentesEG02 = ValidarDatoEnDiccionario(valoresProduccionPorMes, datos.Value, "HorasEquivalentesEG02");

                                            var horasIndisponibleParada = OperacionesHorasParseadas(ValidarTiempoEnDiccionario(valoresListadoEventoGE2, datos.Value, "plannedMaint").ToString(), ValidarTiempoEnDiccionario(valoresListadoEventoGE2, datos.Value, "forcedMaint").ToString(), "suma");

                                            var horasDisponibles = OperacionesHorasParseadas(HorasParseadas(horasDias), ValidarTiempoEnDiccionario(valoresListadoEventoGE2, datos.Value, "plannedMaint").ToString(), "resta");
                                            horasDisponibles = OperacionesHorasParseadas(horasDisponibles, ValidarTiempoEnDiccionario(valoresListadoEventoGE2, datos.Value, "forcedMaint").ToString(), "resta");
                                            horasDisponibles = OperacionesHorasParseadas(horasDisponibles, ValidarTiempoEnDiccionario(valoresListadoEventoGE2, datos.Value, "externalTrips").ToString(), "resta");

                                            var HorasDisponiblesEquivalentes = OperacionesHorasParseadas(HorasParseadas(horasDias), horasIndisponibleParada, "resta");
                                            HorasDisponiblesEquivalentes = OperacionesHorasParseadas(HorasDisponiblesEquivalentes, "00:00:00", "resta");

                                        }

                                        <div>@HorasParseadas(horasDias)</div>
                                        <div>@(HorasParseadas(horasEquivalentesEG02))</div>
                                        <div>@(horasDisponibles)</div>
                                        <div>@HorasDisponiblesEquivalentes</div>
                                        <div>@(OperacionesHorasParseadas(horasDisponibles, HorasParseadas(horasEquivalentesEG02), "resta"))</div>
                                        <div>@OperacionesHorasParseadas(horasIndisponibleParada,"00:00:00","suma")</div>
                                        <div>@(horasIndisponibleParada)</div>
                                        <div>@(ValidarTiempoEnDiccionario(valoresListadoEventoGE2, datos.Value, "plannedMaint"))</div>
                                        <div>@(ValidarTiempoEnDiccionario(valoresListadoEventoGE2, datos.Value, "forcedMaint"))</div>
                                        <div>@(ValidarTiempoEnDiccionario(valoresListadoEventoGE2, datos.Value, "StandBy"))</div>
                                        <div>@(ValidarTiempoEnDiccionario(valoresListadoEventoGE2, datos.Value, "externalTrips"))</div>

                                        @{
                                            string horasDerateoEquivalente = datosRamPorMes != null && datosRamPorMes.ContainsKey(datos.Value) ? datosRamPorMes[datos.Value].HorasDerateoEquivalenteGE2 : "00:00:00";
                                            decimal capacidadMaximaNeta = datosRamPorMes != null && datosRamPorMes.ContainsKey(datos.Value) ? datosRamPorMes[datos.Value].CapacidadMaximaNetaGE2 : 9.341m;

                                            <div>
                                                <input value="@(horasDerateoEquivalente)" reporte-ram="true" id="horasDerateoEquivalenteGE2-@(datos.Value)" class-name="horasDerateoEquivalente" fecha-mes="@datos.Value" style="text-align:center;" />
                                            </div>

                                            <div>
                                                <input value="@(capacidadMaximaNeta)" reporte-ram="true" id="capacidadMaximaNetaGE2-@(datos.Value)" class-name="capacidadMaximaNeta" fecha-mes="@datos.Value" style="text-align:center;" />
                                            </div>
                                        }
                                    </div>
                                    <div style="padding: 15px 0 0 0;border: none;">
                                        @{
                                            decimal FactorCapacidadProducción = (decimal)ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_02") / (decimal)(9.341 * 24 * DateTime.DaysInMonth(datos.Key.Year, datos.Key.Month));

                                            var horasDelMes = HorasParseadas(horasDias);
                                            int totalSegundos = int.Parse(horasDelMes[0].ToString()) * 3600 + int.Parse(horasDelMes[1].ToString()) * 60 + int.Parse(horasDelMes[2].ToString());
                                            decimal FactorCargaSSAA = ValidarDatoEnDiccionario(valoresProduccionPorMes, datos.Value, "serviciosAuxiliaresEG2") / (decimal)(9.341 * totalSegundos);

                                            var HorastotalesG2 = OperacionesHorasParseadas(OperacionesHorasParseadas(HorasParseadas(horasEquivalentesEG02), OperacionesHorasParseadas(horasDisponibles, HorasParseadas(horasEquivalentesEG02), "resta"), "suma"), OperacionesHorasParseadas(horasIndisponibleParada, ValidarTiempoEnDiccionario(valoresListadoEventoGE2, datos.Value, "externalTrips").ToString(), "suma"), "suma");

                                            string ConfiabilidadArranques = "NA";
                                            try
                                            {
                                                ConfiabilidadArranques = (numeroArranqueMes.Mensual / numeroSincroMes.Mensual + (numeroArranqueMes.Mensual - numeroSincroMes.Mensual)).ToString("N2");
                                            }
                                            catch (Exception ex)
                                            {

                                            }
                                        }
                                        <div>@((1 - OperacionesHorasPorcentaje(horasDisponibles, HorasParseadas(horasDias))).ToString("P2"))</div>
                                        <div>@((OperacionesHorasPorcentaje(horasDisponibles, HorasParseadas(horasDias))).ToString("P2"))</div>
                                        <div>@((OperacionesHorasPorcentaje(HorasDisponiblesEquivalentes, HorasParseadas(horasDias))).ToString("P2"))</div>
                                        <div>@((OperacionesHorasPorcentaje(OperacionesHorasParseadas(horasIndisponibleParada, "00:00:00", "suma"), HorasParseadas(horasDias))).ToString("P2"))</div>
                                        <div>@((OperacionesHorasPorcentaje(ValidarTiempoEnDiccionario(valoresListadoEventoGE2, datos.Value, "plannedMaint").ToString(), HorasParseadas(horasDias))).ToString("P2"))</div>
                                        <div>@((OperacionesHorasPorcentaje(ValidarTiempoEnDiccionario(valoresListadoEventoGE2, datos.Value, "forcedMaint").ToString(), HorasParseadas(horasDias))).ToString("P2"))</div>
                                        <div>@((OperacionesHorasPorcentaje("00:00:00", HorasParseadas(horasDias))).ToString("P2"))</div>
                                        <div>@(FactorCapacidadProducción.ToString("P2"))</div>
                                        <div>@(FactorCargaSSAA.ToString("P2"))</div>
                                        <div>@ConfiabilidadArranques</div>
                                        <div>@HorastotalesG2</div>
                                    </div>
                                </div>
                                <div id="@($"contenedor-EG02-copia{datos.Value}")">
                                    @{
                                        string ydt_inicioPeriodo = datos.Key.ToString("dd/MM/yyyy");
                                        string ydt_finPeriodo = string.Concat(DateTime.DaysInMonth(datos.Key.Year, datos.Key.Month), datos.Key.ToString("/MM/yyyy"));

                                        string ydt_energíaActivaSSAA = ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes, datos.Value, "consumoserviciosAuxiliaresEG2");
                                        string ydt_producciónTotal = ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_02").ToString();
                                        string ydt_generaciónNeta = (decimal.Parse(ydt_producciónTotal) - decimal.Parse(ydt_energíaActivaSSAA)).ToString("N2");
                                        string ydt_consumoCombustible = ValidarDatoEnDiccionario(valoresProduccionPorMes, datos.Value, "consumoGasEG2").ToString("N2");

                                        string ydt_solicitudesArranque = numeroArranqueMes.Mensual.ToString();
                                        string ydt_arranquesExitosos = numeroSincroMes.Mensual.ToString();
                                        string ydt_arranquesFallidos = (numeroArranqueMes.Mensual - numeroSincroMes.Mensual).ToString();

                                        string ydt_horasMes = HorasParseadas(horasDias);
                                        string ydt_horasDespachadas = HorasParseadas(horasEquivalentesEG02);
                                        string ydt_horasDisponibles = horasDisponibles;
                                        string ydt_horasDisponiblesEquivalentes = HorasDisponiblesEquivalentes;
                                        string ydt_horasReserva = OperacionesHorasParseadas(horasDisponibles, HorasParseadas(horasEquivalentesEG02), "resta");
                                        string ydt_horasIndisponiblesEquivalente = OperacionesHorasParseadas(horasIndisponibleParada, "00:00:00", "suma");
                                        string ydt_horasIndisponibles = horasIndisponibleParada;
                                        string ydt_horasManttoProgramado = ValidarTiempoEnDiccionario(valoresListadoEventoGE2, datos.Value, "plannedMaint").ToString();
                                        string ydt_horasManttoFortuito = ValidarTiempoEnDiccionario(valoresListadoEventoGE2, datos.Value, "forcedMaint").ToString();
                                        string ydt_horasStandBy = ValidarTiempoEnDiccionario(valoresListadoEventoGE2, datos.Value, "StandBy").ToString();
                                        string ydt_horasFallasExternas = ValidarTiempoEnDiccionario(valoresListadoEventoGE2, datos.Value, "externalTrips").ToString();
                                        string ydt_horasDerateoEquivalente = horasDerateoEquivalente;
                                        string ydt_capacidadMáximaNeta = capacidadMaximaNeta.ToString();

                                        string ydt_factorCapacidadProducción = DivisionPorCero(decimal.Parse(ydt_producciónTotal), (decimal.Parse(ydt_capacidadMáximaNeta) * 24 * DateTime.DaysInMonth(datos.Key.Year, datos.Key.Month))).ToString("P2");
                                        string ydt_factorCargaSSAA = DivisionPorCero(decimal.Parse(ydt_energíaActivaSSAA), (decimal.Parse(ydt_capacidadMáximaNeta) * horasDias)).ToString("N2");

                                        string ydt_confiabilidadArranques = "NA";

                                        if (datos.Value != "enero")
                                        {
                                            ydt_producciónTotal = (decimal.Parse(valoresYTD["ydt_producciónTotal"]) + decimal.Parse(ydt_producciónTotal)).ToString("N2");
                                            ydt_generaciónNeta = (decimal.Parse(ydt_producciónTotal) - decimal.Parse(ydt_energíaActivaSSAA)).ToString("N2");
                                            ydt_consumoCombustible = (decimal.Parse(valoresYTD["ydt_consumoCombustible"]) + decimal.Parse(ydt_consumoCombustible)).ToString("N2");

                                            ydt_solicitudesArranque = (decimal.Parse(valoresYTD["ydt_solicitudesArranque"]) + decimal.Parse(ydt_solicitudesArranque)).ToString();
                                            ydt_arranquesExitosos = (decimal.Parse(valoresYTD["ydt_arranquesExitosos"]) + decimal.Parse(ydt_arranquesExitosos)).ToString();
                                            ydt_arranquesFallidos = (decimal.Parse(valoresYTD["ydt_arranquesFallidos"]) + (ydt_arranquesFallidos)).ToString();

                                            ydt_horasMes = OperacionesHorasParseadas(valoresYTD["ydt_horasMes"], ydt_horasMes, "suma");
                                            ydt_horasDespachadas = OperacionesHorasParseadas(valoresYTD["ydt_horasDespachadas"], ydt_horasDespachadas, "suma");
                                            ydt_horasDisponibles = OperacionesHorasParseadas(valoresYTD["ydt_horasDisponibles"], ydt_horasDisponibles, "suma");
                                            ydt_horasDisponiblesEquivalentes = OperacionesHorasParseadas(valoresYTD["ydt_horasDisponiblesEquivalentes"], ydt_horasDisponiblesEquivalentes, "suma");
                                            ydt_horasReserva = OperacionesHorasParseadas(valoresYTD["ydt_horasReserva"], ydt_horasReserva, "suma");
                                            ydt_horasIndisponiblesEquivalente = OperacionesHorasParseadas(valoresYTD["ydt_horasIndisponiblesEquivalente"], ydt_horasIndisponiblesEquivalente, "suma");
                                            ydt_horasIndisponibles = OperacionesHorasParseadas(valoresYTD["ydt_horasIndisponibles"], ydt_horasIndisponibles, "suma");
                                            ydt_horasManttoProgramado = OperacionesHorasParseadas(valoresYTD["ydt_horasManttoProgramado"], ydt_horasManttoProgramado, "suma");
                                            ydt_horasManttoFortuito = OperacionesHorasParseadas(valoresYTD["ydt_horasManttoFortuito"], ydt_horasManttoFortuito, "suma");
                                            ydt_horasStandBy = OperacionesHorasParseadas(valoresYTD["ydt_horasStandBy"], ydt_horasStandBy, "suma");
                                            ydt_horasFallasExternas = OperacionesHorasParseadas(valoresYTD["ydt_horasFallasExternas"], ydt_horasFallasExternas, "suma");
                                            ydt_horasDerateoEquivalente = OperacionesHorasParseadas(valoresYTD["ydt_horasDerateoEquivalente"], ydt_horasDerateoEquivalente, "suma");

                                            ydt_factorCapacidadProducción = DivisionPorCero(decimal.Parse(ydt_producciónTotal), (decimal.Parse(ydt_capacidadMáximaNeta) * 24 * DateTime.DaysInMonth(datos.Key.Year, datos.Key.Month))).ToString("P2");
                                            ydt_factorCargaSSAA = ydt_factorCargaSSAA = DivisionPorCero(decimal.Parse(ydt_energíaActivaSSAA), (decimal.Parse(ydt_capacidadMáximaNeta) * horasDias)).ToString("N2");

                                        }
                                        string ydt_factorDisponibilidad = (1 - OperacionesHorasPorcentaje(ydt_horasIndisponibles, ydt_horasMes)).ToString("p2");
                                        string ydt_factorIndisponibilidad = OperacionesHorasPorcentaje(ydt_horasIndisponibles, ydt_horasMes).ToString("p2");
                                        string ydt_factorDisponibilidadEquivalente = OperacionesHorasPorcentaje(ydt_horasDisponiblesEquivalentes, ydt_horasMes).ToString("p2");
                                        string ydt_factorIndisponibilidadEquivalente = OperacionesHorasPorcentaje(ydt_horasIndisponiblesEquivalente, ydt_horasMes).ToString("p2");
                                        string ydt_factorManttoProgramado = OperacionesHorasPorcentaje(ydt_horasManttoProgramado, ydt_horasMes).ToString("p2");
                                        string ydt_factorManttoFortuito = OperacionesHorasPorcentaje(ydt_horasManttoFortuito, ydt_horasMes).ToString("p2");
                                        string ydt_factorDerateo = OperacionesHorasPorcentaje(ydt_horasDerateoEquivalente, ydt_horasMes).ToString("p2");

                                        string ydt_heatRate = (DivisionPorCero(decimal.Parse(ydt_consumoCombustible) * 48384, decimal.Parse(ydt_producciónTotal) * 1000)).ToString("N2");
                                        string ydt_intentosArranquesTotales = (decimal.Parse(ydt_arranquesExitosos) + decimal.Parse(ydt_arranquesFallidos)).ToString();

                                        try
                                        {
                                            ydt_confiabilidadArranques = DivisionPorCero(decimal.Parse(ydt_arranquesExitosos), decimal.Parse(ydt_intentosArranquesTotales)).ToString("N2");
                                        }
                                        catch (Exception ex)
                                        {

                                        }
                                        string ydt_horasTotales = OperacionesHorasParseadas(OperacionesHorasParseadas(ydt_horasDespachadas, ydt_horasReserva, "suma"), OperacionesHorasParseadas(ydt_horasIndisponibles, ydt_horasFallasExternas, "suma"), "suma");

                                    }
                                    <div>
                                        <div id="@($"tituloMes-EG02-{datos.Value}")" class="tituloProduccion">YTD</div>
                                        <div>@ydt_inicioPeriodo</div>
                                        <div>@ydt_finPeriodo</div>
                                    </div>
                                    <div style="padding: 15px 0 0 0;border: none;">
                                        <div>@ydt_energíaActivaSSAA</div>
                                        <div>@ydt_producciónTotal</div>
                                        <div>@ydt_generaciónNeta</div>
                                        <div>@ydt_consumoCombustible</div>

                                        <div>
                                            <input value="@(LHV_kJkg)" reporte-ram="true" class-name="LHV_kJkg" fecha-mes="@datos.Value" style="text-align:center;" />
                                        </div>
                                        <div>@ydt_heatRate</div>
                                    </div>
                                    @*Hay que traer de datos de produccion : arranques(total de arranques ejecutados) y sincronizaciones (arraques exitosos)*@
                                    <div style="padding: 15px 0 0 0;border: none;">
                                        <div>@(numeroArranqueMes.Mensual)</div>
                                        <div>@(numeroSincroMes.Mensual)</div>
                                        <div>@(numeroArranqueMes.Mensual - numeroSincroMes.Mensual)</div>
                                        <div>@(numeroSincroMes.Mensual + (numeroArranqueMes.Mensual - numeroSincroMes.Mensual))</div>
                                    </div>
                                    <div style="padding: 15px 0 0 0;border: none;">
                                        <div>@ydt_horasMes</div>
                                        <div>@(HorasParseadas(horasEquivalentesEG02))</div>
                                        <div>@(horasDisponibles)</div>
                                        <div>@ydt_horasDisponiblesEquivalentes</div>
                                        <div>@ydt_horasReserva</div>
                                        <div>@ydt_horasIndisponiblesEquivalente</div>
                                        <div>@ydt_horasIndisponibles</div>
                                        <div>@ydt_horasManttoProgramado</div>
                                        <div>@ydt_horasManttoFortuito</div>
                                        <div>@ydt_horasStandBy</div>
                                        <div>@ydt_horasFallasExternas</div>

                                        <div>
                                            <input value="@(ydt_horasDerateoEquivalente)" reporte-ram="true" class-name="horasDerateoEquivalente" fecha-mes="@datos.Value" style="text-align:center;" disabled />
                                        </div>

                                        <div>
                                            <input value="@(ydt_capacidadMáximaNeta)" reporte-ram="true" class-name="capacidadMaximaNeta" fecha-mes="@datos.Value" style="text-align:center;" />
                                        </div>
                                    </div>
                                    <div style="padding: 15px 0 0 0;border: none;">
                                        <div>@ydt_factorDisponibilidad</div>
                                        <div>@ydt_factorIndisponibilidad</div>
                                        <div>@ydt_factorDisponibilidadEquivalente</div>
                                        <div>@ydt_factorIndisponibilidadEquivalente</div>
                                        <div>@ydt_factorManttoProgramado</div>
                                        <div>@ydt_factorManttoFortuito</div>
                                        <div>@ydt_factorDerateo</div>
                                        <div>@ydt_factorCapacidadProducción</div>
                                        <div>@ydt_factorCargaSSAA</div>
                                        <div>@ydt_confiabilidadArranques</div>
                                        <div>@ydt_horasTotales</div>
                                    </div>
                                </div>

                                valoresYTD = new Dictionary<string, string>()
                        {
                        {"ydt_producciónTotal",ydt_producciónTotal},
                        {"ydt_generaciónNeta",ydt_generaciónNeta},
                        {"ydt_consumoCombustible",ydt_consumoCombustible},
                        {"ydt_solicitudesArranque",ydt_solicitudesArranque},
                        {"ydt_arranquesExitosos",ydt_arranquesExitosos},
                        {"ydt_arranquesFallidos",ydt_arranquesFallidos},
                        {"ydt_intentosArranquesTotales",ydt_intentosArranquesTotales},
                        {"ydt_horasMes",ydt_horasMes},
                        {"ydt_horasDespachadas",ydt_horasDespachadas},
                        {"ydt_horasDisponibles",ydt_horasDisponibles},
                        {"ydt_horasDisponiblesEquivalentes",ydt_horasDisponiblesEquivalentes},
                        {"ydt_horasReserva",ydt_horasReserva},
                        {"ydt_horasIndisponiblesEquivalente",ydt_horasIndisponiblesEquivalente},
                        {"ydt_horasIndisponibles",ydt_horasIndisponibles},
                        {"ydt_horasManttoProgramado",ydt_horasManttoProgramado},
                        {"ydt_horasManttoFortuito",ydt_horasManttoFortuito},
                        {"ydt_horasStandBy",ydt_horasStandBy},
                        {"ydt_horasFallasExternas",ydt_horasFallasExternas},
                        {"ydt_horasDerateoEquivalente",ydt_horasDerateoEquivalente}
                        };


                                if (!valoresListadoGE2.ContainsKey(datos.Value.ToLower()))
                                {
                                    valoresListadoGE2[datos.Value.ToLower()] = new Dictionary<string, string>();
                                }


                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_producciónTotal"] = ydt_producciónTotal;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_generaciónNeta"] = ydt_generaciónNeta;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_consumoCombustible"] = ydt_consumoCombustible;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_solicitudesArranque"] = ydt_solicitudesArranque;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_heatRate"] = ydt_heatRate;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_arranquesExitosos"] = ydt_arranquesExitosos;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_arranquesFallidos"] = ydt_arranquesFallidos;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_intentosArranquesTotales"] = ydt_intentosArranquesTotales;

                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_horasMes"] = ydt_horasMes;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_horasDespachadas"] = ydt_horasDespachadas;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_horasDisponibles"] = ydt_horasDisponibles;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_horasDisponiblesEquivalentes"] = ydt_horasDisponiblesEquivalentes;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_horasReserva"] = ydt_horasReserva;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_horasIndisponiblesEquivalente"] = ydt_horasIndisponiblesEquivalente;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_horasIndisponibles"] = ydt_horasIndisponibles;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_horasManttoProgramado"] = ydt_horasManttoProgramado;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_horasManttoFortuito"] = ydt_horasManttoFortuito;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_horasStandBy"] = ydt_horasStandBy;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_horasFallasExternas"] = ydt_horasFallasExternas;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_horasDerateoEquivalente"] = ydt_horasDerateoEquivalente;

                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_factorDisponibilidad"] = ydt_factorDisponibilidad;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_factorIndisponibilidad"] = ydt_factorIndisponibilidad;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_factorDisponibilidadEquivalente"] = ydt_factorDisponibilidadEquivalente;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_factorIndisponibilidadEquivalente"] = ydt_factorIndisponibilidadEquivalente;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_factorManttoProgramado"] = ydt_factorManttoProgramado;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_factorManttoFortuito"] = ydt_factorManttoFortuito;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_factorDerateo"] = ydt_factorDerateo;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_factorCapacidadProducción"] = ydt_factorCapacidadProducción;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_factorCargaSSAA"] = ydt_factorCargaSSAA;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_confiabilidadArranques"] = ydt_confiabilidadArranques;
                                valoresStringProduccionPorMes[datos.Value]["eg2-ydt_horasTotales"] = ydt_horasTotales;

                                cantidadAgregadoMes = cantidadAgregadoMes + datos.Key.Day;
                                valoresListadoGE2[datos.Value]["cantidadDiasMes"] = cantidadAgregadoMes.ToString();
                                valoresListadoGE2[datos.Value]["capacidadMaximaNeta"] = capacidadMaximaNeta.ToString();
                                valoresListadoGE2[datos.Value]["horasMes"] = HorasParseadas(horasDias);
                                valoresListadoGE2[datos.Value]["factorCapacidadProducción"] = FactorCapacidadProducción.ToString();
                                valoresListadoGE2[datos.Value]["factorDisponibilidadEquivalente"] = (OperacionesHorasPorcentaje(HorasDisponiblesEquivalentes, HorasParseadas(horasDias))).ToString();
                                valoresListadoGE2[datos.Value]["factorDisponibilidad"] = (1 - OperacionesHorasPorcentaje(horasDisponibles, HorasParseadas(horasDias))).ToString();
                                valoresListadoGE2[datos.Value]["heatRate"] = DivisionPorCero((ValidarDatoEnDiccionario(valoresProduccionPorMes, datos.Value, "consumoGasEG2") * 48384), (ValidarDatoEnDiccionario(valoresPorMes, datos.Value, "totalPmuEng_02") * 1000)).ToString();
                                valoresListadoGE2[datos.Value.ToLower()]["horasIndisponibleParada"] = horasIndisponibleParada;
                                valoresListadoGE2[datos.Value.ToLower()]["horasIndisponibleEquivalentes"] = OperacionesHorasParseadas(horasIndisponibleParada, "00:00:00", "suma");
                                valoresListadoGE2[datos.Value.ToLower()]["horasDisponiblesEquivalentes"] = HorasDisponiblesEquivalentes;

                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div>
            <div id="contenedor-OutagePercentage">
                <div style="display:flex;">
                    @{
                        List<string> listaHorasDisponiblesEG1 = new List<string>();
                        List<string> listaHorasDisponiblesEG2 = new List<string>();
                        List<string> listaHorasAñosEG1 = new List<string>();
                        List<string> listaHorasAñosEG2 = new List<string>();
                    }
                    @for (int bloque = 1; bloque < 4; bloque++)
                    {
                        string tituloTabla = bloque < 3 ? $"EG0{bloque}" : "TOTAL PLANT";

                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    @if (bloque == 1)
                                    {
                                        <th rowspan="3">Month</th>
                                    }
                                    <th colspan="3">@tituloTabla</th>
                                </tr>
                                <tr>
                                    <th>Horas indisponibles</th>
                                    <th>Horas del periodo</th>
                                    <th style="width: 90px;" rowspan="2">OP</th>
                                </tr>
                                <tr>
                                    <th>Unavailable Hours</th>
                                    <th>Period Hours</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    string[] englishMonthNames = CultureInfo.InvariantCulture.DateTimeFormat.MonthNames;
                                    int indexPercetage = 1;

                                    string sumaHorasDisponiblesPlant = "00:00:00";
                                    string sumaHorasDisponiblesEG1 = "00:00:00";
                                    string sumaHorasDisponiblesEG2 = "00:00:00";
                                    string sumaHorasAñoPlant = "00:00:00";
                                    string sumaHorasAñoEG1 = "00:00:00";
                                    string sumaHorasAñoEG2 = "00:00:00";

                                    foreach (var meses in englishMonthNames)
                                    {
                                        if (!string.IsNullOrEmpty(meses))
                                        {
                                            string mesesPosicion = indexPercetage < 10 ? $"0{indexPercetage}" : indexPercetage.ToString();
                                            DateTime mesActualPercentage = DateTime.Parse($"01/{mesesPosicion}/{DateTime.Now.ToString("yyyy")}");

                                            string horasDisponibles = "00:00:00";

                                            int horasDias = 24 * DateTime.DaysInMonth(mesActualPercentage.Year, mesActualPercentage.Month);
                                            <tr>
                                                @if (bloque == 1)
                                                {
                                                    <td>@meses</td>
                                                }

                                                @if (bloque < 3)
                                                {

                                                    if (tituloTabla.Equals("EG01"))
                                                    {
                                                        horasDisponibles = valoresMes.ContainsKey(mesActualPercentage) && valoresListadoGE1.ContainsKey(valoresMes[mesActualPercentage])
                                                        ? valoresListadoGE1[valoresMes[mesActualPercentage]]["horasIndisponibleParada"] : "00:00:00";

                                                        listaHorasAñosEG1.Add(HorasParseadas(horasDias));
                                                        listaHorasDisponiblesEG1.Add(horasDisponibles);
                                                        sumaHorasDisponiblesEG1 = OperacionesHorasParseadas(horasDisponibles, sumaHorasDisponiblesEG1, "suma");
                                                        sumaHorasAñoEG1 = OperacionesHorasParseadas(HorasParseadas(horasDias), sumaHorasAñoEG1, "suma");
                                                    }
                                                    else
                                                    {
                                                        horasDisponibles = valoresMes.ContainsKey(mesActualPercentage) && valoresListadoGE2.ContainsKey(valoresMes[mesActualPercentage])
                                                        ? valoresListadoGE2[valoresMes[mesActualPercentage]]["horasIndisponibleParada"] : "00:00:00";

                                                        listaHorasAñosEG2.Add(HorasParseadas(horasDias));
                                                        listaHorasDisponiblesEG2.Add(horasDisponibles);
                                                        sumaHorasDisponiblesEG2 = OperacionesHorasParseadas(horasDisponibles, sumaHorasDisponiblesEG2, "suma");
                                                        sumaHorasAñoEG2 = OperacionesHorasParseadas(HorasParseadas(horasDias), sumaHorasAñoEG2, "suma");
                                                    }
                                                    <td>@horasDisponibles</td>
                                                    <td>@HorasParseadas(horasDias)</td>
                                                    <td>@OperacionesHorasPorcentaje(horasDisponibles,HorasParseadas(horasDias)).ToString("P3")</td>

                                                }
                                                else
                                                {
                                                    string horasDisponiblesPlant = string.Empty;
                                                    string horasAñioPlant = string.Empty;

                                                    horasDisponiblesPlant = OperacionesHorasParseadas(listaHorasDisponiblesEG1[indexPercetage - 1], listaHorasDisponiblesEG2[indexPercetage - 1], "suma");
                                                    horasAñioPlant = OperacionesHorasParseadas(listaHorasAñosEG1[indexPercetage - 1], listaHorasAñosEG2[indexPercetage - 1], "suma");

                                                    <td>@horasDisponiblesPlant</td>
                                                    <td>@horasAñioPlant</td>
                                                    <td>@OperacionesHorasPorcentaje(horasDisponiblesPlant,horasAñioPlant).ToString("P3")</td>

                                                    sumaHorasDisponiblesPlant = OperacionesHorasParseadas(sumaHorasDisponiblesPlant, horasDisponiblesPlant, "suma");
                                                    sumaHorasAñoPlant = OperacionesHorasParseadas(horasAñioPlant, sumaHorasAñoPlant, "suma");
                                                }
                                            </tr>

                                            indexPercetage++;
                                        }
                                        else
                                        {
                                            <tr>
                                                @if (bloque == 1)
                                                {
                                                    <th>YTD</th>
                                                }
                                                @if (bloque < 3)
                                                {

                                                    if (tituloTabla.Equals("EG01"))
                                                    {
                                                        <th>@sumaHorasDisponiblesEG1</th>
                                                        <th>@sumaHorasAñoEG1</th>
                                                        <th>@OperacionesHorasPorcentaje(sumaHorasDisponiblesEG1,sumaHorasAñoEG1).ToString("P2")</th>
                                                    }
                                                    else
                                                    {
                                                        <th>@sumaHorasDisponiblesEG2</th>
                                                        <th>@sumaHorasAñoEG2</th>
                                                        <th>@OperacionesHorasPorcentaje(sumaHorasDisponiblesEG2,sumaHorasAñoEG2).ToString("P2")</th>
                                                    }
                                                }
                                                else
                                                {
                                                    <th>@sumaHorasDisponiblesPlant</th>
                                                    <th>@sumaHorasAñoPlant</th>
                                                    <th>@OperacionesHorasPorcentaje(sumaHorasDisponiblesPlant,sumaHorasAñoPlant).ToString("P2")</th>
                                                }

                                            </tr>
                                        }
                                    }
                                }
                            </tbody>

                        </table>
                    }
                </div>
            </div>
        </div>
        <div>
            <div id="contenedor-OutageProjection">
                <div style="display:flex;">
                    @{
                        decimal TotalPlantOP = 0;
                        decimal TotalPlantAño = 0;
                    }
                    @for (int bloque = 1; bloque < 4; bloque++)
                    {
                        string tituloTabla = bloque < 3 ? $"EG0{bloque}" : "TOTAL PLANT";

                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    @if (bloque == 1)
                                    {
                                        <th rowspan="3">Month</th>
                                    }
                                    <th colspan="@(bloque == 3 ? '4' : '3')">@tituloTabla</th>
                                </tr>
                                <tr>
                                    <th>Horas indisponibles</th>
                                    <th>Horas del periodo</th>
                                    <th style="width: 90px;" rowspan="2">OP</th>
                                    @if (bloque == 3)
                                    {
                                        <th style="width: 90px;" rowspan="2">A</th>
                                    }
                                </tr>
                                <tr>
                                    <th>Unavailable Hours</th>
                                    <th>Period Hours</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    string[] englishMonthNames = CultureInfo.InvariantCulture.DateTimeFormat.MonthNames;
                                    int indexPercetage = 1;

                                    string sumaHorasDisponiblesPlant = "00:00:00";
                                    string sumaHorasDisponiblesEG1 = "00:00:00";
                                    string sumaHorasDisponiblesEG2 = "00:00:00";
                                    string sumaHorasAñoPlant = "00:00:00";
                                    string sumaHorasAñoEG1 = "00:00:00";
                                    string sumaHorasAñoEG2 = "00:00:00";

                                    foreach (var meses in englishMonthNames)
                                    {
                                        if (!string.IsNullOrEmpty(meses))
                                        {
                                            string mesesPosicion = indexPercetage < 10 ? $"0{indexPercetage}" : indexPercetage.ToString();
                                            DateTime mesActualPercentage = DateTime.Parse($"01/{mesesPosicion}/{DateTime.Now.ToString("yyyy")}");

                                            string horasIndisponibles = "00:00:00";

                                            int horasDias = 24 * DateTime.DaysInMonth(mesActualPercentage.Year, mesActualPercentage.Month);
                                            <tr>
                                                @if (bloque == 1)
                                                {
                                                    <td>@meses</td>
                                                }

                                                @if (bloque < 3)
                                                {

                                                    if (tituloTabla.Equals("EG01"))
                                                    {
                                                        horasIndisponibles = valoresMes.ContainsKey(mesActualPercentage) && valoresListadoGE1.ContainsKey(valoresMes[mesActualPercentage])
                                                        ? valoresListadoGE1[valoresMes[mesActualPercentage]]["horasIndisponibleEquivalentes"] : "00:00:00";

                                                        listaHorasAñosEG1.Add(HorasParseadas(horasDias));
                                                        listaHorasDisponiblesEG1.Add(horasIndisponibles);
                                                        sumaHorasDisponiblesEG1 = OperacionesHorasParseadas(horasIndisponibles, sumaHorasDisponiblesEG1, "suma");
                                                        sumaHorasAñoEG1 = OperacionesHorasParseadas(HorasParseadas(horasDias), sumaHorasAñoEG1, "suma");
                                                    }
                                                    else
                                                    {
                                                        horasIndisponibles = valoresMes.ContainsKey(mesActualPercentage) && valoresListadoGE2.ContainsKey(valoresMes[mesActualPercentage])
                                                        ? valoresListadoGE2[valoresMes[mesActualPercentage]]["horasIndisponibleEquivalentes"] : "00:00:00";

                                                        listaHorasAñosEG2.Add(HorasParseadas(horasDias));
                                                        listaHorasDisponiblesEG2.Add(horasIndisponibles);
                                                        sumaHorasDisponiblesEG2 = OperacionesHorasParseadas(horasIndisponibles, sumaHorasDisponiblesEG2, "suma");
                                                        sumaHorasAñoEG2 = OperacionesHorasParseadas(HorasParseadas(horasDias), sumaHorasAñoEG2, "suma");
                                                    }
                                                    <td>@horasIndisponibles</td>
                                                    <td>@HorasParseadas(horasDias)</td>
                                                    <td>@OperacionesHorasPorcentaje(horasIndisponibles,HorasParseadas(horasDias)).ToString("P3")</td>

                                                }
                                                else
                                                {
                                                    string horasDisponiblesPlant = string.Empty;
                                                    string horasAñioPlant = string.Empty;

                                                    horasDisponiblesPlant = OperacionesHorasParseadas(listaHorasDisponiblesEG1[indexPercetage - 1], listaHorasDisponiblesEG2[indexPercetage - 1], "suma");
                                                    horasAñioPlant = OperacionesHorasParseadas(listaHorasAñosEG1[indexPercetage - 1], listaHorasAñosEG2[indexPercetage - 1], "suma");

                                                    <td>@horasDisponiblesPlant</td>
                                                    <td>@horasAñioPlant</td>
                                                    <td>@OperacionesHorasPorcentaje(horasDisponiblesPlant,horasAñioPlant).ToString("P3")</td>
                                                    <td>@((1m - OperacionesHorasPorcentaje(horasDisponiblesPlant, horasAñioPlant)).ToString("P2"))</td>

                                                    sumaHorasDisponiblesPlant = OperacionesHorasParseadas(sumaHorasDisponiblesPlant, horasDisponiblesPlant, "suma");
                                                    sumaHorasAñoPlant = OperacionesHorasParseadas(horasAñioPlant, sumaHorasAñoPlant, "suma");
                                                }
                                            </tr>

                                            indexPercetage++;
                                        }
                                        else
                                        {
                                            <tr>
                                                @if (bloque == 1)
                                                {
                                                    <th>YTD</th>
                                                }
                                                @if (bloque < 3)
                                                {

                                                    if (tituloTabla.Equals("EG01"))
                                                    {
                                                        <th>@sumaHorasDisponiblesEG1</th>
                                                        <th>@sumaHorasAñoEG1</th>
                                                        <th>@OperacionesHorasPorcentaje(sumaHorasDisponiblesEG1,sumaHorasAñoEG1).ToString("P2")</th>
                                                    }
                                                    else
                                                    {
                                                        <th>@sumaHorasDisponiblesEG2</th>
                                                        <th>@sumaHorasAñoEG2</th>
                                                        <th>@OperacionesHorasPorcentaje(sumaHorasDisponiblesEG2,sumaHorasAñoEG2).ToString("P2")</th>
                                                    }
                                                }
                                                else
                                                {
                                                    TotalPlantOP = OperacionesHorasPorcentaje(sumaHorasDisponiblesPlant, sumaHorasAñoPlant);

                                                    TotalPlantAño = ObtenerHorasParseadas(sumaHorasAñoPlant);

                                                    <th>@sumaHorasDisponiblesPlant</th>
                                                    <th>@sumaHorasAñoPlant</th>
                                                    <th>@TotalPlantOP.ToString("P3")</th>
                                                    <th>@((1 - OperacionesHorasPorcentaje(sumaHorasDisponiblesPlant, sumaHorasAñoPlant)).ToString("P3"))</th>
                                                }

                                            </tr>
                                        }
                                    }
                                }
                            </tbody>

                        </table>
                    }
                </div>

                <div class="leyenda-projection">
                    <table class="table table-bordered">
                        <tbody>
                            @{
                                decimal porcentajeMaximo = (0.05m - TotalPlantOP);
                                decimal horasLimiteMaximo = porcentajeMaximo * TotalPlantAño;
                                <tr>
                                    <th>Límite máximo</th>
                                    <td>5.00%</td>
                                    <td>95%</td>
                                </tr>
                                <tr>
                                    <th>Porcentaje para alcanzar el límite máximo</th>
                                    <td>@(porcentajeMaximo.ToString("P2"))</td>
                                </tr>
                                <tr>
                                    <th>Horas para alcanzar el límite máximo</th>
                                    <td>@HorasParseadas(horasLimiteMaximo)</td>
                                </tr>
                                <tr>
                                    <th>Días para alcanzar el límite máximo</th>
                                    <td>@((horasLimiteMaximo / 24).ToString("N2"))</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div>
            <div id="contenedor-Report1">
                <div style="overflow-x: scroll;">
                    <div style="display: flex;padding: 0 0 10vh 0;">
                        @{
                            string[] spanishMonthNames = CultureInfo.GetCultureInfo("es-ES").DateTimeFormat.MonthNames;
                            if (spanishMonthNames.Length > 12)
                            {
                                Array.Resize(ref spanishMonthNames, spanishMonthNames.Length - 1);
                            }

                            foreach (var meses in spanishMonthNames)
                            {
                                if (!string.IsNullOrEmpty(meses))
                                {
                                    <div class="contenedor-tablas-reporte">
                                        <table class="table table-bordered detalles-report1">
                                            <thead>
                                                <tr>
                                                    <td style="border: none !important;"></td>
                                                    <th colspan="6">@meses.ToUpper()</th>
                                                </tr>
                                                <tr>
                                                    <td style="border: none !important;"></td>
                                                    <th colspan="2">EG01</th>
                                                    <th colspan="2">EG02</th>
                                                    <th colspan="2">PLANT</th>
                                                </tr>
                                                <tr>
                                                    <th>PARÁMETROS</th>
                                                    <th>Month</th>
                                                    <th>YTD</th>
                                                    <th>Month</th>
                                                    <th>YTD</th>
                                                    <th>Month</th>
                                                    <th>YTD</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    <td>Generación Neta (MWh)</td>
                                                    <td>@ValidarDatoEnDiccionario(valoresPorMes,meses.ToLower(),"totalPmuEng_01").ToString("N2")</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_producciónTotal")</td>
                                                    <td>@ValidarDatoEnDiccionario(valoresPorMes,meses.ToLower(),"totalPmuEng_02").ToString("N2")</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg2-ydt_producciónTotal")</td>
                                                    <td>@((ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_01") + ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_02")).ToString("N2"))</td>
                                                    <td>@((ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_01") + ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_02")).ToString("N2"))</td>
                                                </tr>
                                                <tr>
                                                    <td>Generación Exportada (MWh)</td>
                                                    <td>@((ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_01") - ValidarDatoEnDiccionario(valoresProduccionPorMes, meses.ToLower(), "serviciosAuxiliaresEG1")).ToString("N2"))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_generaciónNeta")</td>
                                                    <td>@((ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_02") - ValidarDatoEnDiccionario(valoresProduccionPorMes, meses.ToLower(), "serviciosAuxiliaresEG2")).ToString("N2"))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg2-ydt_generaciónNeta")</td>
                                                    <td>@((ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_01") - ValidarDatoEnDiccionario(valoresProduccionPorMes, meses.ToLower(), "serviciosAuxiliaresEG1") + ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_02") - ValidarDatoEnDiccionario(valoresProduccionPorMes, meses.ToLower(), "serviciosAuxiliaresEG2")).ToString("N2"))</td>
                                                    <td>@((ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_01") - ValidarDatoEnDiccionario(valoresProduccionPorMes, meses.ToLower(), "serviciosAuxiliaresEG1") + ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_02") - ValidarDatoEnDiccionario(valoresProduccionPorMes, meses.ToLower(), "serviciosAuxiliaresEG2")).ToString("N2"))</td>
                                                </tr>
                                                <tr>
                                                    <td>Consumo de combustible (medidor kg)</td>
                                                    <td>@(ValidarDatoEnDiccionario(valoresProduccionPorMes, meses.ToLower(), "consumoGasEG1").ToString("N2"))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_consumoCombustible")</td>
                                                    <td>@(ValidarDatoEnDiccionario(valoresProduccionPorMes, meses.ToLower(), "consumoGasEG2").ToString("N2"))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg2-ydt_consumoCombustible")</td>
                                                    <td>@((ValidarDatoEnDiccionario(valoresProduccionPorMes, meses.ToLower(), "consumoGasEG2") + ValidarDatoEnDiccionario(valoresProduccionPorMes, meses.ToLower(), "consumoGasEG1")).ToString("N2"))</td>
                                                    <td>@((ValidarDatoEnDiccionario(valoresProduccionPorMes, meses.ToLower(), "consumoGasEG2") + ValidarDatoEnDiccionario(valoresProduccionPorMes, meses.ToLower(), "consumoGasEG1")).ToString("N2"))</td>
                                                </tr>
                                                <tr>
                                                    @{
                                                        decimal hearRateTotal = decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "heatRate")) + decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE2, meses.ToLower(), "heatRate"));
                                                        decimal ydt_hearRateTotal = decimal.Parse(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes, meses.ToLower(), "eg1-ydt_heatRate")) + decimal.Parse(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes, meses.ToLower(), "eg2-ydt_heatRate"));
                                                    }
                                                    <td>Heat Rate (kJ/kWh)</td>
                                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "heatRate")).ToString("N2"))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_heatRate")</td>
                                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE2, meses.ToLower(), "heatRate")).ToString("N2"))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg2-ydt_heatRate")</td>
                                                    <td>@(hearRateTotal.ToString("N2"))</td>
                                                    <td>@(ydt_hearRateTotal.ToString("N2"))</td>
                                                </tr>
                                                <tr>
                                                    <td>Eficiencia (%)</td>
                                                    <td>@(DivisionPorCero(3600, decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "heatRate"))).ToString("P2"))</td>
                                                    <td>@(DivisionPorCero(3600, decimal.Parse(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes, meses.ToLower(), "eg1-ydt_heatRate"))).ToString("P2"))</td>
                                                    <td>@(DivisionPorCero(3600, decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE2, meses.ToLower(), "heatRate"))).ToString("P2"))</td>
                                                    <td>@(DivisionPorCero(3600, decimal.Parse(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes, meses.ToLower(), "eg2-ydt_heatRate"))).ToString("P2"))</td>
                                                    <td>@(DivisionPorCero(3600, hearRateTotal).ToString("P2"))</td>
                                                    <td>@(DivisionPorCero(3600, hearRateTotal).ToString("P2"))</td>
                                                </tr>
                                                @{
                                                    decimal horasEquivalentesEG01 = ValidarDatoEnDiccionario(valoresProduccionPorMes, meses.ToLower(), "HorasEquivalentesEG01");
                                                    decimal horasEquivalentesEG02 = ValidarDatoEnDiccionario(valoresProduccionPorMes, meses.ToLower(), "HorasEquivalentesEG02");
                                                }
                                                <tr>
                                                    <td>Horas Despachadas (h)</td>
                                                    <td>@(HorasParseadas(horasEquivalentesEG01))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_horasDespachadas")</td>
                                                    <td>@(HorasParseadas(horasEquivalentesEG02))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg2-ydt_horasDespachadas")</td>
                                                    <td>@(OperacionesHorasParseadas(HorasParseadas(horasEquivalentesEG01), HorasParseadas(horasEquivalentesEG02), "suma"))</td>
                                                    <td>@(OperacionesHorasParseadas(HorasParseadas(horasEquivalentesEG01), HorasParseadas(horasEquivalentesEG02), "suma"))</td>
                                                </tr>
                                                <tr>
                                                    <td>Horas de Mantenimiento Programado (h)</td>
                                                    <td>@(ValidarTiempoEnDiccionario(valoresListadoEventoGE1, meses.ToLower(), "plannedMaint"))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_horasManttoProgramado")</td>
                                                    <td>@(ValidarTiempoEnDiccionario(valoresListadoEventoGE2, meses.ToLower(), "plannedMaint"))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg2-ydt_horasManttoProgramado")</td>
                                                    <td>@(OperacionesHorasParseadas(ValidarTiempoEnDiccionario(valoresListadoEventoGE1, meses.ToLower(), "plannedMaint").ToString(), ValidarTiempoEnDiccionario(valoresListadoEventoGE2, meses.ToLower(), "plannedMaint").ToString(), "suma"))</td>
                                                    <td>@(OperacionesHorasParseadas(ValidarTiempoEnDiccionario(valoresListadoEventoGE1, meses.ToLower(), "plannedMaint").ToString(), ValidarTiempoEnDiccionario(valoresListadoEventoGE2, meses.ToLower(), "plannedMaint").ToString(), "suma"))</td>
                                                </tr>
                                                <tr>
                                                    <td>Horas de Mantenimiento Fortuito (h)</td>
                                                    <td>@(ValidarTiempoEnDiccionario(valoresListadoEventoGE1, meses.ToLower(), "forcedMaint"))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_horasManttoFortuito")</td>
                                                    <td>@(ValidarTiempoEnDiccionario(valoresListadoEventoGE2, meses.ToLower(), "forcedMaint"))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg2-ydt_horasManttoFortuito")</td>
                                                    <td>@(OperacionesHorasParseadas(ValidarTiempoEnDiccionario(valoresListadoEventoGE1, meses.ToLower(), "forcedMaint").ToString(), ValidarTiempoEnDiccionario(valoresListadoEventoGE2, meses.ToLower(), "forcedMaint").ToString(), "suma"))</td>
                                                    <td>@(OperacionesHorasParseadas(ValidarTiempoEnDiccionario(valoresListadoEventoGE1, meses.ToLower(), "forcedMaint").ToString(), ValidarTiempoEnDiccionario(valoresListadoEventoGE2, meses.ToLower(), "forcedMaint").ToString(), "suma"))</td>
                                                </tr>
                                                <tr>
                                                    @{
                                                        decimal horasIndisponibleParadaGe1 = ObtenerHorasParseadas(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "horasIndisponibleParada"));
                                                        decimal horasIndisponibleParadaGe2 = ObtenerHorasParseadas(ValidarDatoEnDiccionarioString(valoresListadoGE2, meses.ToLower(), "horasIndisponibleParada"));

                                                        decimal horasMesGe1 = ObtenerHorasParseadas(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "horasMes"));
                                                        decimal horasMesGe2 = ObtenerHorasParseadas(ValidarDatoEnDiccionarioString(valoresListadoGE2, meses.ToLower(), "horasMes"));

                                                        decimal totalIndisponibleParada = 1 - (horasIndisponibleParadaGe1 + horasIndisponibleParadaGe2) / (horasMesGe1 + horasMesGe2);


                                                        decimal horasIndisponibleParadaGe1YTD = ObtenerHorasParseadas(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes, meses.ToLower(), "eg1-ydt_horasIndisponibles"));
                                                        decimal horasIndisponibleParadaGe2YTD = ObtenerHorasParseadas(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes, meses.ToLower(), "eg2-ydt_horasIndisponibles"));

                                                        decimal horasMesGe1YTD = ObtenerHorasParseadas(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes, meses.ToLower(), "eg1-ydt_horasMes"));
                                                        decimal horasMesGe2YTD = ObtenerHorasParseadas(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes, meses.ToLower(), "eg2-ydt_horasMes"));

                                                        decimal totalHorasIndisponibleParadaYTD = 1 - (horasIndisponibleParadaGe1YTD + horasIndisponibleParadaGe2YTD) / (horasMesGe1YTD + horasMesGe2YTD);

                                                    }

                                                    <td>Disponibilidad</td>
                                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "factorDisponibilidad")).ToString("P2"))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_factorDisponibilidad")</td>
                                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE2, meses.ToLower(), "factorDisponibilidad")).ToString("P2"))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg2-ydt_factorDisponibilidad")</td>
                                                    <td>@(totalIndisponibleParada.ToString("P2"))</td>
                                                    <td>@(totalHorasIndisponibleParadaYTD.ToString("P2"))</td>
                                                </tr>
                                                <tr>
                                                    @{
                                                        /*
                                                        =('EG01'!B20+'EG02'!Report1!B20B20)/('EG01'!B17+'EG02'!B17)
                                                        */
                                                        decimal disponiblesEquivalentesGe1 = ObtenerHorasParseadas(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "horasDisponiblesEquivalentes"));
                                                        decimal disponiblesEquivalentesGe2 = ObtenerHorasParseadas(ValidarDatoEnDiccionarioString(valoresListadoGE2, meses.ToLower(), "horasDisponiblesEquivalentes"));

                                                        decimal totalDisponibilidadEquivalente = (disponiblesEquivalentesGe1 + disponiblesEquivalentesGe2) / (horasMesGe1 + horasMesGe2);


                                                        decimal disponibilidadEquivalenteGe1YTD = ObtenerHorasParseadas(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes, meses.ToLower(), "eg1-ydt_horasDisponiblesEquivalentes"));
                                                        decimal disponibilidadEquivalenteGe2YTD = ObtenerHorasParseadas(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes, meses.ToLower(), "eg2-ydt_horasDisponiblesEquivalentes"));

                                                        decimal totalDisponibilidadEquivalenteYTD = (disponibilidadEquivalenteGe1YTD + disponibilidadEquivalenteGe2YTD) / (horasMesGe1YTD + horasMesGe2YTD);


                                                    }
                                                    <td>Disponibilidad Equivalente</td>
                                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "factorDisponibilidadEquivalente")).ToString("P2"))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_factorDisponibilidadEquivalente")</td>
                                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE2, meses.ToLower(), "factorDisponibilidadEquivalente")).ToString("P2"))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg2-ydt_factorDisponibilidadEquivalente")</td>
                                                    <td>@totalDisponibilidadEquivalente.ToString("P2")</td>
                                                    <td>@totalDisponibilidadEquivalenteYTD.ToString("P2")</td>
                                                </tr>
                                                <tr>
                                                    @{
                                                        /*
                                                        =('EG01'!B6+'EG02'!B6)/(('EG01'!B29*24)*('EG01'!B3-'EG01'!B2+1)+('EG02'!B29*24)*('EG02'!B3-'EG02'!B2+1))
                                                        */
                                                        decimal produccionTotalGe1 = ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_01");
                                                        decimal produccionTotalGe2 = ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_02");

                                                        decimal produccionTotal = produccionTotalGe1 + produccionTotalGe2;
                                                        decimal capacidadMáximaNetaGe1 = decimal.Parse(valoresListadoGE1[meses.ToLower()]["capacidadMaximaNeta"]);
                                                        decimal capacidadMáximaNetaGe2 = decimal.Parse(valoresListadoGE2[meses.ToLower()]["capacidadMaximaNeta"]);

                                                        int diasMes = int.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "cantidadDiasMes"));


                                                        decimal factorCapacidadProducción = produccionTotal / ((capacidadMáximaNetaGe1 * 24) * diasMes + (capacidadMáximaNetaGe2 * 24) * diasMes);


                                                        decimal produccionTotalGe1YTD = decimal.Parse(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes, meses.ToLower(), "eg1-ydt_producciónTotal"));
                                                        decimal produccionTotalGe2YTD = decimal.Parse(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes, meses.ToLower(), "eg2-ydt_producciónTotal"));

                                                        decimal produccionTotalYTD = produccionTotalGe1YTD + produccionTotalGe2YTD;

                                                        decimal factorCapacidadProducciónYTD = produccionTotalYTD / ((capacidadMáximaNetaGe1 * 24) * diasMes + (capacidadMáximaNetaGe2 * 24) * diasMes);


                                                    }

                                                    <td>Factor de capacidad de producción</td>
                                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "factorCapacidadProducción")).ToString("P2"))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_factorCapacidadProducción")</td>
                                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE2, meses.ToLower(), "factorCapacidadProducción")).ToString("P2"))</td>
                                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg2-ydt_factorCapacidadProducción")</td>
                                                    <td>@factorCapacidadProducción.ToString("P2")</td>
                                                    <td>@factorCapacidadProducciónYTD.ToString("P2")</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>

                                    if (!valoresListadoReport1.ContainsKey(meses.ToLower()))
                                    {
                                        valoresListadoReport1[meses.ToLower()] = new Dictionary<string, decimal>();
                                    }


                                    valoresListadoReport1[meses.ToLower()]["totalDisponibilidadEquivalente"] = totalDisponibilidadEquivalente;
                                    valoresListadoReport1[meses.ToLower()]["ydt_hearRateTotal"] = ydt_hearRateTotal;
                                    valoresListadoReport1[meses.ToLower()]["hearRateTotal"] = hearRateTotal;
                                    valoresListadoReport1[meses.ToLower()]["plant-month_factorCapacidadProducción"] = factorCapacidadProducción;
                                    valoresListadoReport1[meses.ToLower()]["plant-month_totalIndisponibleParada"] = totalIndisponibleParada;


                                }
                            }
                        }
                    </div>
                    <div style="display:flex;padding: 0 0 10vh 0;">
                        <div>
                            <table style="width:80vh;" class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th rowspan="2"></th>
                                        <th colspan="3">CAPACIDAD DE PRODUCCIÓN</th>
                                        <th colspan="3">DISPONIBILIDAD</th>
                                    </tr>
                                    <tr>
                                        <th>EG01</th>
                                        <th>EG02</th>
                                        <th>PLANT</th>
                                        <th>EG01</th>
                                        <th>EG02</th>
                                        <th>PLANT</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        List<decimal> listaCapacidadGE1 = new List<decimal>();
                                        List<decimal> listaDisponibilidadGE1 = new List<decimal>();
                                        List<decimal> listaCapacidadGE2 = new List<decimal>();
                                        List<decimal> listaDisponibilidadGE2 = new List<decimal>();
                                        List<decimal> listaCapacidadPlant = new List<decimal>();
                                        List<decimal> listaDisponibilidadPlant = new List<decimal>();
                                        diccionarioGraficos["report1-cap-eg1"] = new List<decimal>();
                                        diccionarioGraficos["report1-dis-eg1"] = new List<decimal>();
                                        diccionarioGraficos["report1-cap-eg2"] = new List<decimal>();
                                        diccionarioGraficos["report1-dis-eg2"] = new List<decimal>();

                                        decimal ejem = 1;
                                        foreach (var meses in spanishMonthNames)
                                        {
                                            if (!string.IsNullOrEmpty(meses))
                                            {
                                                <tr>
                                                    <td>@(char.ToUpper(meses[0]) + meses.Substring(1))</td>
                                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "factorCapacidadProducción")).ToString("P2"))</td>
                                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE2, meses.ToLower(), "factorCapacidadProducción")).ToString("P2"))</td>
                                                    <td>@(ValidarDatoEnDiccionario(valoresListadoReport1, meses.ToLower(), "plant-month_factorCapacidadProducción").ToString("P2"))</td>
                                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "factorDisponibilidad")).ToString("P2"))</td>
                                                    <td>@(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes, meses.ToLower(), "eg2-ydt_factorDisponibilidad"))</td>
                                                    <td>@(ValidarDatoEnDiccionario(valoresListadoReport1, meses.ToLower(), "plant-month_totalIndisponibleParada").ToString("P2"))</td>
                                                </tr>

                                                if (meses.ToLower().Equals("diciembre"))
                                                {
                                                    @* discrepancia entre los datos de  LUREN Y PEDREGAL
                                    <tr>
                                    <td>YTD</td>
                                    <td>@(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_factorDisponibilidadEquivalente"))</td>
                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg2-ydt_factorDisponibilidadEquivalente")</td>
                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_factorCapacidadProducción")).ToString())</td>
                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "factorDisponibilidad")))</td>
                                    <td></td>
                                    </tr>
                                    *@
                                                }
                                                @*
                                    listaCapacidadGE1.Add(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "factorCapacidadProducción")));
                                    listaDisponibilidadGE1.Add(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "factorDisponibilidad")));
                                    listaCapacidadGE2.Add(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE2, meses.ToLower(), "factorCapacidadProducción")));
                                    listaDisponibilidadGE2.Add(decimal.Parse(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes, meses.ToLower(), "eg2-ydt_factorDisponibilidad")));
                                    listaCapacidadPlant.Add(decimal.Parse(ValidarDatoEnDiccionario(valoresListadoReport1, meses.ToLower(), "plant-month_factorCapacidadProducción")));
                                    listaDisponibilidadPlant.Add(decimal.Parse(ValidarDatoEnDiccionario(valoresListadoReport1, meses.ToLower(), "plant-month_totalIndisponibleParada")));
                                    *@
                                                decimal aa = 5 * ejem;
                                                decimal bb = 7 * ejem;
                                                decimal cc = 9 * ejem;
                                                if (ejem % 2 == 0)
                                                {
                                                    aa = (5 * ejem) / 2;
                                                    bb = (5 * ejem) / 3;
                                                    cc = (5 * ejem) / 4;
                                                }

                                                listaCapacidadGE1.Add(aa * 1.52m);
                                                listaDisponibilidadGE1.Add(aa / 2);

                                                listaCapacidadGE2.Add(bb * 1.80m);
                                                listaDisponibilidadGE2.Add(bb / 3);

                                                listaCapacidadPlant.Add(cc * 1.90m);
                                                listaDisponibilidadPlant.Add(cc / 4);
                                                ejem++;
                                            }
                                        }

                                        diccionarioGraficos["report1-cap-eg1"] = listaCapacidadGE1;
                                        diccionarioGraficos["report1-dis-eg1"] = listaDisponibilidadGE1;
                                        diccionarioGraficos["report1-cap-eg2"] = listaCapacidadGE2;
                                        diccionarioGraficos["report1-dis-eg2"] = listaDisponibilidadGE2;
                                        diccionarioGraficos["report1-cap-plant"] = listaCapacidadPlant;
                                        diccionarioGraficos["report1-dis-plant"] = listaDisponibilidadPlant;

                                    }

                                </tbody>
                            </table>
                        </div>

                        <div style="padding: 0 0 0 10vh;">
                            <div style="width:100vh;height: 40vh;">
                                <div class="card shadow" style="width: 100%;">
                                    <!-- Card Header - Dropdown -->
                                    <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                        <h6 class="m-0 font-weight-bold text-primary" id='titulo-report1-eg1'>EG01</h6>
                                    </div>
                                    <!-- Card Body -->
                                    <div class="card-body" style="height: 38vh;">
                                        <div class="chart-area">
                                            <div class="chartjs-size-monitor-shrink">
                                                <div></div>
                                            </div>
                                            <div id='graf-report1-EG01'></div>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div style="padding: 0 0 0 10vh;">
                            <div style="width:130vh;height: 40vh;">
                                <div class="card shadow" style="width: 100%;">
                                    <!-- Card Header - Dropdown -->
                                    <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                        <h6 class="m-0 font-weight-bold text-primary" id='titulo-report1-eg2'>EG02</h6>
                                    </div>
                                    <!-- Card Body -->
                                    <div class="card-body" style="height: 38vh;">
                                        <div class="chart-area">
                                            <div class="chartjs-size-monitor-shrink">
                                                <div></div>
                                            </div>
                                            <div id='graf-report1-EG02'></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div style="padding: 0 0 0 10vh;">
                            <div style="width:130vh;height: 40vh;">
                                <div class="card shadow" style="width: 100%;">
                                    <!-- Card Header - Dropdown -->
                                    <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                        <h6 class="m-0 font-weight-bold text-primary" id='titulo-report1-plant'>PLANT</h6>
                                    </div>
                                    <!-- Card Body -->
                                    <div class="card-body" style="height: 38vh;">
                                        <div class="chart-area">
                                            <div class="chartjs-size-monitor-shrink">
                                                <div></div>
                                            </div>
                                            <div id='graf-report1-plant'></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                    <div style="display:flex;padding: 0 0 10vh 0;">
                        <div>
                            <table style="width:80vh;" class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th rowspan="2"></th>
                                        <th colspan="3">HEAT RATE</th>
                                        <th>HEAT RATE OBJETIVO</th>
                                    </tr>
                                    <tr>
                                        <th>EG01</th>
                                        <th>EG02</th>
                                        <th>PLANT</th>
                                        <th>EG0X</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        listaCapacidadGE1 = new List<decimal>();
                                        listaCapacidadGE2 = new List<decimal>();
                                        listaDisponibilidadGE1 = new List<decimal>();
                                        listaCapacidadPlant = new List<decimal>();
                                        listaDisponibilidadPlant = new List<decimal>();

                                        diccionarioGraficos["report1-heat-rate-objetivo"] = new List<decimal>();
                                        diccionarioGraficos["report1-heat-rate-eg1"] = new List<decimal>();
                                        diccionarioGraficos["report1-heat-rate-eg2"] = new List<decimal>();
                                        diccionarioGraficos["report1-heat-rate-plant"] = new List<decimal>();

                                        foreach (var meses in spanishMonthNames)
                                        {
                                            <tr>
                                                <td>@meses</td>
                                                <td>@decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "heatRate")).ToString("N2")</td>
                                                <td>@decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE2, meses.ToLower(), "heatRate")).ToString("N2")</td>
                                                <td>@(ValidarDatoEnDiccionario(valoresListadoReport1, meses.ToLower(), "hearRateTotal").ToString("N2"))</td>
                                                <td>@(decimal.Parse("8100").ToString("N2"))</td>
                                            </tr>

                                            if (meses.ToLower().Equals("diciembre"))
                                            {
                                                @* discrepancia entre los datos de  LUREN Y PEDREGAL
                                    <tr>
                                    <td>YTD</td>
                                    <td>@(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_factorDisponibilidadEquivalente"))</td>
                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg2-ydt_factorDisponibilidadEquivalente")</td>
                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_factorCapacidadProducción")).ToString())</td>
                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "factorDisponibilidad")))</td>
                                    <td></td>
                                    </tr>
                                    *@
                                            }

                                            listaCapacidadPlant.Add(8100m);
                                            listaCapacidadGE1.Add(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "heatRate")));
                                            listaCapacidadGE2.Add(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE2, meses.ToLower(), "heatRate")));
                                            listaDisponibilidadPlant.Add(ValidarDatoEnDiccionario(valoresListadoReport1, meses.ToLower(), "hearRateTotal"));
                                        }

                                        diccionarioGraficos["report1-heat-rate-objetivo"] = listaCapacidadPlant;
                                        diccionarioGraficos["report1-heat-rate-eg1"] = listaCapacidadGE1;
                                        diccionarioGraficos["report1-heat-rate-eg2"] = listaCapacidadGE2;
                                        diccionarioGraficos["report1-heat-rate-plant"] = listaDisponibilidadPlant;
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div style="padding: 0 0 0 10vh;">
                            <div style="width:130vh;height: 40vh;">
                                <div class="card shadow" style="width: 100%;">
                                    <!-- Card Header - Dropdown -->
                                    <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                        <h6 class="m-0 font-weight-bold text-primary" id='titulo-head-rate-ge1'>EG01</h6>
                                    </div>
                                    <!-- Card Body -->
                                    <div class="card-body" style="height: 38vh;">
                                        <div class="chart-area">
                                            <div class="chartjs-size-monitor-shrink">
                                                <div></div>
                                            </div>
                                            <div id='graf-head-rate-ge1'></div>
                                            <!-- <canvas id='graf-head-rate-ge1' style="display: block;  height: 140px !important;   width: 50%;"></canvas>-->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div style="padding: 0 0 0 10vh;">
                            <div style="width:130vh;height: 40vh;">
                                <div class="card shadow" style="width: 100%;">
                                    <!-- Card Header - Dropdown -->
                                    <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                        <h6 class="m-0 font-weight-bold text-primary" id='titulo-head-rate-ge2'>EG02</h6>
                                    </div>
                                    <!-- Card Body -->
                                    <div class="card-body" style="height: 38vh;">
                                        <div class="chart-area">
                                            <div class="chartjs-size-monitor-shrink">
                                                <div></div>
                                            </div>
                                            <div id='graf-head-rate-ge2'></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div style="padding: 0 0 0 10vh;">
                            <div style="width:130vh;height: 40vh;">
                                <div class="card shadow" style="width: 100%;">
                                    <!-- Card Header - Dropdown -->
                                    <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                        <h6 class="m-0 font-weight-bold text-primary" id='titulo-head-rate-plant'>PLANT</h6>
                                    </div>
                                    <!-- Card Body -->
                                    <div class="card-body" style="height: 38vh;">
                                        <div class="chart-area">
                                            <div class="chartjs-size-monitor-shrink">
                                                <div></div>
                                            </div>
                                            <div id='graf-head-rate-plant'></div>
                                            <!--<canvas id='graf-head-rate-plant' style="display: block;  height: 140px !important;   width: 50%;"></canvas> -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div style="display:flex;padding: 0 0 10vh 0;">
                        <div>
                            <table style="width:80vh;" class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th rowspan="2"></th>
                                        <th colspan="3">ENERGÍA MENSUAL MWh</th>
                                        <th>ENERGÍA OBJETIVO</th>
                                        <th>ENERGÍA OBJETIVO PLANTA</th>
                                    </tr>
                                    <tr>
                                        <th>EG01</th>
                                        <th>EG02</th>
                                        <th>PLANT</th>
                                        <th>EG0X</th>
                                        <th>PLANT</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        listaCapacidadGE1 = new List<decimal>();
                                        listaCapacidadGE2 = new List<decimal>();
                                        listaDisponibilidadPlant = new List<decimal>();
                                        listaCapacidadPlant = new List<decimal>();

                                        diccionarioGraficos["report1-energ-mensual-objetivo"] = new List<decimal>();
                                        diccionarioGraficos["report1-energ-mensual-eg1"] = new List<decimal>();
                                        diccionarioGraficos["report1-energ-mensual-eg2"] = new List<decimal>();
                                        diccionarioGraficos["report1-energ-mensual-plant"] = new List<decimal>();

                                        foreach (var meses in spanishMonthNames)
                                        {
                                            <tr>
                                                <td>@meses</td>
                                                <td>@ValidarDatoEnDiccionario(valoresPorMes,meses.ToLower(),"totalPmuEng_01").ToString("N2")</td>
                                                <td>@ValidarDatoEnDiccionario(valoresPorMes,meses.ToLower(),"totalPmuEng_02").ToString("N2")</td>
                                                <td>@((ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_01") + ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_02")).ToString("N2"))</td>
                                                <td></td>
                                                <td></td>
                                            </tr>

                                            if (meses.ToLower().Equals("diciembre"))
                                            {
                                                @* discrepancia entre los datos de  LUREN Y PEDREGAL
                                    <tr>
                                    <td>YTD</td>
                                    <td>@(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_factorDisponibilidadEquivalente"))</td>
                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg2-ydt_factorDisponibilidadEquivalente")</td>
                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_factorCapacidadProducción")).ToString())</td>
                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "factorDisponibilidad")))</td>
                                    <td></td>
                                    </tr>
                                    *@
                                            }

                                            listaCapacidadGE1.Add(ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_01"));
                                            listaCapacidadGE2.Add(ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_02"));
                                            listaDisponibilidadPlant.Add((ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_01") + ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "totalPmuEng_02")));
                                        }

                                        diccionarioGraficos["report1-energ-mensual-eg1"] = listaCapacidadGE1;
                                        diccionarioGraficos["report1-energ-mensual-eg2"] = listaCapacidadGE2;
                                        diccionarioGraficos["report1-energ-mensual-plant"] = listaDisponibilidadPlant;

                                        decimal[] valores = new decimal[12] { 6949.70m, 6501.34m, 6949.70m, 6725.52m, 6949.70m, 6725.52m, 6949.70m, 6949.70m, 6725.52m, 6949.70m, 6725.52m, 6949.70m };
                                        decimal[] valores2 = new decimal[12] { 13899.41m, 13002.67m, 13899.41m, 13451.04m, 13899.41m, 13451.04m, 13899.41m, 13899.41m, 13451.04m, 13899.41m, 13451.04m, 13899.41m };

                                        diccionarioGraficos["report1-energ-mensual-objetivo"] = valores.ToList();//listaDisponibilidadPlant;
                                        diccionarioGraficos["report1-energ-mensual-objetivo-plant"] = valores2.ToList();//listaDisponibilidadPlant;
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div style="padding: 0 0 0 10vh;">
                            <div style="width:130vh;height: 40vh;">
                                <div class="card shadow" style="width: 100%;">
                                    <!-- Card Header - Dropdown -->
                                    <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                        <h6 class="m-0 font-weight-bold text-primary" id='titulo-head-rate-ge1'>ENERGÍA EG01 MWH</h6>
                                    </div>
                                    <!-- Card Body -->
                                    <div class="card-body" style="height: 38vh;">
                                        <div class="chart-area">
                                            <div class="chartjs-size-monitor-shrink">
                                                <div></div>
                                            </div>
                                            <div id='graf-energ-mensual-ge1'></div>
                                            <!--   <canvas id='graf-energ-mensual-ge1' style="display: block;  height: 140px !important;   width: 50%;"></canvas> -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div style="padding: 0 0 0 10vh;">
                            <div style="width:130vh;height: 40vh;">
                                <div class="card shadow" style="width: 100%;">
                                    <!-- Card Header - Dropdown -->
                                    <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                        <h6 class="m-0 font-weight-bold text-primary" id='titulo-head-rate-ge2'>ENERGÍA EG02 MWH</h6>
                                    </div>
                                    <!-- Card Body -->
                                    <div class="card-body" style="height: 38vh;">
                                        <div class="chart-area">
                                            <div class="chartjs-size-monitor-shrink">
                                                <div></div>
                                            </div>
                                            <div id='graf-energ-mensual-ge2'></div>
                                            <!--  <canvas id='graf-energ-mensual-ge2' style="display: block;  height: 140px !important;   width: 50%;"></canvas>-->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div style="padding: 0 0 0 10vh;">
                            <div style="width:130vh;height: 40vh;">
                                <div class="card shadow" style="width: 100%;">
                                    <!-- Card Header - Dropdown -->
                                    <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                        <h6 class="m-0 font-weight-bold text-primary" id='titulo-head-rate-plant'>PLANT MWH</h6>
                                    </div>
                                    <!-- Card Body -->
                                    <div class="card-body" style="height: 38vh;">
                                        <div class="chart-area">
                                            <div class="chartjs-size-monitor-shrink">
                                                <div></div>
                                            </div>
                                            <div id='graf-energ-mensual-plant'>
                                                </canvas>
                                                <!--<canvas id='graf-energ-mensual-plant' style="display: block;  height: 140px !important;   width: 50%;"></canvas>-->
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div style="display:flex;padding: 0 0 10vh 0;">
                        <div>
                            <table style="width:80vh;" class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th rowspan="2"></th>
                                        <th colspan="3">DISPONIBILIDAD EQUIVALENTE</th>
                                    </tr>
                                    <tr>
                                        <th>EG01</th>
                                        <th>EG02</th>
                                        <th>PLANT</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        listaCapacidadGE1 = new List<decimal>();
                                        listaCapacidadGE2 = new List<decimal>();
                                        listaCapacidadPlant = new List<decimal>();

                                        diccionarioGraficos["report1-disp-equi-eg1"] = new List<decimal>();
                                        diccionarioGraficos["report1-disp-equi-eg2"] = new List<decimal>();
                                        diccionarioGraficos["report1-disp-equi-plant"] = new List<decimal>();

                                        foreach (var meses in spanishMonthNames)
                                        {
                                            <tr>
                                                <td>@meses</td>
                                                <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "factorDisponibilidadEquivalente")).ToString("P2"))</td>
                                                <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE2, meses.ToLower(), "factorDisponibilidadEquivalente")).ToString("P2"))</td>
                                                <td>@valoresListadoReport1[meses.ToLower()]["totalDisponibilidadEquivalente"].ToString("P2")</td>
                                            </tr>

                                            if (meses.ToLower().Equals("diciembre"))
                                            {
                                                @* discrepancia entre los datos de  LUREN Y PEDREGAL
                                    <tr>
                                    <td>YTD</td>
                                    <td>@(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_factorDisponibilidadEquivalente"))</td>
                                    <td>@ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg2-ydt_factorDisponibilidadEquivalente")</td>
                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresStringProduccionPorMes,meses.ToLower(),"eg1-ydt_factorCapacidadProducción")).ToString())</td>
                                    <td>@(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "factorDisponibilidad")))</td>
                                    <td></td>
                                    </tr>
                                    *@
                                            }

                                            listaCapacidadGE1.Add(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE1, meses.ToLower(), "factorDisponibilidadEquivalente")) * 100);
                                            listaCapacidadGE2.Add(decimal.Parse(ValidarDatoEnDiccionarioString(valoresListadoGE2, meses.ToLower(), "factorDisponibilidadEquivalente")) * 100);
                                            listaCapacidadPlant.Add(valoresListadoReport1[meses.ToLower()]["totalDisponibilidadEquivalente"] * 100);
                                        }

                                        diccionarioGraficos["report1-disp-equi-eg1"] = listaCapacidadGE1;
                                        diccionarioGraficos["report1-disp-equi-eg2"] = listaCapacidadGE2;
                                        diccionarioGraficos["report1-disp-equi-plant"] = listaCapacidadPlant;
                                        // Inicializa el array de valores decimales
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div style="padding: 0 0 0 10vh;">
                            <div style="width:130vh;height: 40vh;">
                                <div class="card shadow" style="width: 100%;">
                                    <!-- Card Header - Dropdown -->
                                    <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                        <h6 class="m-0 font-weight-bold text-primary" id='titulo-disp-equi-ge1'>EG01</h6>
                                    </div>
                                    <!-- Card Body -->
                                    <div class="card-body" style="height: 38vh;">
                                        <div class="chart-area">
                                            <div class="chartjs-size-monitor-shrink">
                                                <div></div>
                                            </div>
                                            <div id='graf-disp-equi-ge1'></div>
                                            <!-- <canvas id='graf-disp-equi-ge1' style="display: block;  height: 140px !important;   width: 50%;"></canvas> -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div style="padding: 0 0 0 10vh;">
                            <div style="width:130vh;height: 40vh;">
                                <div class="card shadow" style="width: 100%;">
                                    <!-- Card Header - Dropdown -->
                                    <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                        <h6 class="m-0 font-weight-bold text-primary" id='titulo-disp-equi-ge2'>EG02</h6>
                                    </div>
                                    <!-- Card Body -->
                                    <div class="card-body" style="height: 38vh;">
                                        <div class="chart-area">
                                            <div class="chartjs-size-monitor-shrink">
                                                <div></div>
                                            </div>
                                            <div id='graf-disp-equi-ge2'></div>
                                            <!--    <canvas id='graf-disp-equi-ge2' style="display: block;  height: 140px !important;   width: 50%;"></canvas>-->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div style="padding: 0 0 0 10vh;">
                            <div style="width:130vh;height: 40vh;">
                                <div class="card shadow" style="width: 100%;">
                                    <!-- Card Header - Dropdown -->
                                    <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                        <h6 class="m-0 font-weight-bold text-primary" id='titulo-disp-equi-plant'>PLANT</h6>
                                    </div>
                                    <!-- Card Body -->
                                    <div class="card-body" style="height: 38vh;">
                                        <div class="chart-area">
                                            <div class="chartjs-size-monitor-shrink">
                                                <div></div>
                                            </div>
                                            <div id='graf-disp-equi-plant'></div>
                                            <!-- <canvas id='graf-disp-equi-plant' style="display: block;  height: 140px !important;   width: 50%;"></canvas>-->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

            </div>

            <div>
                <div id="contenedor-Report2">
                    <div style="overflow-x: scroll; overflow-y: hidden;">
                        <div>
                            <div class="contenedor-Report2-detalles">
                                <div class="contenedor-Report2-detalles-titulo">
                                    <div class="tituloProduccion">&nbsp;</div>
                                    <div class="tituloProduccion">Energía exportada MWh</div>
                                    <div class="tituloProduccion">Horas de operación EG01</div>
                                    <div class="tituloProduccion">Horas de operación EG02</div>
                                    <div class="tituloProduccion">Consumo de gas Sm3</div>
                                    <div class="tituloProduccion">Consumo de aceite gr/kWh</div>
                                </div>
                                @{
                                    List<decimal> rp2EnergíaExportadaMWh = new List<decimal>();
                                    List<decimal> rp2HorasOperaciónEG01 = new List<decimal>();
                                    List<decimal> rp2HorasOperaciónEG02 = new List<decimal>();
                                    List<decimal> rp2ConsumoGas = new List<decimal>();
                                    List<decimal> rp2ConsumoAceite = new List<decimal>();

                                    diccionarioGraficos["report2-energ-exp-mwh"] = new List<decimal>();
                                    diccionarioGraficos["report2-hrs-op-eg1"] = new List<decimal>();
                                    diccionarioGraficos["report2-hrs-op-eg2"] = new List<decimal>();
                                    diccionarioGraficos["report2-cons-gas"] = new List<decimal>();
                                    diccionarioGraficos["report2-cons-aceite"] = new List<decimal>();

                                    decimal energiaExportadaAcumuladoRp2 = 0;
                                    decimal horasOp1AculadasRp2 = 0;
                                    decimal horasOp2AculadasRp2 = 0;
                                    decimal consumoGasAcumuladoRp2 = 0;
                                    decimal valorAceiteConsumoTotalRp2 = 0;

                                    foreach (var meses in spanishMonthNames)
                                    {
                                        <div style="text-align: center;" class="contenedor-Report2-detalles-datos">
                                            <div class="tituloProduccion">@meses</div>
                                            <div>@(ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "energiaExportadaAcumulado").ToString("N2"))</div>
                                            <div>@(ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "horasOp1Aculadas").ToString("N2"))</div>
                                            <div>@(ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "horasOp2Aculadas").ToString("N2"))</div>
                                            <div>@(ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "consumoGasAcumulado").ToString("N2"))</div>
                                            <div>@(ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "valorAceiteConsumoTotal").ToString("N2"))</div>
                                        </div>


                                        energiaExportadaAcumuladoRp2 = ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "energiaExportadaAcumulado") + energiaExportadaAcumuladoRp2;
                                        horasOp1AculadasRp2 = ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "horasOp1Aculadas") + horasOp1AculadasRp2;
                                        horasOp2AculadasRp2 = ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "horasOp2Aculadas") + horasOp2AculadasRp2;
                                        consumoGasAcumuladoRp2 = ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "consumoGasAcumulado") + consumoGasAcumuladoRp2;
                                        valorAceiteConsumoTotalRp2 = ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "valorAceiteConsumoTotal") + valorAceiteConsumoTotalRp2;

                                        rp2EnergíaExportadaMWh.Add(ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "energiaExportadaAcumulado"));
                                        rp2HorasOperaciónEG01.Add(ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "horasOp1Aculadas"));
                                        rp2HorasOperaciónEG02.Add(ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "horasOp2Aculadas"));
                                        rp2ConsumoGas.Add(ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "consumoGasAcumulado"));
                                        rp2ConsumoAceite.Add(ValidarDatoEnDiccionario(valoresPorMes, meses.ToLower(), "valorAceiteConsumoTotal"));

                                    }
                                    <div style="text-align: center;" class="contenedor-Report2-detalles-datos">
                                        <div class="tituloProduccion">YTD</div>
                                        <div>@(energiaExportadaAcumuladoRp2.ToString("N2"))</div>
                                        <div>@(horasOp1AculadasRp2.ToString("N2"))</div>
                                        <div>@(horasOp2AculadasRp2.ToString("N2"))</div>
                                        <div>@(consumoGasAcumuladoRp2.ToString("N2"))</div>
                                        <div>@(valorAceiteConsumoTotalRp2.ToString("N2"))</div>
                                    </div>

                                    rp2EnergíaExportadaMWh.Add(energiaExportadaAcumuladoRp2);
                                    rp2HorasOperaciónEG01.Add(horasOp1AculadasRp2);
                                    rp2HorasOperaciónEG02.Add(horasOp2AculadasRp2);
                                    rp2ConsumoGas.Add(consumoGasAcumuladoRp2);
                                    rp2ConsumoAceite.Add(valorAceiteConsumoTotalRp2);


                                    diccionarioGraficos["report2-energ-exp-mwh"] = rp2EnergíaExportadaMWh;
                                    diccionarioGraficos["report2-hrs-op-eg1"] = rp2HorasOperaciónEG01;
                                    diccionarioGraficos["report2-hrs-op-eg2"] = rp2HorasOperaciónEG02;
                                    diccionarioGraficos["report2-cons-gas"] = rp2ConsumoGas;
                                    diccionarioGraficos["report2-cons-aceite"] = rp2ConsumoAceite;
                                }
                            </div>
                        </div>


                        <div>
                            <div style="display: flex;padding: 10vh 0 0 0;">
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:130vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='rp2-energ-exp-titulo'>Energía exportada MWh</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id="rp2-energ-exp-graf"></div>
                                                    <!--  <canvas id='rp2-energ-exp-graf' style="display: block;  height: 140px !important;   width: 50%;"></canvas>
                                                    -->
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:130vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='rp2-cons-gas-titulo'>Consumo de gas Sm3</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='rp2-cons-gas-graf'></div>
                                                    <!-- <canvas id='rp2-cons-gas-graf' style="display: block;  height: 140px !important;   width: 50%;"></canvas>-->
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:130vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='rp2-cons-aceite-titulo'>Consumo de aceite gr/kWh</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='rp2-cons-aceite-graf'></div>
                                                    <!-- <canvas id='rp2-cons-aceite-graf' style="display: block;  height: 140px !important;   width: 50%;"></canvas>-->
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div style="display: flex;padding: 10vh 0 10vh 0;">
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:130vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='rp2-horas-ope-ge1-titulo'>Horas de operación EG01</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='rp2-horas-ope-ge1-graf'></div>
                                                    <!--  <canvas id='rp2-horas-ope-ge1-graf' style="display: block;  height: 140px !important;   width: 50%;"></canvas>-->
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:130vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='rp2-horas-ope-ge2-titulo'>Horas de operación EG02</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='rp2-horas-ope-ge2-graf'></div>
                                                    <!--   <canvas id='rp2-horas-ope-ge2-graf' style="display: block;  height: 140px !important;   width: 50%;"></canvas>-->
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div>
                <div id="contenedor-Oil">
                    <div style="display:flex;">
                        @{
                            <div class="contenedor-detalle-numeracion-oil detalle-item-oil">
                                <div class="tituloProduccion" style="height:3vh !important;padding:0;">&nbsp;</div>
                                <div style="height:3vh !important;padding:0;">Item</div>
                                <div>1</div>
                                <div style="height:9vh !important;">2</div>
                                <div style="height:9vh !important;">3</div>
                                <div style="height:9vh !important;">4</div>
                                <div style="height:9vh !important;">5</div>
                                <div style="height:9vh !important;">6</div>
                                <div>7</div>
                                <div>8</div>
                                <div>9</div>
                                <div>10</div>
                                <div>11</div>
                                <div>12</div>
                                <div>13</div>
                                <div>14</div>
                                <div>15</div>
                            </div>
                            <div class="contenedor-detalle-titulo-oil">
                                <div class="tituloProduccion">Horas de operación EG01/EG02</div>
                                <div class="tituloProduccion">Analisis</div>
                                <div>EG1 @(datosCabecera["Vis-100"].Detalle)</div>
                                <div>EG2 @(datosCabecera["Vis-100"].Detalle)</div>
                                <div class="fondo-detalle-maximo-oil">@(datosCabecera["OpPer-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-limite-oil">@(datosCabecera["Lim-RamOil"].Detalle)</div>
                                <div>EG1 @(datosCabecera["Ox-RamOil"].Detalle)</div>
                                <div>EG2 @(datosCabecera["Ox-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-maximo-oil">@(datosCabecera["Max-Abs-RamOil"].Detalle)</div>
                                <div>EG1 @(datosCabecera["Nit-Abs-RamOil"].Detalle)</div>
                                <div>EG2 @(datosCabecera["Nit-Abs-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-maximo-oil">@(datosCabecera["Max-Abs-RamOil"].Detalle)</div>
                                <div>EG1 @(datosCabecera["Bas-Mg-RamOil"].Detalle)</div>
                                <div>EG2 @(datosCabecera["Bas-Mg-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-maximo-oil">@(datosCabecera["Max-Abs-RamOil"].Detalle)</div>
                                <div>EG1 @(datosCabecera["Ac-Mg-RamOil"].Detalle)</div>
                                <div>EG2 @(datosCabecera["Ac-Mg-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-maximo-oil">@(datosCabecera["Max-Mg-RamOil"].Detalle)</div>
                                <div>EG1 @(datosCabecera["Ag-RamOil"].Detalle)</div>
                                <div>EG2 @(datosCabecera["Ag-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-maximo-oil">@(datosCabecera["Max-RamOil"].Detalle)</div>
                                <div>EG1 @(datosCabecera["Sil-ppm-RamOil"].Detalle)</div>
                                <div>EG2 @(datosCabecera["Sil-ppm-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-maximo-oil">@(datosCabecera["Lim-Op-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-limite-oil">@(datosCabecera["Par-Nor-RamOil"].Detalle)</div>
                                <div>EG1 @(datosCabecera["Sod-Ppm-RamOil"].Detalle)</div>
                                <div>EG2 @(datosCabecera["Sod-Ppm-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-maximo-oil">@(datosCabecera["Lim-Op-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-limite-oil">@(datosCabecera["Par-Nor-RamOil"].Detalle)</div>
                                <div>EG1 @(datosCabecera["Al-ppm-RamOil"].Detalle)</div>
                                <div>EG2 @(datosCabecera["Al-ppm-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-maximo-oil">@(datosCabecera["Lim-Op-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-limite-oil">@(datosCabecera["Par-Nor-RamOil"].Detalle)</div>
                                <div>EG1 @(datosCabecera["Cob-ppm-RamOil"].Detalle)</div>
                                <div>EG2 @(datosCabecera["Cob-ppm-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-maximo-oil">@(datosCabecera["Lim-Op-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-limite-oil">@(datosCabecera["Par-Nor-RamOil"].Detalle)</div>
                                <div>EG1 @(datosCabecera["Cro-ppm-RamOil"].Detalle)</div>
                                <div>EG2 @(datosCabecera["Cro-ppm-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-maximo-oil">@(datosCabecera["Lim-Op-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-limite-oil">@(datosCabecera["Par-Nor-RamOil"].Detalle)</div>
                                <div>EG1 @(datosCabecera["Hierr-ppm-RamOil"].Detalle)</div>
                                <div>EG2 @(datosCabecera["Hierr-ppm-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-maximo-oil">@(datosCabecera["Lim-Op-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-limite-oil">@(datosCabecera["Par-Nor-RamOil"].Detalle)</div>
                                <div>EG1 @(datosCabecera["Plo-ppm-RamOil"].Detalle)</div>
                                <div>EG2 @(datosCabecera["Plo-ppm-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-maximo-oil">@(datosCabecera["Lim-Op-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-limite-oil">@(datosCabecera["Par-Nor-RamOil"].Detalle)</div>
                                <div>EG1 @(datosCabecera["Est-ppm-RamOil"].Detalle)</div>
                                <div>EG2 @(datosCabecera["Est-ppm-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-maximo-oil">@(datosCabecera["Lim-Op-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-limite-oil">@(datosCabecera["Par-Nor-RamOil"].Detalle)</div>
                                <div>EG1 @(datosCabecera["Niq-ppm-RamOil"].Detalle)</div>
                                <div>EG2 @(datosCabecera["Niq-ppm-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-maximo-oil">@(datosCabecera["Lim-Op-RamOil"].Detalle)</div>
                                <div class="fondo-detalle-limite-oil">@(datosCabecera["Par-Nor-RamOil"].Detalle)</div>
                            </div>

                            List<string> fechasOilGraph = new List<string>();
                            string ultimaFechaOil = string.Empty;

                            foreach (var itemFecha in datosVistaOil.Values)
                            {
                                foreach (var itemDatos in itemFecha)
                                {
                                    ultimaFechaOil = itemDatos.Key.ToString("dd/MM/yyyy");
                                    fechasOilGraph.Add(ultimaFechaOil);
                                    <div fecha-registro="@(itemDatos.Key.ToString("dd/MM/yyyy"))" class="contenedor-detalle-oil @(ultimaFechaOil != DateTime.Now.ToString("dd/MM/yyyy")? "div-desactivado" : "") ">
                                        <div class="tituloProduccion"><input style="background:transparent !important;text-align: center; font-weight: bold;" posicion="-1" class-name="@(datosCabecera["hrs-opeR-RamOil"].IdTipoEngine)" value="@($"{itemDatos.Value[-1][1]["hrs-opeR-RamOil"].Detalle}/{itemDatos.Value[-1][2]["hrs-opeR-RamOil"].Detalle}")"></div>
                                        <div class="tituloProduccion"><input style="background:transparent !important;text-align: center; font-weight: bold;" posicion="0" class-name="@(datosCabecera["fecha-RamOil"].IdTipoEngine)" value="@(itemDatos.Key.ToString("dd/MM/yyyy"))"></div>
                                        <div><input posicion="1" numeroGe="1" class-name="@(datosCabecera["Vis-100-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[1][1]["Vis-100-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="1" numeroGe="2" class-name="@(datosCabecera["Vis-100-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[1][2]["Vis-100-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-maximo-oil"><input posicion="1" class-name="@(datosCabecera["OpPer-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[1][0]["OpPer-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-limite-oil"><input posicion="1" class-name="@(datosCabecera["Lim-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[1][0]["Lim-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="2" numeroGe="1" class-name="@(datosCabecera["Ox-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[2][1]["Ox-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="2" numeroGe="2" class-name="@(datosCabecera["Ox-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[2][2]["Ox-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-maximo-oil"><input posicion="2" class-name="@(datosCabecera["Max-Abs-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[2][0]["Max-Abs-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="3" numeroGe="1" class-name="@(datosCabecera["Nit-Abs-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[3][1]["Nit-Abs-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="3" numeroGe="2" class-name="@(datosCabecera["Nit-Abs-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[3][2]["Nit-Abs-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-maximo-oil"><input posicion="3" class-name="@(datosCabecera["Max-Abs-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[3][0]["Max-Abs-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="4" numeroGe="1" class-name="@(datosCabecera["Bas-Mg-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[4][1]["Bas-Mg-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="4" numeroGe="2" class-name="@(datosCabecera["Bas-Mg-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[4][2]["Bas-Mg-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-maximo-oil"><input posicion="4" class-name="@(datosCabecera["Max-Abs-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[4][0]["Max-Abs-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="5" numeroGe="1" class-name="@(datosCabecera["Ac-Mg-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[5][1]["Ac-Mg-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="5" numeroGe="2" class-name="@(datosCabecera["Ac-Mg-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[5][2]["Ac-Mg-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-maximo-oil"><input posicion="5" class-name="@(datosCabecera["Max-Mg-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[5][0]["Max-Mg-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="6" numeroGe="1" class-name="@(datosCabecera["Ag-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[6][1]["Ag-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="6" numeroGe="2" class-name="@(datosCabecera["Ag-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[6][2]["Ag-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-maximo-oil"><input posicion="6" class-name="@(datosCabecera["Max-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[6][0]["Max-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="7" numeroGe="1" class-name="@(datosCabecera["Sil-ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[7][1]["Sil-ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="7" numeroGe="2" class-name="@(datosCabecera["Sil-ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[7][2]["Sil-ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-maximo-oil"><input posicion="7" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[7][0]["Lim-Op-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-limite-oil"><input posicion="7" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[7][0]["Par-Nor-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="8" numeroGe="1" class-name="@(datosCabecera["Sod-Ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[8][1]["Sod-Ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="8" numeroGe="2" class-name="@(datosCabecera["Sod-Ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[8][2]["Sod-Ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-maximo-oil"><input posicion="8" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[8][0]["Lim-Op-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-limite-oil"><input posicion="8" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[8][0]["Par-Nor-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="9" numeroGe="1" class-name="@(datosCabecera["Al-ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[9][1]["Al-ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="9" numeroGe="2" class-name="@(datosCabecera["Al-ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[9][2]["Al-ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-maximo-oil"><input posicion="9" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[9][0]["Lim-Op-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-limite-oil"><input posicion="9" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[9][0]["Par-Nor-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="10" numeroGe="1" class-name="@(datosCabecera["Cob-ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[10][1]["Cob-ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="10" numeroGe="2" class-name="@(datosCabecera["Cob-ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[10][2]["Cob-ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-maximo-oil"><input posicion="10" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[10][0]["Lim-Op-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-limite-oil"><input posicion="10" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[10][0]["Par-Nor-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="11" numeroGe="1" class-name="@(datosCabecera["Cro-ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[11][1]["Cro-ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="11" numeroGe="2" class-name="@(datosCabecera["Cro-ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[11][2]["Cro-ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-maximo-oil"><input posicion="11" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[11][0]["Lim-Op-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-limite-oil"><input posicion="11" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[11][0]["Par-Nor-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="12" numeroGe="1" class-name="@(datosCabecera["Hierr-ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[12][1]["Hierr-ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="12" numeroGe="2" class-name="@(datosCabecera["Hierr-ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[12][2]["Hierr-ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-maximo-oil"><input posicion="12" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[12][0]["Lim-Op-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-limite-oil"><input posicion="12" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[12][0]["Par-Nor-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="13" numeroGe="1" class-name="@(datosCabecera["Plo-ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[13][1]["Plo-ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="13" numeroGe="2" class-name="@(datosCabecera["Plo-ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[13][2]["Plo-ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-maximo-oil"><input posicion="13" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[13][0]["Lim-Op-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-limite-oil"><input posicion="13" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[13][0]["Par-Nor-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="14" numeroGe="1" class-name="@(datosCabecera["Est-ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[14][1]["Est-ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="14" numeroGe="2" class-name="@(datosCabecera["Est-ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[14][2]["Est-ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-maximo-oil"><input posicion="14" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[14][0]["Lim-Op-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-limite-oil"><input posicion="14" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[14][0]["Par-Nor-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="15" numeroGe="1" class-name="@(datosCabecera["Niq-ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[15][1]["Niq-ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div><input posicion="15" numeroGe="2" class-name="@(datosCabecera["Niq-ppm-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[15][2]["Niq-ppm-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-maximo-oil"><input posicion="15" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[15][0]["Lim-Op-RamOil"].Detalle.ToString("N4"))"></div>
                                        <div class="fondo-detalle-limite-oil"><input posicion="15" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)" value="@(itemDatos.Value[15][0]["Par-Nor-RamOil"].Detalle.ToString("N4"))"></div>
                                    </div>
                                }
                            }
                            if (ultimaFechaOil != DateTime.Now.ToString("dd/MM/yyyy"))
                            {
                                <div fecha-registro="@(DateTime.Now.ToString("dd/MM/yyyy"))" class="contenedor-detalle-oil">
                                    <div class="tituloProduccion"><input posicion="-1" class-name="@(datosCabecera["hrs-opeR-RamOil"].IdTipoEngine)"></div>
                                    <div class="tituloProduccion"><input posicion="0" class-name="@(datosCabecera["fecha-RamOil"].IdTipoEngine)" value="@(DateTime.Now.ToString("dd/MM/yyyy"))"></div>
                                    <div><input posicion="1" numeroGe="1" class-name="@(datosCabecera["Vis-100-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="1" numeroGe="2" class-name="@(datosCabecera["Vis-100-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="1" class-name="@(datosCabecera["OpPer-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="1" class-name="@(datosCabecera["Lim-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="2" numeroGe="1" class-name="@(datosCabecera["Ox-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="2" numeroGe="2" class-name="@(datosCabecera["Ox-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="2" class-name="@(datosCabecera["Max-Abs-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="3" numeroGe="1" class-name="@(datosCabecera["Nit-Abs-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="3" numeroGe="2" class-name="@(datosCabecera["Nit-Abs-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="3" class-name="@(datosCabecera["Max-Abs-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="4" numeroGe="1" class-name="@(datosCabecera["Bas-Mg-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="4" numeroGe="2" class-name="@(datosCabecera["Bas-Mg-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="4" class-name="@(datosCabecera["Max-Abs-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="5" numeroGe="1" class-name="@(datosCabecera["Ac-Mg-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="5" numeroGe="2" class-name="@(datosCabecera["Ac-Mg-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="5" class-name="@(datosCabecera["Max-Mg-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="6" numeroGe="1" class-name="@(datosCabecera["Ag-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="6" numeroGe="2" class-name="@(datosCabecera["Ag-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="6" class-name="@(datosCabecera["Max-RamOil"].IdTipoEngine)"></div>v>
                                    <div><input posicion="7" numeroGe="1" class-name="@(datosCabecera["Sil-ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="7" numeroGe="2" class-name="@(datosCabecera["Sil-ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="7" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="7" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="8" numeroGe="1" class-name="@(datosCabecera["Sod-Ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="8" numeroGe="2" class-name="@(datosCabecera["Sod-Ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="8" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="8" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="9" numeroGe="1" class-name="@(datosCabecera["Al-ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="9" numeroGe="2" class-name="@(datosCabecera["Al-ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="9" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="9" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="10" numeroGe="1" class-name="@(datosCabecera["Cob-ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="10" numeroGe="2" class-name="@(datosCabecera["Cob-ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="10" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="10" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="11" numeroGe="1" class-name="@(datosCabecera["Cro-ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="11" numeroGe="2" class-name="@(datosCabecera["Cro-ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="11" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="11" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="12" numeroGe="1" class-name="@(datosCabecera["Hierr-ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="12" numeroGe="2" class-name="@(datosCabecera["Hierr-ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="12" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="12" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="13" numeroGe="1" class-name="@(datosCabecera["Plo-ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="13" numeroGe="2" class-name="@(datosCabecera["Plo-ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="13" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="13" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="14" numeroGe="1" class-name="@(datosCabecera["Est-ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="14" numeroGe="2" class-name="@(datosCabecera["Est-ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="14" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="14" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="15" numeroGe="1" class-name="@(datosCabecera["Niq-ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="15" numeroGe="2" class-name="@(datosCabecera["Niq-ppm-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="15" class-name="@(datosCabecera["Lim-Op-RamOil"].IdTipoEngine)"></div>
                                    <div><input posicion="15" class-name="@(datosCabecera["Par-Nor-RamOil"].IdTipoEngine)"></div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
            <div>
                <div id="contenedor-OilGraph">
                    <div style="overflow-x: scroll; overflow-y: hidden;">
                        <div>
                            <div style="display: flex;padding: 10vh 0 0 0;">
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:90vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='oil-viscosidad-titulo'>1. VISCOCIDAD (%)</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='oil-viscocidad-graf'></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:90vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='oil-oxidacion-titulo'>2. OXIDACIÓN (abs/cm)</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='oil-oxidacion-graf'></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:90vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='oil-nitracion-titulo'>3. NITRACIÓN (abs/cm)</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='oil-nitracion-graf'></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div style="display: flex;padding: 10vh 0 0 0;">
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:90vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='oil-basico-titulo'>4. N° BÁSICO (mgKOH/g)</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='oil-basico-graf'></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:90vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='oil-acido-titulo'>5. N° ÁCIDO (mgKOH/g)</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='oil-acido-graf'></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:90vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='oil-agua-titulo'>6. % AGUA</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='oil-agua-graf'></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div style="display: flex;padding: 10vh 0 0 0;">
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:90vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='oil-silicio-titulo'>7. SILICIO (ppm)</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='oil-silicio-graf'></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:90vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='oil-sodio-titulo'>8. SODIO (ppm)</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='oil-sodio-graf'></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:90vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='oil-aluminio-titulo'>9. ALUMINIO (ppm)</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='oil-aluminio-graf'></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div style="display: flex;padding: 10vh 0 0 0;">
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:90vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='oil-cobre-titulo'>10. COBRE (ppm)</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='oil-cobre-graf'></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:90vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='oil-cromo-titulo'>11. CROMO (ppm)</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='oil-cromo-graf'></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:90vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='oil-hierro-titulo'>12. HIERRO (ppm)</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='oil-hierro-graf'></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div style="display: flex;padding: 10vh 0 0 0;">
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:90vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='oil-plomo-titulo'>13. PLOMO (ppm)</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='oil-plomo-graf'></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:90vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='oil-estaño-titulo'>14. ESTAÑO (ppm)</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='oil-estaño-graf'></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="padding: 0 0 0 10vh;">
                                    <div style="width:90vh;height: 40vh;">
                                        <div class="card shadow" style="width: 100%;">
                                            <!-- Card Header - Dropdown -->
                                            <div style="place-self: center;" class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                                <h6 class="m-0 font-weight-bold text-primary" id='oil-niquel-titulo'>15. NIQUEL (ppm)</h6>
                                            </div>
                                            <!-- Card Body -->
                                            <div class="card-body" style="height: 38vh;">
                                                <div class="chart-area">
                                                    <div class="chartjs-size-monitor-shrink">
                                                        <div></div>
                                                    </div>
                                                    <div id='oil-niquel-graf'></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div>
                <div id="contenedor-DeretingLoad">
                    @{

                        <h4>Derating Load CGD </h4>
                        foreach (var mes in spanishMonthNames)
                        {
                            <table class="table table-bordered" style="margin: 0;">
                                <thead>
                                    <tr>
                                        <th style="    width: 19vh !important;">@(mes.ToUpper())</th>
                                        <th>Inicio</th>
                                        <th>Fin</th>
                                        <th>Horas</th>
                                        <th>Carga</th>
                                        <th>Nominal</th>
                                        <th>Horas equivalentes de reduccion</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <th>EG1</th>
                                        <td><input></td>
                                        <td><input></td>
                                        <td><input value="00:00:00"></td>
                                        <td><input value="9.341"></td>
                                        <td><input value="9.341"></td>
                                        <td><input value="00:00:00"></td>
                                    </tr>
                                    <tr>
                                        <th>EG2</th>
                                        <td><input></td>
                                        <td><input></td>
                                        <td><input value="00:00:00"></td>
                                        <td><input value="9.341"></td>
                                        <td><input value="9.341"></td>
                                        <td><input value="00:00:00"></td>
                                    </tr>
                                </tbody>
                            </table>
                        }
                    }

                </div>
            </div>
        </div>
    </div>
</div>


<!-- Incluye ApexCharts desde el CDN -->
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<!-- Incluye dom-to-image desde el CDN -->
<script src="https://cdn.jsdelivr.net/npm/dom-to-image"></script>

<script>

    function obtenerdatosOil() {
        var datos = [];
        var dato = {};
        var contenedores = document.querySelectorAll('.contenedor-detalle-oil');
        contenedores.forEach(function (contenedor) {

            var fechaRegistro = contenedor.getAttribute('fecha-registro');

            if (fechaRegistro === obtenerFecha("fechaVista")) {
                contenedor.querySelectorAll('div').forEach(function (divInterno) {
                    dato = {};
                    var input = divInterno.querySelector('input');
                    if (input) {
                        var nombreClase = input.getAttribute('class-name');
                        var numeroGe = input.getAttribute('numeroGe');
                        var posicion = input.getAttribute('posicion');
                        var valorInput = isNaN(parseFloat(input.value)) ? 0 : parseFloat(input.value);;

                        if (posicion != 0) {
                            console.log("input.value:", input.value);

                            if (posicion == -1) {

                                dato["numeroGe"] = 1;
                                dato["detalle"] = isNaN(parseFloat(input.value.split('/')[0])) ? 0 : parseFloat(input.value.split('/')[0]);
                                dato["IdTipoEngine"] = nombreClase;
                                dato["fecha"] = obtenerFecha("fechaVista");
                                dato["posicion"] = parseFloat(posicion);
                                dato["IdReporteRamAceite"] = datosOperario.IdSitio + '-RAM-OIL-' + dato["IdTipoEngine"].substring(0, 3) + 1 + posicion + '_' + obtenerFecha("format");
                                dato['idReporteRam'] = datosOperario.IdSitio + "-RPT_RAM-" + obtenerFecha("format").substring(3);

                                datos.push(dato);
                                dato = {};
                                valorInput = isNaN(parseFloat(input.value.split('/')[1])) ? 0 : parseFloat(input.value.split('/')[1]);
                                numeroGe = 2
                            }

                            dato["numeroGe"] = isNaN(parseFloat(numeroGe)) ? 0 : parseFloat(numeroGe);
                            dato["detalle"] = valorInput;
                            dato["IdTipoEngine"] = nombreClase;
                            dato["fecha"] = obtenerFecha("fechaVista");
                            dato["posicion"] = parseFloat(posicion);
                            dato["IdReporteRamAceite"] = datosOperario.IdSitio + '-RAM-OIL-' + dato["IdTipoEngine"].substring(0, 3) + dato["numeroGe"] + posicion + '_' + obtenerFecha("format");
                            dato['idReporteRam'] = datosOperario.IdSitio + "-RPT_RAM-" + obtenerFecha("format").substring(3);

                            datos.push(dato);
                        }
                    }
                });
            }
        });
        return datos;
    }




    function modificarConsumoRam(valorServicio, input) {

        var serviciosAuxiliaresMes = document.getElementById("serviciosAuxiliares" + valorServicio);
        var consumoAuxiliaresMes = document.getElementById("consumoAuxiliares" + valorServicio);

        consumoAuxiliaresMes.innerText = (parseFloat(serviciosAuxiliaresMes.innerText) + parseFloat(input)).toFixed(2);

        var serviciosAuxiliaresGe1Mes = document.getElementById("serviciosAuxiliaresEG1" + valorServicio);
        var ProduccionGe1Mes = document.getElementById("produccionEG1" + valorServicio);
        var ProduccionGe2Mes = document.getElementById("produccionEG2" + valorServicio);
        var ProduccionTotalMes = document.getElementById("produccionTotal" + valorServicio);
        serviciosAuxiliaresGe1Mes.innerText = ((parseFloat(ProduccionGe1Mes.innerText) / parseFloat(ProduccionTotalMes.innerText)) * parseFloat(consumoAuxiliaresMes.innerText)).toFixed(2);

        var serviciosAuxiliaresGe2Mes = document.getElementById("serviciosAuxiliaresEG2" + valorServicio);
        serviciosAuxiliaresGe2Mes.innerText = ((parseFloat(ProduccionGe2Mes.innerText) / parseFloat(ProduccionTotalMes.innerText)) * parseFloat(consumoAuxiliaresMes.innerText)).toFixed(2);

        CrearCopiaProduccion(valorServicio, input);
    }

    function CrearCopiaProduccion(valorServicio, value) {
        var contenedorData = document.getElementById("contenedor-data-" + valorServicio);
        var contenedorDataCopia = document.getElementById("contenedor-data-copia" + valorServicio);

        contenedorDataCopia.innerHTML = "";

        contenedorDataCopia.innerHTML = contenedorData.innerHTML;

        var tituloMes = contenedorDataCopia.querySelector('#tituloMes-' + valorServicio);
        var inputCopia = contenedorDataCopia.querySelector('#input-Servicio-Auxiliares-' + valorServicio);

        inputCopia.value = value;
        if (tituloMes) {
            tituloMes.innerText = "YTD";
        }
    }

    function CrearCopiaEG(value) {
        var contenedorData = document.getElementById("contenedor-EG0" + value + "-" + valorServicio);
        var contenedorDataCopia = document.getElementById("contenedor-EG01-copia" + valorServicio);

        contenedorDataCopia.innerHTML = "";
        contenedorDataCopia.innerHTML = contenedorData.innerHTML;

        var tituloMes = contenedorDataCopia.querySelector('#tituloMes-EG01-' + valorServicio);

        if (tituloMes) {
            tituloMes.innerText = "YTD";
        }
    }

    document.addEventListener("DOMContentLoaded", function () {

        /******************* Report 1 *********************************/

        var valoresGraficosDecimales = @Html.Raw(JsonConvert.SerializeObject(diccionarioGraficos));
        var valoresMesesEspañol = @Html.Raw(JsonConvert.SerializeObject(spanishMonthNames));
        valoresMesesEspañol.push("YTD");

        var datosGraficosOil = @Html.Raw(JsonConvert.SerializeObject(datosGraficosOil));
        var fechasOilGraph = @Html.Raw(JsonConvert.SerializeObject(fechasOilGraph.ToArray()));

        console.log("datosGraficosOil : ", datosGraficosOil);
        console.log("fechasOilGraph : ", fechasOilGraph);
        console.log("Nit-Abs-RamOil 1 : ", datosGraficosOil[3][1]["Nit-Abs-RamOil"]);
        console.log("Nit-Abs-RamOil 2 : ", datosGraficosOil[3][2]["Nit-Abs-RamOil"]);
        console.log("Max-Abs-RamOil 0 : ", datosGraficosOil[3][0]["Max-Abs-RamOil"]);

        GenerarGraficoLineaTriple("oil-viscocidad-graf", fechasOilGraph, datosGraficosOil[1][1]["Vis-100-RamOil"], "EG1 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Vis-100"].Detalle))), datosGraficosOil[1][2]["Vis-100-RamOil"], "EG2 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Vis-100"].Detalle))), datosGraficosOil[1][0]["OpPer-RamOil"], @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Vis-100"].Detalle))));

        GenerarGraficoLineaTriple(
            "oil-oxidacion-graf",
            fechasOilGraph,
            datosGraficosOil[2][1]["Ox-RamOil"],
            "EG1 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Ox-RamOil"].Detalle))),
            datosGraficosOil[2][2]["Ox-RamOil"],
            "EG2 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Ox-RamOil"].Detalle))),
            datosGraficosOil[2][0]["Max-Abs-RamOil"],
    @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Max-Abs-RamOil"].Detalle)))
                            );

        GenerarGraficoLineaTriple(
            "oil-nitracion-graf",
            fechasOilGraph,
            datosGraficosOil[3][1]["Nit-Abs-RamOil"],
            "EG1 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Nit-Abs-RamOil"].Detalle))),
            datosGraficosOil[3][2]["Nit-Abs-RamOil"],
            "EG2 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Nit-Abs-RamOil"].Detalle))),
            datosGraficosOil[3][0]["Max-Abs-RamOil"],
    @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Max-Abs-RamOil"].Detalle)))
                        );

        GenerarGraficoLineaTriple(
            "oil-basico-graf",
            fechasOilGraph,
            datosGraficosOil[4][1]["Bas-Mg-RamOil"],
            "EG1 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Bas-Mg-RamOil"].Detalle))),
            datosGraficosOil[4][2]["Bas-Mg-RamOil"],
            "EG2 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Bas-Mg-RamOil"].Detalle))),
            datosGraficosOil[4][0]["Max-Abs-RamOil"],
    @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Max-Abs-RamOil"].Detalle)))
                        );


        GenerarGraficoLineaTriple(
            "oil-acido-graf",
            fechasOilGraph,
            datosGraficosOil[5][1]["Ac-Mg-RamOil"],
            "EG1 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Ac-Mg-RamOil"].Detalle))),
            datosGraficosOil[5][2]["Ac-Mg-RamOil"],
            "EG2 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Ac-Mg-RamOil"].Detalle))),
            datosGraficosOil[5][0]["Max-Mg-RamOil"],
    @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Max-Mg-RamOil"].Detalle)))
                        );

        GenerarGraficoLineaTriple(
            "oil-agua-graf",
            fechasOilGraph,
            datosGraficosOil[6][1]["Ag-RamOil"],
            "EG1 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Ag-RamOil"].Detalle))),
            datosGraficosOil[6][2]["Ag-RamOil"],
            "EG2 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Ag-RamOil"].Detalle))),
            datosGraficosOil[6][0]["Max-RamOil"],
    @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Max-Abs-RamOil"].Detalle)))
                        );

        GenerarGraficoLineaTriple(
            "oil-silicio-graf",
            fechasOilGraph,
            datosGraficosOil[7][1]["Sil-ppm-RamOil"],
            "EG1 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Sil-ppm-RamOil"].Detalle))),
            datosGraficosOil[7][2]["Sil-ppm-RamOil"],
            "EG2 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Sil-ppm-RamOil"].Detalle))),
            datosGraficosOil[7][0]["Lim-Op-RamOil"],
    @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Lim-Op-RamOil"].Detalle)))
                        );

        GenerarGraficoLineaTriple(
            "oil-sodio-graf",
            fechasOilGraph,
            datosGraficosOil[8][1]["Sod-Ppm-RamOil"],
            "EG1 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Sod-Ppm-RamOil"].Detalle))),
            datosGraficosOil[8][2]["Sod-Ppm-RamOil"],
            "EG2 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Sod-Ppm-RamOil"].Detalle))),
            datosGraficosOil[8][0]["Lim-Op-RamOil"],
    @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Lim-Op-RamOil"].Detalle)))
                        );

        GenerarGraficoLineaTriple(
            "oil-aluminio-graf",
            fechasOilGraph,
            datosGraficosOil[9][1]["Al-ppm-RamOil"],
            "EG1 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Al-ppm-RamOil"].Detalle))),
            datosGraficosOil[9][2]["Al-ppm-RamOil"],
            "EG2 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Al-ppm-RamOil"].Detalle))),
            datosGraficosOil[9][0]["Lim-Op-RamOil"],
    @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Lim-Op-RamOil"].Detalle)))
                        );

        GenerarGraficoLineaTriple(
            "oil-cobre-graf",
            fechasOilGraph,
            datosGraficosOil[10][1]["Cob-ppm-RamOil"],
            "EG1 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Al-ppm-RamOil"].Detalle))),
            datosGraficosOil[10][2]["Cob-ppm-RamOil"],
            "EG2 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Al-ppm-RamOil"].Detalle))),
            datosGraficosOil[10][0]["Lim-Op-RamOil"],
    @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Lim-Op-RamOil"].Detalle)))
                        );

        GenerarGraficoLineaTriple(
            "oil-cromo-graf",
            fechasOilGraph,
            datosGraficosOil[11][1]["Cro-ppm-RamOil"],
            "EG1 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Cob-ppm-RamOil"].Detalle))),
            datosGraficosOil[11][2]["Cro-ppm-RamOil"],
            "EG2 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Cob-ppm-RamOil"].Detalle))),
            datosGraficosOil[11][0]["Lim-Op-RamOil"],
    @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Lim-Op-RamOil"].Detalle)))
                        );

        GenerarGraficoLineaTriple(
            "oil-hierro-graf",
            fechasOilGraph,
            datosGraficosOil[12][1]["Hierr-ppm-RamOil"],
            "EG1 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Cro-ppm-RamOil"].Detalle))),
            datosGraficosOil[12][2]["Hierr-ppm-RamOil"],
            "EG2 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Cro-ppm-RamOil"].Detalle))),
            datosGraficosOil[12][0]["Lim-Op-RamOil"],
    @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Lim-Op-RamOil"].Detalle)))
                        );

        GenerarGraficoLineaTriple(
            "oil-plomo-graf",
            fechasOilGraph,
            datosGraficosOil[13][1]["Plo-ppm-RamOil"],
            "EG1 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Hierr-ppm-RamOil"].Detalle))),
            datosGraficosOil[13][2]["Plo-ppm-RamOil"],
            "EG2 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Hierr-ppm-RamOil"].Detalle))),
            datosGraficosOil[13][0]["Lim-Op-RamOil"],
    @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Lim-Op-RamOil"].Detalle)))
                        );

        GenerarGraficoLineaTriple(
            "oil-estaño-graf",
            fechasOilGraph,
            datosGraficosOil[14][1]["Est-ppm-RamOil"],
            "EG1 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Plo-ppm-RamOil"].Detalle))),
            datosGraficosOil[14][2]["Est-ppm-RamOil"],
            "EG2 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Plo-ppm-RamOil"].Detalle))),
            datosGraficosOil[14][0]["Lim-Op-RamOil"],
    @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Max-Abs-RamOil"].Detalle)))
                        );

        GenerarGraficoLineaTriple(
            "oil-niquel-graf",
            fechasOilGraph,
            datosGraficosOil[15][1]["Niq-ppm-RamOil"],
            "EG1 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Niq-ppm-RamOil"].Detalle))),
            datosGraficosOil[15][2]["Niq-ppm-RamOil"],
            "EG2 " + @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Niq-ppm-RamOil"].Detalle))),
            datosGraficosOil[15][0]["Lim-Op-RamOil"],
    @(Html.Raw(JsonConvert.SerializeObject(datosCabecera["Lim-Op-RamOil"].Detalle)))
                        );


        function GenerarGraficoLineaTriple(ctx, labels, datos1, leyenda1, datos2, leyenda2, datos3, leyenda3) {

            var options = {
                series: [{
                    name: leyenda1,
                    data: datos1
                },
                {
                    name: leyenda2,
                    data: datos2
                },
                {
                    name: leyenda3,
                    data: datos3
                }],
                chart: {
                    height: 280,
                    type: 'line',
                    zoom: {
                        enabled: false
                    }
                },
                dataLabels: {
                    enabled: false
                },
                stroke: {
                    curve: 'straight'
                },
                title: {
                    text: 'Product Trends by Month',
                    align: 'left'
                },
                grid: {
                    row: {
                        colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns
                        opacity: 0.5
                    },
                },
                xaxis: {
                    categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep'],
                }
            };


            var chart = new ApexCharts(document.querySelector("#" + ctx), options);
            chart.render();
        }






        function ObtenerGraficosReporte1() {

            GenerarGraficoDoble("graf-head-rate-ge1", valoresMesesEspañol, valoresGraficosDecimales["report1-energ-mensual-eg1"], valoresGraficosDecimales["report1-heat-rate-objetivo"], null);
            GenerarGraficoDoble("graf-head-rate-ge2", valoresMesesEspañol, valoresGraficosDecimales["report1-energ-mensual-eg2"], valoresGraficosDecimales["report1-heat-rate-objetivo"], null);
            GenerarGraficoDoble("graf-head-rate-plant", valoresMesesEspañol, valoresGraficosDecimales["report1-energ-mensual-plant"], valoresGraficosDecimales["report1-heat-rate-objetivo"], null);


            GenerarGraficoDoble("graf-energ-mensual-ge1", valoresMesesEspañol, valoresGraficosDecimales["report1-energ-mensual-eg1"], valoresGraficosDecimales["report1-energ-mensual-objetivo"], null);
            GenerarGraficoDoble("graf-energ-mensual-ge2", valoresMesesEspañol, valoresGraficosDecimales["report1-energ-mensual-eg2"], valoresGraficosDecimales["report1-energ-mensual-objetivo"], null);
            GenerarGraficoDoble("graf-energ-mensual-plant", valoresMesesEspañol, valoresGraficosDecimales["report1-energ-mensual-plant"], valoresGraficosDecimales["report1-energ-mensual-plant"], null);


            GenerarGraficoUnico("graf-disp-equi-ge1", valoresMesesEspañol, valoresGraficosDecimales["report1-disp-equi-eg1"], "%");
            GenerarGraficoUnico("graf-disp-equi-ge2", valoresMesesEspañol, valoresGraficosDecimales["report1-disp-equi-eg2"], "%");
            GenerarGraficoUnico("graf-disp-equi-plant", valoresMesesEspañol, valoresGraficosDecimales["report1-disp-equi-plant"], "%");

            GenerarGraficoDoble("graf-report1-EG01", valoresMesesEspañol, valoresGraficosDecimales["report1-cap-eg1"], valoresGraficosDecimales["report1-dis-eg1"], "%");
            GenerarGraficoDoble("graf-report1-EG02", valoresMesesEspañol, valoresGraficosDecimales["report1-cap-eg2"], valoresGraficosDecimales["report1-dis-eg2"], "%");
            GenerarGraficoDoble("graf-report1-plant", valoresMesesEspañol, valoresGraficosDecimales["report1-cap-plant"], valoresGraficosDecimales["report1-dis-plant"], "%");
        }


        function ObtenerGraficosReporte2() {
            GenerarGraficoUnico("rp2-energ-exp-graf", valoresMesesEspañol, valoresGraficosDecimales["report2-energ-exp-mwh"], null);
            GenerarGraficoUnico("rp2-cons-gas-graf", valoresMesesEspañol, valoresGraficosDecimales["report2-cons-gas"], null);
            GenerarGraficoUnico("rp2-cons-aceite-graf", valoresMesesEspañol, valoresGraficosDecimales["report2-cons-aceite"], null);
            GenerarGraficoUnico("rp2-horas-ope-ge1-graf", valoresMesesEspañol, valoresGraficosDecimales["report2-hrs-op-eg1"], null);
            GenerarGraficoUnico("rp2-horas-ope-ge2-graf", valoresMesesEspañol, valoresGraficosDecimales["report2-hrs-op-eg2"], null);
        }


        function GenerarGraficoUnico(ctx, labels, datos, tipoDato) {
            var seriesData = [{
                name: 'Data',
                type: 'column',
                data: datos
            }];

            var options = {
                series: seriesData,
                chart: {
                    height: 280,
                    width: '100%',
                    type: 'line'
                },
                stroke: {
                    width: [0, 4]
                },
                title: {
                    text: 'Traffic Sources'
                },
                dataLabels: {
                    enabled: true,
                    enabledOnSeries: [0],
                    formatter: function (val) {
                        return tipoDato == "%" ? val.toFixed(2) + '%' : val;
                    }
                },
                xaxis: {
                    labels: {
                        rotate: -70
                    },
                    categories: labels,
                    tickPlacement: 'on'
                },
                yaxis: {
                    title: {
                        text: 'Data',
                    },
                    labels: {
                        formatter: function (val) {
                            return tipoDato == "%" ? val.toFixed(2) + '%' : val;
                        }
                    }
                }
            };

            var chart = new ApexCharts(document.querySelector("#" + ctx), options);
            chart.render();
        }

        function GenerarGraficoDoble(ctx, labels, datos1, datos2, tipoDato) {
            var seriesData = [
                {
                    name: 'Website Blog',
                    type: 'column',
                    data: datos1
                },
                {
                    name: 'Social Media',
                    type: 'line',
                    data: datos2
                }
            ];

            var options = {
                series: seriesData,
                chart: {
                    height: 280,
                    width: '100%',
                    type: 'line',
                },
                stroke: {
                    width: [0, 4]
                },
                title: {
                    text: 'Traffic Sources'
                },
                dataLabels: {
                    enabled: true,
                    enabledOnSeries: [0, 1],
                    formatter: function (val) {
                        return tipoDato == "%" ? val.toFixed(2) + '%' : val;
                    }
                },
                xaxis: {
                    labels: {
                        rotate: -70
                    },
                    categories: labels,
                    tickPlacement: 'on'
                },
                yaxis: [{
                    title: {
                        text: 'Website Blog',
                    },
                    labels: {
                        formatter: function (val) {
                            return tipoDato == "%" ? val.toFixed(2) + '%' : val;
                        }
                    },
                    min: 0, // Valor mínimo en el eje Y
                    max: tipoDato == "%" ? 100 : undefined
                }, {
                    opposite: true,
                    title: {
                        text: 'Social Media'
                    },
                    labels: {
                        formatter: function (val) {
                            return tipoDato == "%" ? val.toFixed(2) + '%' : val;
                        }
                    },
                    min: 0, // Valor mínimo en el eje Y
                    max: tipoDato == "%" ? 100 : undefined
                }]
            };

            var chart = new ApexCharts(document.querySelector("#" + ctx), options);
            chart.render();
        }



        /*********************  *****************************/
        var fechasDelAño = @Html.Raw(JsonConvert.SerializeObject(ObtenerFechasPorMes()));

        var valoresTotales = @Html.Raw(JsonConvert.SerializeObject(valoresPorMes));
        var valoresTotalesIon = @Html.Raw(JsonConvert.SerializeObject(datosIonMes));
        var valoresTotalesGas = @Html.Raw(JsonConvert.SerializeObject(datosGasMes));


        function RenderizarGraficos() {
            for (var mes in valoresTotales) {

                if (valoresTotales.hasOwnProperty(mes) && valoresTotalesIon.hasOwnProperty(mes) && valoresTotalesGas.hasOwnProperty(mes)) {
                    var diccionarioMes = valoresTotales[mes];
                    var valoresTotalesIonMes = valoresTotalesIon[mes];
                    var valoresTotalesGasMes = valoresTotalesGas[mes];
                    var fechasDelMes = fechasDelAño[mes];

                    CreacionReporteProduccionDiaria("myAreaChartProduccion" + mes, diccionarioMes["totalPmuEng_01"], diccionarioMes["totalPmuEng_02"], diccionarioMes["totalPmuEng_01"] - diccionarioMes["totalPmuEng_02"], diccionarioMes["energiaExportadaAcumulado"]);

                    var totalPlantExportION = valoresTotalesIonMes.map(report => report.TotalPlantExportION);

                    GenerarGraficoEnergiaExportada("myAreaChartEnergia" + mes, fechasDelMes, totalPlantExportION);

                    var UsoTotalAceiteEG = document.getElementById("UsoTotalAceiteEG" + mes);
                    var UsoTotalAceiteEG1 = document.getElementById("UsoTotalAceiteEG1" + mes);
                    var UsoTotalAceiteEG2 = document.getElementById("UsoTotalAceiteEG2" + mes);

                    if (UsoTotalAceiteEG && UsoTotalAceiteEG1 && UsoTotalAceiteEG2) {

                        CreacionGraficoAceiteGl("myAreaChartAceitegl" + mes, UsoTotalAceiteEG1.innerText ?? 0, UsoTotalAceiteEG2.innerText ?? 0, UsoTotalAceiteEG.innerText ?? 0);
                    }

                    GenerarGraficoUnico("myAreaChartConsumoGas" + mes, fechasDelMes, valoresTotalesGasMes, null);


                    var consumoTotalAceiteEG = document.getElementById("consumoTotalAceiteEG" + mes);
                    var consumoTotalAceiteEG1 = document.getElementById("consumoTotalAceiteEG1" + mes);
                    var consumoTotalAceiteEG2 = document.getElementById("consumoTotalAceiteEG2" + mes);

                    if (consumoTotalAceiteEG && consumoTotalAceiteEG1 && consumoTotalAceiteEG2) {

                        CreacionGraficoAceiteGl("myAreaChartAceitegr" + mes, consumoTotalAceiteEG1.innerText ?? 0, consumoTotalAceiteEG2.innerText ?? 0, consumoTotalAceiteEG.innerText ?? 0);
                    }

                }
            }
        }

        function GenerarGraficoEnergiaExportada(ctx, labels, datos) {
            var seriesData = [{
                name: 'Data',
                type: 'column',
                data: datos
            }];

            var options = {
                series: seriesData,
                chart: {
                    height: 280,
                    width: '100%',
                    type: 'bar',
                    toolbar: {
                        tools: false // Deshabilitar todas las herramientas
                    }
                },
                stroke: {
                    width: [0, 4]
                },
                title: {
                    text: 'Traffic Sources'
                },
                dataLabels: {
                    enabled: true,
                    formatter: function (val) {
                        return val.toFixed(2);
                    },
                    style: {
                        fontSize: '15px'
                    }
                },
                xaxis: {
                    labels: {
                        rotate: -90
                    },
                    categories: labels,
                    tickPlacement: 'on'
                },
                yaxis: {
                    title: {
                        text: 'Data',
                    },
                    labels: {
                        formatter: function (val) {
                            return val.toFixed(2);
                        }
                    },
                    min: 0, // Valor mínimo en el eje Y
                }
            };

            var chart = new ApexCharts(document.querySelector("#" + ctx), options);
            chart.render();


            var contenedorChartEnergia = document.getElementById(ctx);


            var elementos = contenedorChartEnergia.querySelectorAll('.apexcharts-datalabel');
            var etiquetasLabels = contenedorChartEnergia.querySelectorAll('.apexcharts-xaxis-label');

            var index = 0;
            etiquetasLabels.forEach(function (elemento) {
                if (elemento.hasAttribute('transform')) {
                    var transformValue = elemento.getAttribute('transform');
                    console.log("transformValue", transformValue);

                    var elementosDestino = contenedorChartEnergia.querySelectorAll('.apexcharts-datalabel');


                    var valoresTransform = transformValue.match(/-?\d+\.\d+/g);
                    console.log("valoresTransform", valoresTransform);

                    var posicionY = parseFloat(valoresTransform[1]) - 65;
                    var posicionX = parseFloat(valoresTransform[0]) + 12;

                    var nuevaTransform = transformValue.split(' ');
                    nuevaTransform = nuevaTransform[0] + " " + posicionX + ", " + posicionY + ")"
                    console.log("nuevaTransform", nuevaTransform);

                    elementosDestino[index].setAttribute('transform', nuevaTransform);
                    elementosDestino[index].setAttribute('fill', '#000');

                    //rotate(-90 39.942440032958984, 26.864959716796875)
                    //rotate(-90 39.942440032958984, 80.864959716796875)
                    console.log("_____________________");


                    index++;
                }
            });
        }






        function CreacionGraficoAceiteGl(ctx, totalUsoEng01, totalUsoEng02, totalUsoEng) {
            var options = {
                series: [
                    {
                        name: 'Dataset1',
                        data: [totalUsoEng01],
                        borderColor: 'blue',
                        fill: {
                            type: 'solid',
                            color: 'rgba(0, 0, 255, 0.3)'
                        }
                    },
                    {
                        name: 'Dataset2',
                        data: [totalUsoEng02],
                        borderColor: 'orange',
                        fill: {
                            type: 'solid',
                            color: 'rgba(255, 165, 0, 0.3)'
                        }
                    }
                ],
                chart: {
                    type: 'bar',
                    height: 350,
                    width: '100%'
                },
                plotOptions: {
                    bar: {
                        horizontal: false
                    }
                },
                dataLabels: {
                    enabled: false
                },
                xaxis: {
                    categories: ['CONSUMO DE ACEITE'],
                    labels: {
                        rotate: -70
                    },
                    categories: totalUsoEng,
                    tickPlacement: 'on'
                },
                yaxis: {
                    title: {
                        text: 'Values'
                    },
                    labels: {
                        formatter: function (val) {
                            return val.toFixed(2);
                        }
                    },
                    min: 0,
                    max: 10000
                },
                legend: {
                    position: 'bottom',
                    horizontalAlign: 'left',
                    labels: {
                        usePointStyle: true
                    }
                }
            };

            var chart = new ApexCharts(document.querySelector("#" + ctx), options);
            chart.render();
        }

        function CreacionGraficoEnergiaExportada(ctx, fecha, valores) {
            var myLineChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: fecha,
                    datasets: [
                        {
                            label: 'Dataset1',
                            data: valores,
                            borderColor: 'blue',
                            backgroundColor: 'rgba(0, 0, 255, 0.3)'
                        }
                    ]
                },
                options: {
                    scales: {
                        yAxes: [
                            {
                                type: 'linear',
                                display: true,
                                position: 'left',
                                id: 'y-axis-1'

                            }
                        ]
                    },
                    legend: {
                        position: 'bottom',
                        align: 'start',
                        labels: {
                            usePointStyle: true
                        }
                    }
                }
            });

        }

        function CreacionReporteProduccionDiaria(ctx, totalPmuEng_01, totalPmuEng_02, diferencia, energiaAcumulado) {
            console.log("CreacionReporteProduccionDiaria", [totalPmuEng_01, totalPmuEng_02, diferencia, energiaAcumulado]);
            var options = {
                series: [{
                    data: [totalPmuEng_01, totalPmuEng_02, diferencia, energiaAcumulado]
                }],
                chart: {
                    height: 280,
                    type: 'bar',
                    events: {
                        click: function (chart, w, e) {
                            // console.log(chart, w, e)
                        }
                    }
                },
                plotOptions: {
                    bar: {
                        columnWidth: '45%',
                        distributed: true,
                    }
                },
                dataLabels: {
                    enabled: true,
                    style: {
                        fontSize: '14px'
                    }
                },
                legend: {
                    show: false
                },
                xaxis: {
                    categories: [
                        ['Producción EG01'],
                        ['Producción EG02'],
                        ['Producción total planta'],
                        ['Energía exportada ION']
                    ],
                    labels: {
                        style: {
                            fontSize: '12px'
                        }
                    }
                }
            };

            var chart = new ApexCharts(document.querySelector("#" + ctx), options);
            chart.render();
        }

        var tituloEventoCentral = document.getElementById("tituloEvento-Ram");

        document.getElementById('dataDetalles').addEventListener('click', function () {
            var graficos = document.getElementById('dataGraficos');
            var datosDetalles = document.getElementById('contenedor-data-detalles');
            var datosGraficos = document.getElementById('contenedor-data-graficos');

            var iconMostrarDetalles = document.getElementById('mostrarVistaDetalles');
            var iconOcultarDetalles = document.getElementById('ocultarVistaDetalles');
            var iconMostrarGraficos = document.getElementById('mostrarVistaGraficos');
            var iconOcultarGraficos = document.getElementById('ocultarVistaGraficos');

            iconMostrarDetalles.style.display = 'initial';
            iconOcultarDetalles.style.display = 'none';
            iconMostrarGraficos.style.display = 'none';
            iconOcultarGraficos.style.display = 'initial';

            this.style.backgroundColor = '#F37021';
            graficos.style.backgroundColor = '#f8f9fc';
            datosDetalles.style.display = 'initial';
            datosGraficos.style.display = 'none';
        });

        document.getElementById('dataGraficos').addEventListener('click', function () {
            var detalles = document.getElementById('dataDetalles');
            var datosDetalles = document.getElementById('contenedor-data-detalles');
            var datosGraficos = document.getElementById('contenedor-data-graficos');

            var iconMostrarDetalles = document.getElementById('mostrarVistaDetalles');
            var iconOcultarDetalles = document.getElementById('ocultarVistaDetalles');
            var iconMostrarGraficos = document.getElementById('mostrarVistaGraficos');
            var iconOcultarGraficos = document.getElementById('ocultarVistaGraficos');

            iconMostrarDetalles.style.display = 'none';
            iconOcultarDetalles.style.display = 'initial';
            iconMostrarGraficos.style.display = 'initial';
            iconOcultarGraficos.style.display = 'none';

            detalles.style.backgroundColor = '#f8f9fc';
            this.style.backgroundColor = '#F37021';
            datosGraficos.style.display = 'initial';
            datosDetalles.style.display = 'none';
            RenderizarGraficos();
        });




        document.getElementById('btnEventEG2').addEventListener('click', function () {
            tituloEventoCentral.innerText = "Registro de Eventos C.T. " + datosOperario.IdSitio + " " + @Html.Raw(JsonConvert.SerializeObject(DateTime.Now.ToString("yyyy")));

            var eg1Element = document.getElementById('btnEventEG1');
            var botonData = document.getElementById('btnData');
            var btnProduccion = document.getElementById('btnProduccion');
            var btnEG01 = document.getElementById('btnEG01');
            var btnEG02 = document.getElementById('btnEG02');
            var btnOutagePercentage = document.getElementById('btnOutagePercentage');
            var btnOutageProjection = document.getElementById('btnOutageProjection');
            var btnReport1 = document.getElementById('btnReport1');
            var btnReport2 = document.getElementById('btnReport2');
            var btnOilGraph = document.getElementById('btnOilGraph');

            btnOilGraph.classList.remove('botonSeleccionado');
            btnReport2.classList.remove('botonSeleccionado');
            btnReport1.classList.remove('botonSeleccionado');
            btnOutageProjection.classList.remove('botonSeleccionado');
            btnOutagePercentage.classList.remove('botonSeleccionado');
            btnEG01.classList.remove('botonSeleccionado');
            btnEG02.classList.remove('botonSeleccionado');
            btnProduccion.classList.remove('botonSeleccionado');
            this.classList.add('botonSeleccionado');
            eg1Element.classList.remove('botonSeleccionado');
            botonData.classList.remove('botonSeleccionado');

            alternarElemento('mostrarVistaGe2', 'ocultarVistaGe2');
            alternarElemento('ocultarVistaGe1', 'mostrarVistaGe1');
            alternarElemento('ocultarVistaData', 'mostrarVistaData');
            alternarElemento('ocultarVistaProduccion', 'mostrarVistaProduccion');
            alternarElemento('ocultarVistaEG01', 'mostrarVistaEG01');
            alternarElemento('ocultarVistaOutagePercentage', 'mostrarVistaOutagePercentage');
            alternarElemento('ocultarVistaOutageProjection', 'mostrarVistaOutageProjection');
            alternarElemento('ocultarVistaReport2', 'mostrarVistaReport2');
            alternarElemento('ocultarVistaReport1', 'mostrarVistaReport1');


            alternarElemento('EventEG02', 'EventEG01');
            alternarElemento('', 'contenido-data');
            alternarElemento('', 'contenido-produccion');
            alternarElemento('', 'contenedor-EG01');
            alternarElemento('', 'contenedor-OutageProjection');
            alternarElemento('', 'contenedor-OutagePercentage');
            alternarElemento('', 'contenedor-Report1');
            alternarElemento('', 'contenedor-Report2');

            var btnOil = document.getElementById('btnOil');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOil', 'mostrarVistaOil');
            alternarElemento('', 'contenedor-Oil');

            var btnOilGraph = document.getElementById('btnOilGraph');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOilGraph', 'mostrarVistaOilGraph');
            alternarElemento('', 'contenedor-OilGraph');

            var btnDeretingLoad = document.getElementById('btnDeretingLoad');
            btnDeretingLoad.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaDeretingLoad', 'mostrarVistaDeretingLoad');
            alternarElemento('', 'contenedor-DeretingLoad');


        });

        document.getElementById('btnEventEG1').addEventListener('click', function () {
            tituloEventoCentral.innerText = "Registro de Eventos C.T. " + datosOperario.IdSitio + " " + @Html.Raw(JsonConvert.SerializeObject(DateTime.Now.ToString("yyyy")));

            var botonData = document.getElementById('btnData');
            var eg2Element = document.getElementById('btnEventEG2');
            var btnProduccion = document.getElementById('btnProduccion');
            var btnEG01 = document.getElementById('btnEG01');
            var btnEG02 = document.getElementById('btnEG02');
            var btnOutagePercentage = document.getElementById('btnOutagePercentage');
            var btnOutageProjection = document.getElementById('btnOutageProjection');
            var btnReport1 = document.getElementById('btnReport1');
            var btnReport2 = document.getElementById('btnReport2');
            var btnOilGraph = document.getElementById('btnOilGraph');

            btnOilGraph.classList.remove('botonSeleccionado');
            btnReport2.classList.remove('botonSeleccionado');
            btnReport1.classList.remove('botonSeleccionado');
            btnOutageProjection.classList.remove('botonSeleccionado');
            btnOutagePercentage.classList.remove('botonSeleccionado');
            btnEG02.classList.remove('botonSeleccionado');
            btnEG01.classList.remove('botonSeleccionado');
            btnProduccion.classList.remove('botonSeleccionado');
            this.classList.add('botonSeleccionado');
            botonData.classList.remove('botonSeleccionado');
            eg2Element.classList.remove('botonSeleccionado');

            alternarElemento('mostrarVistaGe1', 'ocultarVistaGe1');
            alternarElemento('ocultarVistaGe2', 'mostrarVistaGe2');
            alternarElemento('ocultarVistaData', 'mostrarVistaData');
            alternarElemento('ocultarVistaProduccion', 'mostrarVistaProduccion');
            alternarElemento('ocultarVistaEG01', 'mostrarVistaEG01');
            alternarElemento('ocultarVistaOutagePercentage', 'mostrarVistaOutagePercentage');
            alternarElemento('ocultarVistaOutageProjection', 'mostrarVistaOutageProjection');
            alternarElemento('ocultarVistaReport2', 'mostrarVistaReport2');
            alternarElemento('ocultarVistaReport1', 'mostrarVistaReport1');

            alternarElemento('', 'contenedor-Report1');
            alternarElemento('', 'contenedor-Report2');
            alternarElemento('EventEG01', 'EventEG02');
            alternarElemento('', 'contenido-data');
            alternarElemento('', 'contenido-produccion');
            alternarElemento('', 'contenedor-EG01');
            alternarElemento('', 'contenedor-OutageProjection');
            alternarElemento('', 'contenedor-OutagePercentage');


            var btnOil = document.getElementById('btnOil');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOil', 'mostrarVistaOil');
            alternarElemento('', 'contenedor-Oil');

            var btnOilGraph = document.getElementById('btnOilGraph');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOilGraph', 'mostrarVistaOilGraph');
            alternarElemento('', 'contenedor-OilGraph');

            var btnDeretingLoad = document.getElementById('btnDeretingLoad');
            btnDeretingLoad.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaDeretingLoad', 'mostrarVistaDeretingLoad');
            alternarElemento('', 'contenedor-DeretingLoad');


        });

        document.getElementById('btnData').addEventListener('click', function () {
            tituloEventoCentral.innerText = "";

            var eg1Element = document.getElementById('btnEventEG1');
            var eg2Element = document.getElementById('btnEventEG2');
            var btnProduccion = document.getElementById('btnProduccion');
            var btnEG01 = document.getElementById('btnEG01');
            var btnEG02 = document.getElementById('btnEG02');
            var btnOutagePercentage = document.getElementById('btnOutagePercentage');
            var btnOutageProjection = document.getElementById('btnOutageProjection');
            var btnReport1 = document.getElementById('btnReport1');
            var btnReport2 = document.getElementById('btnReport2');
            var btnOilGraph = document.getElementById('btnOilGraph');

            btnOilGraph.classList.remove('botonSeleccionado');
            btnReport2.classList.remove('botonSeleccionado');
            btnReport1.classList.remove('botonSeleccionado');
            btnOutageProjection.classList.remove('botonSeleccionado');
            btnOutagePercentage.classList.remove('botonSeleccionado');
            btnEG02.classList.remove('botonSeleccionado');
            btnEG01.classList.remove('botonSeleccionado');
            btnProduccion.classList.remove('botonSeleccionado');
            this.classList.add('botonSeleccionado');
            eg1Element.classList.remove('botonSeleccionado');
            eg2Element.classList.remove('botonSeleccionado');

            alternarElemento('ocultarVistaGe1', 'mostrarVistaGe1');
            alternarElemento('ocultarVistaGe2', 'mostrarVistaGe2');
            alternarElemento('mostrarVistaData', 'ocultarVistaData');
            alternarElemento('ocultarVistaProduccion', 'mostrarVistaProduccion');
            alternarElemento('ocultarVistaEG01', 'mostrarVistaEG01');
            alternarElemento('ocultarVistaOutagePercentage', 'mostrarVistaOutagePercentage');
            alternarElemento('ocultarVistaOutageProjection', 'mostrarVistaOutageProjection');
            alternarElemento('ocultarVistaReport2', 'mostrarVistaReport2');
            alternarElemento('ocultarVistaReport1', 'mostrarVistaReport1');


            alternarElemento('', 'contenedor-Report1');
            alternarElemento('', 'contenedor-Report2');
            alternarElemento('contenido-data', 'EventEG02');
            alternarElemento('', 'EventEG01');
            alternarElemento('', 'contenido-produccion');
            alternarElemento('', 'contenedor-EG01');
            alternarElemento('', 'contenedor-OutageProjection');
            alternarElemento('', 'contenedor-OutagePercentage');


            var btnOil = document.getElementById('btnOil');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOil', 'mostrarVistaOil');
            alternarElemento('', 'contenedor-Oil');

            var btnOilGraph = document.getElementById('btnOilGraph');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOilGraph', 'mostrarVistaOilGraph');
            alternarElemento('', 'contenedor-OilGraph');

            var btnDeretingLoad = document.getElementById('btnDeretingLoad');
            btnDeretingLoad.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaDeretingLoad', 'mostrarVistaDeretingLoad');
            alternarElemento('', 'contenedor-DeretingLoad');


        });

        document.getElementById('btnProduccion').addEventListener('click', function () {
            tituloEventoCentral.innerText = "";

            var botonData = document.getElementById('btnData');
            var eg1Element = document.getElementById('btnEventEG1');
            var eg2Element = document.getElementById('btnEventEG2');
            var btnEG01 = document.getElementById('btnEG01');
            var btnEG02 = document.getElementById('btnEG02');
            var btnOutagePercentage = document.getElementById('btnOutagePercentage');
            var btnOutageProjection = document.getElementById('btnOutageProjection');
            var btnReport1 = document.getElementById('btnReport1');
            var btnReport2 = document.getElementById('btnReport2');
            var btnOutageProjection = document.getElementById('btnOutageProjection');
            var btnOilGraph = document.getElementById('btnOilGraph');

            btnOilGraph.classList.remove('botonSeleccionado');
            btnOutageProjection.classList.remove('botonSeleccionado');
            btnReport2.classList.remove('botonSeleccionado');
            btnReport1.classList.remove('botonSeleccionado');
            btnOutageProjection.classList.remove('botonSeleccionado');
            btnOutagePercentage.classList.remove('botonSeleccionado');
            btnEG02.classList.remove('botonSeleccionado');
            btnEG01.classList.remove('botonSeleccionado');
            this.classList.add('botonSeleccionado');
            botonData.classList.remove('botonSeleccionado');
            eg1Element.classList.remove('botonSeleccionado');
            eg2Element.classList.remove('botonSeleccionado');

            var iconMostrarGe1 = document.getElementById('mostrarVistaGe1');
            var iconOcultarGe1 = document.getElementById('ocultarVistaGe1');
            var iconMostrarGe2 = document.getElementById('mostrarVistaGe2');
            var iconOcultarGe2 = document.getElementById('ocultarVistaGe2');
            var iconOcultarData = document.getElementById('ocultarVistaData');
            var iconMostrarData = document.getElementById('mostrarVistaData');
            var iconOcultarProduccion = document.getElementById('ocultarVistaProduccion');
            var iconMostrarProduccion = document.getElementById('mostrarVistaProduccion');
            var iconOcultarProduccion = document.getElementById('ocultarVistaEG01');
            var iconMostrarProduccion = document.getElementById('mostrarVistaEG01');

            alternarElemento('ocultarVistaGe1', 'mostrarVistaGe1');
            alternarElemento('ocultarVistaGe2', 'mostrarVistaGe2');
            alternarElemento('ocultarVistaData', 'mostrarVistaData');
            alternarElemento('mostrarVistaProduccion', 'ocultarVistaProduccion');
            alternarElemento('ocultarVistaEG01', 'mostrarVistaEG01');
            alternarElemento('ocultarVistaOutageProjection', 'mostrarVistaOutageProjection');
            alternarElemento('ocultarVistaOutagePercentage', 'mostrarVistaOutagePercentage');
            alternarElemento('ocultarVistaReport2', 'mostrarVistaReport2');
            alternarElemento('ocultarVistaReport1', 'mostrarVistaReport1');


            alternarElemento('', 'contenedor-Report1');
            alternarElemento('', 'contenedor-Report2');
            alternarElemento('contenido-produccion', 'EventEG02');
            alternarElemento('', 'EventEG01');
            alternarElemento('', 'contenido-data');
            alternarElemento('', 'contenedor-EG01');
            alternarElemento('', 'contenedor-OutagePercentage');
            alternarElemento('', 'contenedor-OutageProjection');

            var btnOil = document.getElementById('btnOil');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOil', 'mostrarVistaOil');
            alternarElemento('', 'contenedor-Oil');

            var btnOilGraph = document.getElementById('btnOilGraph');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOilGraph', 'mostrarVistaOilGraph');
            alternarElemento('', 'contenedor-OilGraph');

            var btnDeretingLoad = document.getElementById('btnDeretingLoad');
            btnDeretingLoad.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaDeretingLoad', 'mostrarVistaDeretingLoad');
            alternarElemento('', 'contenedor-DeretingLoad');


        });

        document.getElementById('btnEG01').addEventListener('click', function () {
            tituloEventoCentral.innerText = "";

            var botonData = document.getElementById('btnData');
            var eg1Element = document.getElementById('btnEventEG1');
            var eg2Element = document.getElementById('btnEventEG2');
            var btnProduccion = document.getElementById('btnProduccion');
            var btnEG02 = document.getElementById('btnEG02');
            var btnOutagePercentage = document.getElementById('btnOutagePercentage');
            var btnOutageProjection = document.getElementById('btnOutageProjection');
            var btnReport1 = document.getElementById('btnReport1');
            var btnReport2 = document.getElementById('btnReport2');
            var btnOilGraph = document.getElementById('btnOilGraph');

            btnOilGraph.classList.remove('botonSeleccionado');
            btnReport2.classList.remove('botonSeleccionado');
            btnReport1.classList.remove('botonSeleccionado');
            btnOutageProjection.classList.remove('botonSeleccionado');
            btnOutagePercentage.classList.remove('botonSeleccionado');
            btnEG02.classList.remove('botonSeleccionado');
            btnProduccion.classList.remove('botonSeleccionado');
            this.classList.add('botonSeleccionado');
            botonData.classList.remove('botonSeleccionado');
            eg1Element.classList.remove('botonSeleccionado');
            eg2Element.classList.remove('botonSeleccionado');

            alternarElemento('ocultarVistaGe1', 'mostrarVistaGe1');
            alternarElemento('ocultarVistaGe2', 'mostrarVistaGe2');
            alternarElemento('ocultarVistaData', 'mostrarVistaData');
            alternarElemento('ocultarVistaProduccion', 'mostrarVistaProduccion');
            alternarElemento('mostrarVistaEG01', 'ocultarVistaEG01');
            alternarElemento('ocultarVistaOutagePercentage', 'mostrarVistaOutagePercentage');
            alternarElemento('ocultarVistaOutageProjection', 'mostrarVistaOutageProjection');
            alternarElemento('ocultarVistaReport2', 'mostrarVistaReport2');
            alternarElemento('ocultarVistaReport1', 'mostrarVistaReport1');

            alternarElemento('', 'contenedor-Report1');
            alternarElemento('', 'contenedor-Report2');
            alternarElemento('', 'contenedor-OutagePercentage');
            alternarElemento('contenedor-EG01', 'EventEG02');
            alternarElemento('', 'contenedor-EG02');
            alternarElemento('', 'EventEG01');
            alternarElemento('', 'contenido-produccion');
            alternarElemento('', 'contenedor-OutageProjection');
            alternarElemento('', 'contenido-data');


            var btnOil = document.getElementById('btnOil');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOil', 'mostrarVistaOil');
            alternarElemento('', 'contenedor-Oil');

            var btnOilGraph = document.getElementById('btnOilGraph');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOilGraph', 'mostrarVistaOilGraph');
            alternarElemento('', 'contenedor-OilGraph');

            var btnDeretingLoad = document.getElementById('btnDeretingLoad');
            btnDeretingLoad.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaDeretingLoad', 'mostrarVistaDeretingLoad');
            alternarElemento('', 'contenedor-DeretingLoad');


        });

        document.getElementById('btnEG02').addEventListener('click', function () {
            tituloEventoCentral.innerText = "";

            var botonData = document.getElementById('btnData');
            var eg1Element = document.getElementById('btnEventEG1');
            var eg2Element = document.getElementById('btnEventEG2');
            var btnProduccion = document.getElementById('btnProduccion');
            var btnEG01 = document.getElementById('btnEG01');
            var btnOutagePercentage = document.getElementById('btnOutagePercentage');
            var btnOutageProjection = document.getElementById('btnOutageProjection');
            var btnReport1 = document.getElementById('btnReport1');
            var btnReport2 = document.getElementById('btnReport2');
            var btnOilGraph = document.getElementById('btnOilGraph');

            btnOilGraph.classList.remove('botonSeleccionado');
            btnReport2.classList.remove('botonSeleccionado');
            btnReport1.classList.remove('botonSeleccionado');
            btnOutageProjection.classList.remove('botonSeleccionado');
            btnOutagePercentage.classList.remove('botonSeleccionado');
            btnEG01.classList.remove('botonSeleccionado');
            btnProduccion.classList.remove('botonSeleccionado');
            this.classList.add('botonSeleccionado');
            botonData.classList.remove('botonSeleccionado');
            eg1Element.classList.remove('botonSeleccionado');
            eg2Element.classList.remove('botonSeleccionado');

            alternarElemento('ocultarVistaGe1', 'mostrarVistaGe1');
            alternarElemento('ocultarVistaGe2', 'mostrarVistaGe2');
            alternarElemento('ocultarVistaData', 'mostrarVistaData');
            alternarElemento('ocultarVistaProduccion', 'mostrarVistaProduccion');
            alternarElemento('ocultarVistaEG01', 'mostrarVistaEG01');
            alternarElemento('mostrarVistaEG02', 'ocultarVistaEG02');
            alternarElemento('ocultarVistaOutagePercentage', 'mostrarVistaOutagePercentage');
            alternarElemento('ocultarVistaOutageProjection', 'mostrarVistaOutageProjection');
            alternarElemento('ocultarVistaReport2', 'mostrarVistaReport2');
            alternarElemento('ocultarVistaReport1', 'mostrarVistaReport1');

            alternarElemento('', 'contenedor-Report1');
            alternarElemento('', 'contenedor-Report2');
            alternarElemento('', 'contenedor-EG01');
            alternarElemento('contenedor-EG02', 'EventEG02');
            alternarElemento('', 'EventEG01');
            alternarElemento('', 'contenido-produccion');
            alternarElemento('', 'contenido-data');
            alternarElemento('', 'contenedor-OutageProjection');
            alternarElemento('', 'contenedor-OutagePercentage');

            var btnOil = document.getElementById('btnOil');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOil', 'mostrarVistaOil');
            alternarElemento('', 'contenedor-Oil');

            var btnOilGraph = document.getElementById('btnOilGraph');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOilGraph', 'mostrarVistaOilGraph');
            alternarElemento('', 'contenedor-OilGraph');

            var btnDeretingLoad = document.getElementById('btnDeretingLoad');
            btnDeretingLoad.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaDeretingLoad', 'mostrarVistaDeretingLoad');
            alternarElemento('', 'contenedor-DeretingLoad');


        });

        document.getElementById('btnOutagePercentage').addEventListener('click', function () {
            tituloEventoCentral.innerText = "TOTAL " + @Html.Raw(JsonConvert.SerializeObject(DateTime.Now.ToString("yyyy")))+" OUTAGE PERCENTAGE";

            var botonData = document.getElementById('btnData');
            var eg1Element = document.getElementById('btnEventEG1');
            var eg2Element = document.getElementById('btnEventEG2');
            var btnProduccion = document.getElementById('btnProduccion');
            var btnEG01 = document.getElementById('btnEG01');
            var btnEG02 = document.getElementById('btnEG02');
            var btnOutageProjection = document.getElementById('btnOutageProjection');
            var btnReport1 = document.getElementById('btnReport1');
            var btnReport2 = document.getElementById('btnReport2');
            var btnOutageProjection = document.getElementById('btnOutageProjection');
            var btnOilGraph = document.getElementById('btnOilGraph');

            btnOilGraph.classList.remove('botonSeleccionado');
            btnOutageProjection.classList.remove('botonSeleccionado');
            btnReport2.classList.remove('botonSeleccionado');
            btnReport1.classList.remove('botonSeleccionado');
            btnOutageProjection.classList.remove('botonSeleccionado');
            btnEG02.classList.remove('botonSeleccionado');
            btnEG01.classList.remove('botonSeleccionado');
            btnProduccion.classList.remove('botonSeleccionado');
            this.classList.add('botonSeleccionado');
            botonData.classList.remove('botonSeleccionado');
            eg1Element.classList.remove('botonSeleccionado');
            eg2Element.classList.remove('botonSeleccionado');

            alternarElemento('ocultarVistaGe1', 'mostrarVistaGe1');
            alternarElemento('ocultarVistaGe2', 'mostrarVistaGe2');
            alternarElemento('ocultarVistaData', 'mostrarVistaData');
            alternarElemento('ocultarVistaProduccion', 'mostrarVistaProduccion');
            alternarElemento('ocultarVistaEG01', 'mostrarVistaEG01');
            alternarElemento('ocultarVistaEG02', 'mostrarVistaEG02');
            alternarElemento('mostrarVistaOutagePercentage', 'ocultarVistaOutagePercentage');
            alternarElemento('ocultarVistaOutageProjection', 'mostrarVistaOutageProjection');
            alternarElemento('ocultarVistaReport2', 'mostrarVistaReport2');
            alternarElemento('ocultarVistaReport1', 'mostrarVistaReport1');

            alternarElemento('', 'contenedor-Report1');
            alternarElemento('', 'contenedor-Report2');
            alternarElemento('', 'contenedor-OutageProjection');
            alternarElemento('', 'contenedor-EG01');
            alternarElemento('', 'EventEG02');
            alternarElemento('', 'contenedor-EG02');
            alternarElemento('', 'EventEG01');
            alternarElemento('', 'contenido-produccion');
            alternarElemento('', 'contenido-data');
            alternarElemento('contenedor-OutagePercentage', '');


            var btnOil = document.getElementById('btnOil');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOil', 'mostrarVistaOil');
            alternarElemento('', 'contenedor-Oil');

            var btnOilGraph = document.getElementById('btnOilGraph');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOilGraph', 'mostrarVistaOilGraph');
            alternarElemento('', 'contenedor-OilGraph');

            var btnDeretingLoad = document.getElementById('btnDeretingLoad');
            btnDeretingLoad.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaDeretingLoad', 'mostrarVistaDeretingLoad');
            alternarElemento('', 'contenedor-DeretingLoad');


        });

        document.getElementById('btnOutageProjection').addEventListener('click', function () {
            tituloEventoCentral.innerText = "TOTAL " + @Html.Raw(JsonConvert.SerializeObject(DateTime.Now.ToString("yyyy")))+" OUTAGE PROJECTION";


            var botonData = document.getElementById('btnData');
            var eg1Element = document.getElementById('btnEventEG1');
            var eg2Element = document.getElementById('btnEventEG2');
            var btnProduccion = document.getElementById('btnProduccion');
            var btnEG01 = document.getElementById('btnEG01');
            var btnEG02 = document.getElementById('btnEG02');
            var btnOutagePercentage = document.getElementById('btnOutagePercentage');
            var btnReport1 = document.getElementById('btnReport1');
            var btnReport2 = document.getElementById('btnReport2');
            var btnOutageProjection = document.getElementById('btnOutageProjection');
            var btnOilGraph = document.getElementById('btnOilGraph');

            btnOilGraph.classList.remove('botonSeleccionado');
            btnOutageProjection.classList.remove('botonSeleccionado');
            btnReport2.classList.remove('botonSeleccionado');
            btnReport1.classList.remove('botonSeleccionado');
            btnOutagePercentage.classList.remove('botonSeleccionado');
            btnEG02.classList.remove('botonSeleccionado');
            btnEG01.classList.remove('botonSeleccionado');
            btnProduccion.classList.remove('botonSeleccionado');
            this.classList.add('botonSeleccionado');
            botonData.classList.remove('botonSeleccionado');
            eg1Element.classList.remove('botonSeleccionado');
            eg2Element.classList.remove('botonSeleccionado');

            alternarElemento('ocultarVistaGe1', 'mostrarVistaGe1');
            alternarElemento('ocultarVistaGe2', 'mostrarVistaGe2');
            alternarElemento('ocultarVistaData', 'mostrarVistaData');
            alternarElemento('ocultarVistaProduccion', 'mostrarVistaProduccion');
            alternarElemento('ocultarVistaEG01', 'mostrarVistaEG01');
            alternarElemento('ocultarVistaEG02', 'mostrarVistaEG02');
            alternarElemento('mostrarVistaOutageProjection', 'ocultarVistaOutageProjection');
            alternarElemento('ocultarVistaOutagePercentage', 'mostrarVistaOutagePercentage');
            alternarElemento('ocultarVistaReport2', 'mostrarVistaReport2');
            alternarElemento('ocultarVistaReport1', 'mostrarVistaReport1');

            alternarElemento('', 'contenedor-OutagePercentage');
            alternarElemento('', 'contenedor-EG01');
            alternarElemento('', 'EventEG02');
            alternarElemento('', 'contenedor-EG02');
            alternarElemento('', 'EventEG01');
            alternarElemento('', 'contenido-produccion');
            alternarElemento('', 'contenido-data');
            alternarElemento('', 'contenedor-Report1');
            alternarElemento('contenedor-OutageProjection', '');
            alternarElemento('', 'contenedor-Report2');


            var btnOil = document.getElementById('btnOil');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOil', 'mostrarVistaOil');
            alternarElemento('', 'contenedor-Oil');

            var btnOilGraph = document.getElementById('btnOilGraph');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOilGraph', 'mostrarVistaOilGraph');
            alternarElemento('', 'contenedor-OilGraph');

            var btnDeretingLoad = document.getElementById('btnDeretingLoad');
            btnDeretingLoad.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaDeretingLoad', 'mostrarVistaDeretingLoad');
            alternarElemento('', 'contenedor-DeretingLoad');


        });

        document.getElementById('btnReport1').addEventListener('click', function () {
            tituloEventoCentral.innerText = "";


            var botonData = document.getElementById('btnData');
            var eg1Element = document.getElementById('btnEventEG1');
            var eg2Element = document.getElementById('btnEventEG2');
            var btnProduccion = document.getElementById('btnProduccion');
            var btnEG01 = document.getElementById('btnEG01');
            var btnEG02 = document.getElementById('btnEG02');
            var btnOutagePercentage = document.getElementById('btnOutagePercentage');
            var btnReport2 = document.getElementById('btnReport2');
            var btnOutageProjection = document.getElementById('btnOutageProjection');

            btnOutageProjection.classList.remove('botonSeleccionado');
            btnReport2.classList.remove('botonSeleccionado');
            btnOutagePercentage.classList.remove('botonSeleccionado');
            btnEG02.classList.remove('botonSeleccionado');
            btnEG01.classList.remove('botonSeleccionado');
            btnProduccion.classList.remove('botonSeleccionado');
            this.classList.add('botonSeleccionado');
            botonData.classList.remove('botonSeleccionado');
            eg1Element.classList.remove('botonSeleccionado');
            eg2Element.classList.remove('botonSeleccionado');

            alternarElemento('ocultarVistaGe1', 'mostrarVistaGe1');
            alternarElemento('ocultarVistaGe2', 'mostrarVistaGe2');
            alternarElemento('ocultarVistaData', 'mostrarVistaData');
            alternarElemento('ocultarVistaProduccion', 'mostrarVistaProduccion');
            alternarElemento('ocultarVistaEG01', 'mostrarVistaEG01');
            alternarElemento('ocultarVistaEG02', 'mostrarVistaEG02');
            alternarElemento('ocultarVistaOutageProjection', 'mostrarVistaOutageProjection');
            alternarElemento('ocultarVistaOutagePercentage', 'mostrarVistaOutagePercentage');
            alternarElemento('mostrarVistaReport1', 'ocultarVistaReport1');
            alternarElemento('ocultarVistaReport2', 'mostrarVistaReport2');

            alternarElemento('', 'contenedor-OutagePercentage');
            alternarElemento('', 'contenedor-EG01');
            alternarElemento('', 'EventEG02');
            alternarElemento('', 'contenedor-EG02');
            alternarElemento('', 'EventEG01');
            alternarElemento('', 'contenido-produccion');
            alternarElemento('', 'contenido-data');
            alternarElemento('', 'contenedor-OutageProjection');
            alternarElemento('contenedor-Report1', '');
            alternarElemento('', 'contenedor-Report2');

            var btnOil = document.getElementById('btnOil');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOil', 'mostrarVistaOil');
            alternarElemento('', 'contenedor-Oil');

            var btnOilGraph = document.getElementById('btnOilGraph');
            btnOilGraph.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOilGraph', 'mostrarVistaOilGraph');
            alternarElemento('', 'contenedor-OilGraph');

            var btnDeretingLoad = document.getElementById('btnDeretingLoad');
            btnDeretingLoad.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaDeretingLoad', 'mostrarVistaDeretingLoad');
            alternarElemento('', 'contenedor-DeretingLoad');


            ObtenerGraficosReporte1();
        });

        document.getElementById('btnReport2').addEventListener('click', function () {
            tituloEventoCentral.innerText = "";

            var botonData = document.getElementById('btnData');
            var eg1Element = document.getElementById('btnEventEG1');
            var eg2Element = document.getElementById('btnEventEG2');
            var btnProduccion = document.getElementById('btnProduccion');
            var btnEG01 = document.getElementById('btnEG01');
            var btnEG02 = document.getElementById('btnEG02');
            var btnOutagePercentage = document.getElementById('btnOutagePercentage');
            var btnReport1 = document.getElementById('btnReport1');
            var btnOutageProjection = document.getElementById('btnOutageProjection');

            btnOutageProjection.classList.remove('botonSeleccionado');
            btnReport1.classList.remove('botonSeleccionado');
            btnOutagePercentage.classList.remove('botonSeleccionado');
            btnEG02.classList.remove('botonSeleccionado');
            btnEG01.classList.remove('botonSeleccionado');
            btnProduccion.classList.remove('botonSeleccionado');
            this.classList.add('botonSeleccionado');
            botonData.classList.remove('botonSeleccionado');
            eg1Element.classList.remove('botonSeleccionado');
            eg2Element.classList.remove('botonSeleccionado');

            alternarElemento('ocultarVistaGe1', 'mostrarVistaGe1');
            alternarElemento('ocultarVistaGe2', 'mostrarVistaGe2');
            alternarElemento('ocultarVistaData', 'mostrarVistaData');
            alternarElemento('ocultarVistaProduccion', 'mostrarVistaProduccion');
            alternarElemento('ocultarVistaEG01', 'mostrarVistaEG01');
            alternarElemento('ocultarVistaEG02', 'mostrarVistaEG02');
            alternarElemento('ocultarVistaOutageProjection', 'mostrarVistaOutageProjection');
            alternarElemento('ocultarVistaOutagePercentage', 'mostrarVistaOutagePercentage');
            alternarElemento('mostrarVistaReport2', 'ocultarVistaReport2');
            alternarElemento('ocultarVistaReport1', 'mostrarVistaReport1');

            alternarElemento('', 'contenedor-OutagePercentage');
            alternarElemento('', 'contenedor-EG01');
            alternarElemento('', 'EventEG02');
            alternarElemento('', 'contenedor-EG02');
            alternarElemento('', 'EventEG01');
            alternarElemento('', 'contenido-produccion');
            alternarElemento('', 'contenido-data');
            alternarElemento('', 'contenedor-OutageProjection');
            alternarElemento('', 'contenedor-Report1');
            alternarElemento('contenedor-Report2', '');


            var btnOil = document.getElementById('btnOil');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOil', 'mostrarVistaOil');
            alternarElemento('', 'contenedor-Oil');

            var btnOilGraph = document.getElementById('btnOilGraph');
            btnOilGraph.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOilGraph', 'mostrarVistaOilGraph');
            alternarElemento('', 'contenedor-OilGraph');

            var btnDeretingLoad = document.getElementById('btnDeretingLoad');
            btnDeretingLoad.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaDeretingLoad', 'mostrarVistaDeretingLoad');
            alternarElemento('', 'contenedor-DeretingLoad');

            ObtenerGraficosReporte2();
        });


        document.getElementById('btnOil').addEventListener('click', function () {
            tituloEventoCentral.innerText = "MUESTRA DE ACEITE CGD PEDREGAL CHEVRON HDAX 5200 SAE40";

            var botonData = document.getElementById('btnData');
            var eg1Element = document.getElementById('btnEventEG1');
            var eg2Element = document.getElementById('btnEventEG2');
            var btnProduccion = document.getElementById('btnProduccion');
            var btnEG01 = document.getElementById('btnEG01');
            var btnEG02 = document.getElementById('btnEG02');
            var btnOutagePercentage = document.getElementById('btnOutagePercentage');
            var btnReport1 = document.getElementById('btnReport1');
            var btnReport2 = document.getElementById('btnReport2');
            var btnOutageProjection = document.getElementById('btnOutageProjection');
            var btnOilGraph = document.getElementById('btnOilGraph');

            btnOilGraph.classList.remove('botonSeleccionado');
            btnOutageProjection.classList.remove('botonSeleccionado');
            btnReport2.classList.remove('botonSeleccionado');
            btnReport1.classList.remove('botonSeleccionado');
            btnOutagePercentage.classList.remove('botonSeleccionado');
            btnEG02.classList.remove('botonSeleccionado');
            btnEG01.classList.remove('botonSeleccionado');
            btnProduccion.classList.remove('botonSeleccionado');
            this.classList.add('botonSeleccionado');
            botonData.classList.remove('botonSeleccionado');
            eg1Element.classList.remove('botonSeleccionado');
            eg2Element.classList.remove('botonSeleccionado');
            eg2Element.classList.remove('botonSeleccionado');

            alternarElemento('ocultarVistaGe1', 'mostrarVistaGe1');
            alternarElemento('ocultarVistaGe2', 'mostrarVistaGe2');
            alternarElemento('ocultarVistaData', 'mostrarVistaData');
            alternarElemento('ocultarVistaProduccion', 'mostrarVistaProduccion');
            alternarElemento('ocultarVistaEG01', 'mostrarVistaEG01');
            alternarElemento('ocultarVistaEG02', 'mostrarVistaEG02');
            alternarElemento('ocultarVistaOutageProjection', 'mostrarVistaOutageProjection');
            alternarElemento('ocultarVistaOutagePercentage', 'mostrarVistaOutagePercentage');
            alternarElemento('mostrarVistaOil', 'ocultarVistaOil');
            alternarElemento('ocultarVistaReport2', 'mostrarVistaReport2');
            alternarElemento('ocultarVistaReport1', 'mostrarVistaReport1');

            alternarElemento('', 'contenedor-OutagePercentage');
            alternarElemento('', 'contenedor-EG01');
            alternarElemento('', 'EventEG02');
            alternarElemento('', 'contenedor-EG02');
            alternarElemento('', 'EventEG01');
            alternarElemento('', 'contenido-produccion');
            alternarElemento('', 'contenido-data');
            alternarElemento('', 'contenedor-OutageProjection');
            alternarElemento('', 'contenedor-Report1');
            alternarElemento('', 'contenedor-Report2');
            alternarElemento('contenedor-Oil', '');

            var btnDeretingLoad = document.getElementById('btnDeretingLoad');
            btnDeretingLoad.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaDeretingLoad', 'mostrarVistaDeretingLoad');
            alternarElemento('', 'contenedor-DeretingLoad');

            var btnOilGraph = document.getElementById('btnOilGraph');
            btnOilGraph.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOilGraph', 'mostrarVistaOilGraph');
            alternarElemento('', 'contenedor-OilGraph');


            ObtenerGraficosReporte2();
        });


        document.getElementById('btnOilGraph').addEventListener('click', function () {
            tituloEventoCentral.innerText = "GRÁFICAS DE LOS PRINCIPALES PARÁMETROS DE MUESTRA";


            var botonData = document.getElementById('btnData');
            var eg1Element = document.getElementById('btnEventEG1');
            var eg2Element = document.getElementById('btnEventEG2');
            var btnProduccion = document.getElementById('btnProduccion');
            var btnEG01 = document.getElementById('btnEG01');
            var btnEG02 = document.getElementById('btnEG02');
            var btnOutagePercentage = document.getElementById('btnOutagePercentage');
            var btnReport1 = document.getElementById('btnReport1');
            var btnReport2 = document.getElementById('btnReport2');
            var btnOutageProjection = document.getElementById('btnOutageProjection');
            var btnOilGraph = document.getElementById('btnOilGraph');

            btnOilGraph.classList.remove('botonSeleccionado');
            btnOutageProjection.classList.remove('botonSeleccionado');
            btnReport2.classList.remove('botonSeleccionado');
            btnReport1.classList.remove('botonSeleccionado');
            btnOutagePercentage.classList.remove('botonSeleccionado');
            btnEG02.classList.remove('botonSeleccionado');
            btnEG01.classList.remove('botonSeleccionado');
            btnProduccion.classList.remove('botonSeleccionado');
            this.classList.add('botonSeleccionado');
            botonData.classList.remove('botonSeleccionado');
            eg1Element.classList.remove('botonSeleccionado');
            eg2Element.classList.remove('botonSeleccionado');
            eg2Element.classList.remove('botonSeleccionado');

            alternarElemento('ocultarVistaGe1', 'mostrarVistaGe1');
            alternarElemento('ocultarVistaGe2', 'mostrarVistaGe2');
            alternarElemento('ocultarVistaData', 'mostrarVistaData');
            alternarElemento('ocultarVistaProduccion', 'mostrarVistaProduccion');
            alternarElemento('ocultarVistaEG01', 'mostrarVistaEG01');
            alternarElemento('ocultarVistaEG02', 'mostrarVistaEG02');
            alternarElemento('ocultarVistaOutageProjection', 'mostrarVistaOutageProjection');
            alternarElemento('ocultarVistaOutagePercentage', 'mostrarVistaOutagePercentage');
            alternarElemento('ocultarVistaReport2', 'mostrarVistaReport2');
            alternarElemento('ocultarVistaReport1', 'mostrarVistaReport1');

            alternarElemento('', 'contenedor-OutagePercentage');
            alternarElemento('', 'contenedor-EG01');
            alternarElemento('', 'EventEG02');
            alternarElemento('', 'contenedor-EG02');
            alternarElemento('', 'EventEG01');
            alternarElemento('', 'contenido-produccion');
            alternarElemento('', 'contenido-data');
            alternarElemento('', 'contenedor-OutageProjection');
            alternarElemento('', 'contenedor-Report1');
            alternarElemento('', 'contenedor-Report2');

            var btnOil = document.getElementById('btnOil');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOil', 'mostrarVistaOil');
            alternarElemento('', 'contenedor-Oil');

            var btnDeretingLoad = document.getElementById('btnDeretingLoad');
            btnDeretingLoad.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaDeretingLoad', 'mostrarVistaDeretingLoad');
            alternarElemento('', 'contenedor-DeretingLoad');

            alternarElemento('mostrarVistaOilGraph', 'ocultarVistaOilGraph');
            alternarElemento('contenedor-OilGraph', '');
        });


        document.getElementById('btnDeretingLoad').addEventListener('click', function () {
            tituloEventoCentral.innerText = "Derating Load CGD " + datosOperario.IdSitio;


            var botonData = document.getElementById('btnData');
            var eg1Element = document.getElementById('btnEventEG1');
            var eg2Element = document.getElementById('btnEventEG2');
            var btnProduccion = document.getElementById('btnProduccion');
            var btnEG01 = document.getElementById('btnEG01');
            var btnEG02 = document.getElementById('btnEG02');
            var btnOutagePercentage = document.getElementById('btnOutagePercentage');
            var btnReport1 = document.getElementById('btnReport1');
            var btnReport2 = document.getElementById('btnReport2');
            var btnOutageProjection = document.getElementById('btnOutageProjection');

            btnOutageProjection.classList.remove('botonSeleccionado');
            btnReport2.classList.remove('botonSeleccionado');
            btnReport1.classList.remove('botonSeleccionado');
            btnOutagePercentage.classList.remove('botonSeleccionado');
            btnEG02.classList.remove('botonSeleccionado');
            btnEG01.classList.remove('botonSeleccionado');
            btnProduccion.classList.remove('botonSeleccionado');
            this.classList.add('botonSeleccionado');
            botonData.classList.remove('botonSeleccionado');
            eg1Element.classList.remove('botonSeleccionado');
            eg2Element.classList.remove('botonSeleccionado');
            eg2Element.classList.remove('botonSeleccionado');

            alternarElemento('ocultarVistaGe1', 'mostrarVistaGe1');
            alternarElemento('ocultarVistaGe2', 'mostrarVistaGe2');
            alternarElemento('ocultarVistaData', 'mostrarVistaData');
            alternarElemento('ocultarVistaProduccion', 'mostrarVistaProduccion');
            alternarElemento('ocultarVistaEG01', 'mostrarVistaEG01');
            alternarElemento('ocultarVistaEG02', 'mostrarVistaEG02');
            alternarElemento('ocultarVistaOutageProjection', 'mostrarVistaOutageProjection');
            alternarElemento('ocultarVistaOutagePercentage', 'mostrarVistaOutagePercentage');
            alternarElemento('ocultarVistaReport2', 'mostrarVistaReport2');
            alternarElemento('ocultarVistaReport1', 'mostrarVistaReport1');

            alternarElemento('', 'contenedor-OutagePercentage');
            alternarElemento('', 'contenedor-EG01');
            alternarElemento('', 'EventEG02');
            alternarElemento('', 'contenedor-EG02');
            alternarElemento('', 'EventEG01');
            alternarElemento('', 'contenido-produccion');
            alternarElemento('', 'contenido-data');
            alternarElemento('', 'contenedor-OutageProjection');
            alternarElemento('', 'contenedor-Report1');
            alternarElemento('', 'contenedor-Report2');

            var btnOilGraph = document.getElementById('btnOilGraph');
            btnOilGraph.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOilGraph', 'mostrarVistaOilGraph');
            alternarElemento('', 'contenedor-OilGraph');


            var btnOil = document.getElementById('btnOil');
            btnOil.classList.remove('botonSeleccionado');
            alternarElemento('ocultarVistaOil', 'mostrarVistaOil');
            alternarElemento('', 'contenedor-Oil');

            alternarElemento('contenedor-DeretingLoad', '');
            alternarElemento('mostrarVistaDeretingLoad', 'ocultarVistaDeretingLoad');



        });

        document.getElementById("GuardarDatos").addEventListener("click", function () {
            var DBRAM = obtenerDatosProduccion();
            //var datosRAM = GuardarDatos();
            var detalleObtenerdatosOil = obtenerdatosOil();

            var datos = {
                DBRAM :DBRAM,
                listaViewOil : detalleObtenerdatosOil
            }
            console.log("datos", datos);

            guardarDatosControl('@Url.Action("GuardarDatosRAMOil", "RAM")', datos);

        });

        function alternarElemento(idMostrar, idOcultar) {
            var mostrar = document.getElementById(idMostrar);
            var ocultar = document.getElementById(idOcultar);
            if (mostrar) {
                mostrar.style.display = 'initial';
            }
            if (ocultar) {
                ocultar.style.display = 'none';
            }
        }




        function GenerarListaDatosRAm() {
            var datos = {};
            var inputs = document.getElementsByTagName('input');

            for (var i = 0; i < inputs.length; i++) {
                var input = inputs[i];
                if (input.getAttribute('reporte-ram') === 'true' && input.value != '') {
                    var nombreClase = input.getAttribute("class-name");
                    var fechaMes = input.getAttribute("fecha-mes");

                    if (!datos[fechaMes]) {
                        datos[fechaMes] = {};
                        datos[fechaMes]['idReporteRam'] = datosOperario.IdSitio + "-RPT_RAM-" + obtenerFecha("format").substring(3);
                        datos[fechaMes]['fecha'] = obtenerFecha("fechaVista");
                    }

                    datos[fechaMes][nombreClase] = input.value;
                }
            }

            return datos;
        }




        function ExportarReportes(datos) {
            fetch('@Url.Action("ExportarReporte", "RAM")', {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(datos)
            })
                .then(function (response) {
                    return response.json();
                })
                .then(function (data) {
                    if (data.respuesta.idRespuesta === 0 || data.respuesta.idRespuesta === 1) {
                        Swal.fire({
                            title: "Success!!",
                            text: "Se guardaron los datos.",
                            icon: "success",
                            button: "Aww yiss!",
                        });

                    } else {
                        Swal.fire({
                            title: "Error",
                            text: data.respuesta.mensaje,
                            icon: "error",
                            button: "OK",
                        });
                    }
                })
                .catch(function (error) {
                    console.error("Error:", error);
                });
        }

        function obtenerDatosProduccion() {

            var DBRAM = [];

            valoresMesesEspañol.forEach(function (mes) {

                console.log("mes", mes);
                var consumoServiciosAuxiliares = "";
                var lhv_kJkg1 = "";
                var lhv_kJkg2 = "";
                var horasDerateoEquivalente1 = "";
                var horasDerateoEquivalente2 = "";
                var capacidadMaximaNeta1 = "";
                var capacidadMaximaNeta2 = "";

                if (mes !== 'YTD') {
                    consumoServiciosAuxiliarest = document.getElementById("input-Servicio-Auxiliares-" + mes);
                    lhv_kJkg1 = document.getElementById("LHV_kJkgGE1-" + mes);
                    lhv_kJkg2 = document.getElementById("LHV_kJkgGE2-" + mes);
                    horasDerateoEquivalente1 = document.getElementById("horasDerateoEquivalenteGE1-" + mes);
                    horasDerateoEquivalente2 = document.getElementById("horasDerateoEquivalenteGE2-" + mes);
                    capacidadMaximaNeta1 = document.getElementById("capacidadMaximaNetaGE1-" + mes);
                    capacidadMaximaNeta2 = document.getElementById("capacidadMaximaNetaGE2-" + mes);
                    fecha: obtenerFecha("fechaVista");

                    var dato = {
                        IdReporteRam: datosOperario.IdSitio + "-RPT_RAM-" + obtenerFecha("format").substring(3),
                        consumoServiciosAuxiliares: consumoServiciosAuxiliarest.value,
                        LHV_kJkgGE1: lhv_kJkg1.value,
                        LHV_kJkgGE2: lhv_kJkg2.value,
                        horasDerateoEquivalenteGE1: horasDerateoEquivalente1.value,
                        horasDerateoEquivalenteGE2: horasDerateoEquivalente2.value,
                        capacidadMaximaNetaGE1: capacidadMaximaNeta1.value,
                        capacidadMaximaNetaGE2: capacidadMaximaNeta2.value,
                        fecha: fecha
                    }

                    DBRAM.push(dato);
                }
            });
            return DBRAM;
        }

        function ObtenerDatosTotales() {
            var diccionarioPorGenerador = {};

            for (var i = 1; i <= 2; i++) {
                var elementosTotal = document.querySelectorAll('tr[class-atribute="totalEG' + i + '"]');
                var listaTotal = Array.from(elementosTotal);
                var datosPorMes = {};
                var mes = 0;

                listaTotal.forEach(function (total) {
                    var dato = {};
                    var filas = total.querySelectorAll('td');

                    filas.forEach(function (fila) {
                        var nombreClase = fila.getAttribute("class-name");

                        if (nombreClase !== null) {
                            dato[nombreClase] = fila.innerText;
                        }
                    });

                    mes++;
                    // Asegúrate de que haya una entrada en el objeto para el mes actual
                    if (!datosPorMes[mes]) {
                        datosPorMes[mes] = dato;
                    }

                });

                diccionarioPorGenerador[i] = datosPorMes;
            }

            return diccionarioPorGenerador;
        }

                function GuardarDatos() {
            var datosRam = GenerarListaDatosRAm();
            var datosEvento = {
                horasTotalesPorMes: ObtenerDatosTotales(),
                eventoMes: null
            };
            var fechaSeleccionada = @Html.Raw(JsonConvert.SerializeObject(fechaSeleccionada)); // Suponiendo que fechaSeleccionada es una cadena en el formato deseado
            var datos = {
                datosEvento: datosEvento,
                fecha: fechaSeleccionada
            };
            return datos;
        }

        function guardarDatosControl(url, datos) {
            fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(datos)
            })
            .then(function (response) {
                if (!response.ok) {
                    // Si la respuesta no está bien, mostrar un error
                    mostrarError();
                    throw new Error('Error en la solicitud');
                }
                return response.arrayBuffer(); // Devolver el contenido como un ArrayBuffer
            })
            .then(function (buffer) {
                var blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                mostrarMensaje(blob);
            })
            .catch(function (error) {
                // Capturar y manejar cualquier error
                console.error("Error:", error);
                mostrarError();
            });
        }

        function descargarArchivo(blob) {
            //var blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
            
            var fechaSeleccionadoView = obtenerFecha("fechaVista");
            var nombreMes = obtenerMesTitulo(fechaSeleccionadoView.split('/')[1]);
            var nombreArchivo =  'RAM CGD '+ datosOperario.IdSitio + ' ' + nombreMes + ' ' + fechaSeleccionadoView.split('/')[2] + '.xlsx';
           

            var link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = nombreArchivo;
            link.click();
        }

        function mostrarMensaje(blob) {
                Swal.fire({
                          title: "Desea Descargar el Excel?",
                          showDenyButton: true,
                          showCancelButton: false,
                          confirmButtonText: "SI",
                          denyButtonText: `NO`
                        }).then((result) => {                          
                          if (result.isConfirmed) {
                                descargarArchivo(blob);
                            Swal.fire("Exportado!", "", "success");
                          }
                        });
        }
       

        //function mostrarMensaje(data) {
        //    if (data.respuesta.idRespuesta === 0 || data.respuesta.idRespuesta === 1) {
        //        Swal.fire({
        //            title: "Success!!",
        //            text: "Se guardaron los datos.",
        //            icon: "success",
        //            button: "Aww yiss!"
        //        });
        //    } else {
        //        Swal.fire({
        //            title: "Error",
        //            text: data.respuesta.mensaje,
        //            icon: "error",
        //            button: "OK",
        //        });
        //    }
        //}

        function mostrarError() {
            Swal.fire({
                title: "Error",
                text: "Error en la solicitud.",
                icon: "error",
                button: "OK",
            });
        }





    });

</script>